<%@ page contentType="text/html;charset=utf-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page session="false" %>
<html>
<head>
    <title>summaryDashboard</title>
    <script src="js/jquery/jquery-1.11.2.js"></script>
    <script src="js/jquery-ui-1.11.3.custom/jquery-ui.js"></script>
    <script src="js/jquery.csv-0.71.js"></script>
    
    <script type="text/javascript" src="js/jqGrid/jquery.jqGrid.src.js"></script>
    <script type="text/javascript" src="js/jqGrid/i18n/grid.locale-kr.js"></script>
    
    <!-- <script type="text/javascript" src="http://www.ok-soft-gmbh.com/jqGrid/jquery.jqGrid-4.4.1/js/i18n/grid.locale-en.js"></script> -->
    <!-- <script type="text/javascript" src="http://www.ok-soft-gmbh.com/jqGrid/jquery.jqGrid-4.4.1/js/jquery.jqGrid.src.js"></script> -->
    <!-- <script type="text/javascript" src="http://www.ok-soft-gmbh.com/jqGrid/json2.js"></script> -->
    
    <%-- 2. high charts --%>
    
	<script src="js/highcharts/src/highcharts.src.js"></script>
	<!-- <script src="js/highcharts/highcharts.js"></script> -->
	<script src="js/highcharts/modules/drilldown.src.js"></script>
	
	<!-- <script src="js/highcharts/multi-drilldown.js"></script> -->
	
	<script src="js/highcharts/src/highcharts-more.src.js"></script>
	<script src="js/highcharts/src/exporting.src.js"></script>
	
	
	
	<%-- 3. Additional files for the Highslide popup effect --%>
	<script type="text/javascript" src="js/highslide/highslide-full.js"></script>
	<script type="text/javascript" src="js/highslide/highslide.config.js" charset="utf-8"></script>
	
	<%-- 4. local common --%>
	<script src="js/dashboard.js?version=1"></script>
	
	<%-- 5. local --%>
	<script src="js/pms/resourceBySite.js"></script>
	<script src="js/pms/resourceByFunc.js"></script>
	
	<!-- <link rel="stylesheet" type="text/css" href="js/highslide/highslide.css" />
	<link rel="stylesheet" type="text/css" href="js/jquery-ui-1.11.3.custom/jquery-ui.css" />
	<link rel="stylesheet" type="text/css" href="js/jqGrid/css/ui.jqgrid.css" /> -->
	
	<script src="js/highcharts/modules/no-data-to-display.src.js"></script>
	<%-- multi select --%>
	<script src="/dashboard/js/jquery-multiselect/jquery.multiselect.js"></script>
	<script src="/dashboard/js/jquery-multiselect/src/jquery.multiselect.filter.js"></script>
	<link rel="stylesheet" type="text/css" href="/dashboard/js/jquery-multiselect/jquery.multiselect.css" />
	<link rel="stylesheet" type="text/css" href="/dashboard/js/jquery-multiselect/jquery.multiselect.filter.css" />
	<link rel="stylesheet" type="text/css" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1/themes/ui-lightness/jquery-ui.css" />
	
	<%-- execise --%>
	<!-- <script src="/dashboard/js/jmespath.js-master/artifacts/jmespath.min.js"></script> -->
	<script src="/dashboard/js/jmespath.js-master/jmespath.js?version=1"></script>
	<script type="text/javascript">
	var projectList = [];
	var pageChart;
	var symbolRenderer;
	 Highcharts.SVGRenderer.prototype.symbols.triangleUp = function (x, y, w, h) {
		 
		 return {
			id:'myTriangle',
			d:[
				'M', x, y,
				'L', x + w, y,
				x + w / 2, y + h,
				'Z'
			]
		 };
     };
     
	Highcharts.SVGRenderer.prototype.symbol = function (symbol, x, y, width, height, options) {
		var symbolSizes ={};
		var obj,
		
		// get the symbol definition function
		symbolFn = this.symbols[symbol],

		// check if there's a path defined for this symbol
		path = symbolFn && symbolFn(
			Math.round(x),
			Math.round(y),
			width,
			height,
			options
		),

		imageElement,
		imageRegex = /^url\((.*?)\)$/,
		imageSrc,
		imageSize,
		centerImage;

	if (path) {

		obj = this.path(path);
		// expando properties for use in animate and attr
		extend(obj, {
			symbolName: symbol,
			x: x,
			y: y,
			width: width,
			height: height
		});
		if (options) {
			extend(obj, options);
			if(options.elementObj != undefined){
				extend(obj.element, options.elementObj);
			}
		}


	// image symbols
	} else if (imageRegex.test(symbol)) {

		// On image load, set the size and position
		centerImage = function (img, size) {
			if (img.element) { // it may be destroyed in the meantime (#1390)
				img.attr({
					width: size[0],
					height: size[1]
				});

				if (!img.alignByTranslate) { // #185
					img.translate(
						Math.round((width - size[0]) / 2), // #1378
						Math.round((height - size[1]) / 2)
					);
				}
			}
		};

		imageSrc = symbol.match(imageRegex)[1];
		imageSize = symbolSizes[imageSrc] || (options && options.width && options.height && [options.width, options.height]);

		// Ireate the image synchronously, add attribs async
		obj = this.image(imageSrc)
			.attr({
				x: x,
				y: y
			});
		obj.isImg = true;

		if (imageSize) {
			centerImage(obj, imageSize);
		} else {
				// Initialize image to be 0 size so export will still function if there's no cached sizes.
				obj.attr({ width: 0, height: 0 });
	
				// Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,
				// the created element must be assigned to a variable in order to load (#292).
				imageElement = Highcharts.createElement('img', {
					onload: function () {
						centerImage(obj, symbolSizes[imageSrc] = [this.width, this.height]);
					},
					src: imageSrc
				});
			}
		}
	
		if(options && options.elementObj != undefined){
			extend(obj.element, options.elementObj);
		}

		return obj;
     }
     
     function extend(a, b) {
   		var n;
   		if (!a) {
   			a = {};
   		}
   		for (n in b) {
   			a[n] = b[n];
   		}
   		return a;
   	}
	
	
	
	var fwqDataList = [];
	var scheduleDataList = [];
	var scheduleSeries = {};
	var over60 = [];
	var on = [];
	
	$(function () {
		pmsProjectList();
		pmsAllSchedule();
		getDataByJson();
		$( window ).resize(function() {
			buttons();
		});
	});
	
	var responseData = {};
	
	function pmsProjectList(){
		$.ajax({
			//url : "/dashboard/dashboardProjectListJson.html",
			url : "/dashboard/pmsProjectListJson.html",
			data: {division:'jira'},
			async : false,
			success : function(pResponseData){
				//var projectList = responseData.projectList;
				//var projectList0 = responseData.dataList;
				//var projectList =	dataFilter(projectList0,[{col:'APPLICATION_ID',val:'SPM_00005011'},{col:'APPLICATION_ID',val:'SPM_00005010'},{col:'APPLICATION_ID',val:'SPM_00005558'}]);
				//var projectList =responseData.projectList;
				//sortObjects(projectList,['APPLICATION_NM','PJT_NAME'])
				responseData = pResponseData;
				projectList =pResponseData.dataList;
				
				var groupKeys = ['DISPLAY_ORDER','PJT_NAME'];
				var series = getDrillDownDataSeries2(
						'',
						projectList ,
						groupKeys ,
						[], //filter
						[], //convert
						'', //xAxis
						'CNT',
						{cd: 'APPLICATION_ID', name:'APPLICATION_NAME'},
						{isGroupby: false}
				);
				
				var selected ="";
				var sb = [];
				$.each(series.series,function(index,s){
					sb.push("<optgroup label=\""+s.name+" (Click)\">");
					$.each(s.data,function(index1,d){
						if(this.APPLICATION_NAME=="Mobile Solution")
							selected = "selected";
						else 
							selected = "selected";
						sb.push("<option value='"+ d.PJT_CODE +"' "+selected+" status='"+d.PJT_STATE+"'>" + d.PJT_NAME +"</option>");
					});
					sb.push("</optgroup>");
				});
				
				$("select[name=pjtCodeList]").append(sb.join(""));
				
				$("select[name=pjtCodeList]").change(function(){
					getDataByJson();
					//drawchart();
				});
				projectMultiSelect = $("select[name=pjtCodeList]").multiselect({
					height:400,
					selectedText: 'Project # selected',
					noneSelectedText: 'Select projects'
				}).multiselectfilter();
				$("div.ui-multiselect-menu").css("width","500px");
				$(".ui-multiselect-filter input").css("width","200px");
				
				//상태표시
				$.each(series.series,function(index,s){
					$.each(s.data,function(index1,d){
						var label = $("input[name=multiselect_pjtCodeList][value="+d.PJT_CODE+"]").parent();
						label.append("<span style='color: blue;float:right;'>"+ d.PJT_STATE_NAME +"</span>");
						
					});
				});
				
				pjtStatus(projectList);
			}
		});
	}
	
	
	function pjtStatus(projectList){
		var status = groupbyCount(projectList,['PJT_STATE','PJT_STATE_NAME']);
		
		var selected ="";
		var sb = [];
		$.each(status,function(){
			if(this.PJT_STATE_NAME=="Proceeding")
				selected = "selected";
			else 
				selected = "";
			sb.push("<option value='"+ this.PJT_STATE +"' "+selected+">" + this.PJT_STATE_NAME +"</option>");
		});
		
		$("select[name=pjtStatus]").append(sb.join(""));
		$("select[name=pjtStatus]").change(function(){
			filterByStatus();
			
		});
		var select = $("select[name=pjtStatus]").multiselect({
			selectedList: 1,
			height:100,
			selectedText: 'Status # selected',
			noneSelectedText: 'Select Status'
		});
		filterByStatus(status);
	}
	
	function filterByStatus(){
		$("select[name=pjtStatus] option").each(function(i,sel){
			if($(this).is(':selected')){
				$("select[name=pjtCodeList] option[status="+$(this).val()+"]").prop( "disabled", false );
				//$("input[name=multiselect_pjtCodeList],[value="+$(this).val()+"]").prop( "disabled", true );
			}else{
				$("select[name=pjtCodeList] option[status="+$(this).val()+"]").prop( "disabled", true );
				//$("input[name=multiselect_pjtCodeList],[value="+$(this).val()+"]").prop( "disabled", false );
			}
		});
		$("select[name=pjtCodeList] option").each(function(i,project){			
			$("input[name=multiselect_pjtCodeList][value="+$(this).val()+"]").prop( "disabled", $(this).prop("disabled") );
			if($(this).prop("disabled")){
				$("input[name=multiselect_pjtCodeList][value="+$(this).val()+"]").parent().addClass( "ui-state-disabled" );
				$("input[name=multiselect_pjtCodeList][value="+$(this).val()+"]").attr("checked",false);
				
			}else{
				$("input[name=multiselect_pjtCodeList][value="+$(this).val()+"]").parent().removeClass( "ui-state-disabled" );
			}
			
		});
		
		$("input[name=multiselect_pjtCodeList]").each(function(){
			$("select[name=pjtCodeList] option[value="+$(this).val()+"]").prop( "selected", $(this).is(":checked") );
		});
		
		//projectMultiSelect.multiselect('refresh');
				
		/* var groupKeys = ['DISPLAY_ORDER','PJT_NAME'];
		var series = getDrillDownDataSeries2(
				'',
				projectList ,
				groupKeys ,
				[], //filter
				[], //convert
				'', //xAxis
				'CNT',
				{cd: 'APPLICATION_ID', name:'APPLICATION_NAME'},
				{isGroupby: false}
		); */
		
		projectMultiSelect = $("select[name=pjtCodeList]").multiselect({
			height:400,
			selectedText: 'Project # selected',
			noneSelectedText: 'Select projects'
		}).multiselectfilter();
		//$("div.ui-multiselect-menu").css("width","500px");
		//$(".ui-multiselect-filter input").css("width","200px");
		
		//상태표시
		/* $.each(series.series,function(index,s){
			$.each(s.data,function(index1,d){
				var label = $("input[name=multiselect_pjtCodeList][value="+d.PJT_CODE+"]").parent();
				label.append("<span style='color: blue;float:right;'>"+ d.PJT_STATE_NAME +"</span>");
				
			});
		}); */
		
		getDataByJson();
	}
	
	function pmsAllSchedule(){
		//jQuery.support.cors = true;
		$.ajax({
			url : "/dashboard/pmsScheduleAllJson.html",
			async : false,
			data: {phaseBase: $("#phaseBase").val()},
			success : function(pResponseData){
				scheduleDataList = pResponseData.dataList;
				adjustDelay();
			}
		});
	
	}
	
	function getDataByJson(){
		//jQuery.support.cors = true;
		$.ajax({
			url : "/dashboard/fwqDivisionJson.html",
			data: $("#form").serialize(),
			//type: "POST",
			//crossDomain: true,
			//dataType: 'json',
			success : function(pResponseData){
				fwqDataList = pResponseData.fwqDataList;
				//scheduleDataList = pResponseData.scheduleDataList;
				mergeFwqSchedule();
				virtualDelay();
				drawChart();
			}
		});
	
	}
	
	function adjustDelay(){
		
		//DELAY_DT_SUM
		var groupKeys = ['PJT_ID', 'PJT_NAME', 'PHASE_ID', 'PHASE_NAME', 'SUB_PHASE_ID', 'SUB_PHASE_NAME','PJT_STATE_NAME', 'SUB_PHASE_SEQ','subPhaseSeqDt','PLAN_DT', 'ACTUAL_DT', 'DELAY_DT'];
		var prePjtId = "";
		sortObjects(scheduleDataList,groupKeys);
		for (var i = 0; i < scheduleDataList.length; i++){
			var data = scheduleDataList[i];
			if(prePjtId != scheduleDataList[i].PJT_ID){
				data.DELAY_DT_SUM = 0;
				data.DELAY_DT_SUM += data.DELAY_DT;
				prePjtId = scheduleDataList[i].PJT_ID;
			}else{
				data.DELAY_DT_SUM = scheduleDataList[i-1].DELAY_DT_SUM;
				data.DELAY_DT_SUM += data.DELAY_DT;
			}			
        }
		
				
		scheduleSeries = getDrillDownDataSeries2(
				'',
				scheduleDataList ,
				groupKeys ,
				[], //filter 
				[], //convert
				'', 
				'CNT',
				{cd: 'PJT_ID', name:'PJT_NAME'},
				{isGroupby:false}
		);	
		
		// delay dt 다시계산	
		$.each(scheduleSeries.series,function(index,s){
			$.each(s.data,function(indexd,data){
				if($.trim(data.ACTUAL_DT) == '' && indexd > 0 ){
					var preDelayDt = s.data[indexd-1].DELAY_DT;
					var curDelayDt = getDateDiff(data.CUR_DT,data.PLAN_DT);
					if(curDelayDt > preDelayDt){
						data.DELAY_DT = curDelayDt ;
						//data.y = curDelayDt;
					}else{
						//data.DELAY_DT = curDelayDt ;
						data.DELAY_DT = preDelayDt ;
						//data.y = preDelayDt;
					}
					
				}
				
			});
		});
		
		
		
	}
	
	/**
	* fwq와 schedule delay를 합친다.
	* 
	**/
	function mergeFwqSchedule(){
		
		$.each(fwqDataList,function(){
			var schedules = dataFilter(scheduleSeries.series,[{col:'id',val:this.PJT_CODE}]);
			this.schedule = schedules;
			if(schedules.length > 0)
				this.DELAY_DT = schedules[0].data[schedules[0].data.length-1].DELAY_DT;
		});
		
	}
	
	function virtualDelay(){
		over60 = [];
		on = [];
		$.each(fwqDataList,function(){
			if(this.DELAY_DT > 60)
				over60.push(this);
			else if(this.DELAY_DT <= 0)
				on.push(this);
		});
		
		var over60Max = maxValue(over60,'DELAY_DT');
		var over60Min = minValue(over60,'DELAY_DT');
		var over60Gap = over60Max - over60Min;
		
		var over60Avg = groupbyAvg(over60,['GUBUN'],'DELAY_DT');
		if(over60Avg.length>0) 
			over60Avg = over60Avg[0].average;
		else 
			over60Avg = 0;
		
		var onMax = maxValue(on,'DELAY_DT');
		var onMin = minValue(on,'DELAY_DT');
		var onGap = onMax - onMin;
		var onAvg = groupbyAvg(on,['GUBUN'],'DELAY_DT');
		if(onAvg.length>0) 
			onAvg = onAvg[0].average;
		else 
			onAvg = 0;
		
		var over60Range = 30;
		var onRange = 30;
		$.each(fwqDataList,function(){
			if(this.DELAY_DT > 60){
				var avg = over60Range/2;
				if(over60Gap == 0)
					this.delayDtVirtual = avg;
				else{
					//var pointPer = over60Range/over60Gap;
					//var scale = over60Gap * 1/ over60Range;
					//var gab = (this.DELAY_DT - over60Min) * scale;
					//this.delayDtVirtual = gab*-1;
					
					//var scale = 30/over60Avg;
					var scale = 30/over60Gap;
					this.delayDtVirtua = (this.DELAY_DT - over60Min) * scale;
					
					/* var gapAvg = this.DELAY_DT - over60Avg;
					if(gapAvg > 0){
						l = (gapAvg*scale*15)/30;
					}else{
						
						this.delayDtVirtual = 15 + (gapAvg*scale*15)/30*-1;
						
					}		 */			
					
				}
				
			}
			else if(this.DELAY_DT <=60 && this.DELAY_DT > 30){
				
				this.delayDtVirtual = over60Range + (60 - this.DELAY_DT);
			}
			else if(this.DELAY_DT <=30 && this.DELAY_DT > 0){
				this.delayDtVirtual = over60Range + 30 +  (30 - this.DELAY_DT) ;
			}
			else if(this.DELAY_DT <= 0){
					var avg = onRange/2;
					var gab = 0;
					if(onGap == 0)
						this.delayDtVirtual = 90 + avg;
					else{
						//var pointPer = onRange/onGap;
						//var scale = onGap * 1/ onRange;
						//var gab = (this.DELAY_DT - onMin) * scale;
						//this.delayDtVirtual = onRange + 60 + gab;
						
						//var scale = Math.abs(30/onAvg);
						var scale = Math.abs(30/onGap);
						this.delayDtVirtual = 90 + Math.abs(this.DELAY_DT - onMax) * scale;
						
						/* var gapAvg = this.DELAY_DT - onAvg;
						
						if(gapAvg > 0){
							this.delayDtVirtual = 90 + 15- (gapAvg*scale*15)/30;
						}else{
							this.delayDtVirtual = 90 + 15 + (gapAvg*scale*15)/30*-1;
							if(this.delayDtVirtual > 120)
								this.delayDtVirtual = Math.floor(this.delayDtVirtual);
						} */
					}
			}
			else{
				
			}
				
		});
		
	}
	
	function drawChart(){		
		//01. series데이타. project
		var dataHigh = new Array();
		
		for (var i = 0; i < fwqDataList.length; i++){
			var preData = {};
			var diff = 0;
			//var symbol ="circle"; 
			var symbol ="url(/dashboard/images/unchange.png)"; 
			var fillColor = "yellow";
			
			if( fwqDataList[i].preData != null){
				preData = fwqDataList[i].preData;
			}
			if(preData.POINT != undefined){
				diff = fwqDataList[i].POINT - preData.POINT;
			}
			
			if(Math.round(diff) > 0 ){
				//symbol = 'triangle';
				//fillColor = 'red';
				symbol = 'url(/dashboard/images/up.png)';
			}else if(Math.round(diff) < 0){
				//symbol = 'triangle-down';
				//fillColor = 'blue';
				symbol = 'url(/dashboard/images/down.png)';
			}
			
			var data =  {
				x: fwqDataList[i].delayDtVirtual ,
				y: fwqDataList[i].POINT,
				
				dataraw: fwqDataList[i],
				dataLabels: {
                    enabled: true,
                    format:'<b>{point.dataraw.PJT_NAME}</b>',
                    formatter: function() {
    	               //return '<b style="font-size:16px;">'+ this.point.dataraw.PJT_NAME +'</b>';
    	                //alert('a');
    	            },
    	            y: - 8
                },
                //symbol
	          	marker:{
	          		symbol: symbol,
	          		width:20,
	          		height:20,
	          		fillColor : 'rgba(255,0,0,1)',
	          		//lineColor : '#000000',
	          		//lineWidth : 1,
	          		elementObj:{
	          			id: fwqDataList[i].PJT_CODE + '-' + fwqDataList[i].MEASURE_DT 
	          		},
	          		states: {
                        hover: {
                        	endabled:true,
                            //fillColor: fillColor,
                            //lineColor: '#000000',
                            //lineWidth: 2
                            symbol:symbol,
                            width:33,
                            height:33
                        }
                    }
	          	}  
                
			};
			dataHigh.push(data);
			//dataHigh.push([dataRaw[i].QUALITY ,dataRaw[i].DELIVERY, 300]);
		}
		
		
		$('#container').highcharts({
	        chart: {
	        	//type:'bubble',
	        	zoomType: 'xy',
	        	defaultSeriesType:'scatter',
	        	animation:true,
	            //borderWidth:1,
	            //borderColor:'#ccc',
	            marginLeft: 120,
	            //marginBottom: 100,
	            //marginTop: 100,
	            marginRight: 50,
	            //marginLeft:200,
	            //marginRight:200,
	            //backgroundColor:'#eee',
	            //plotBackgroundColor:'#fff',
	            events:{
	            	redraw: function () {
	            		//symbolText();
	            		symbolTextTimeOut();
	            		//buttons();
	            	}
	            }
				,style: {
	                overflow: 'visible'
	            }
	        },
	        credits: {//gets rid of the highcharts logo in bottom right
                enabled: false
            },
	        title:{
	            text:'&nbsp;',
            	useHTML: true
	        },
	        legend:{
	            enabled:false                                
	        },
	        tooltip: {
	            formatter: function() {
	            	var schedules = this.point.dataraw.schedule[0].data;
	            	var phase = schedules[schedules.length-1].SUB_PHASE_NAME;
	                return '<b>'+ this.point.dataraw.PJT_NAME +'</b><br/>'+
	                    'Quality: ' + this.y +' , '+ 'Schedule: ' + phase + '('+ this.point.dataraw.DELAY_DT +')';
	                
	            }
	        },
	        plotOptions: {
	            series: {
	                shadow:false,
	                cursor: 'pointer',
	                animation: {
	                    complete:  function () {
	                    	//alert("complete");
	                    }
	               	},
	                events:{
	                	afterAnimate: function () {
	                    	 //symbolText();
	                		//alert("afterAnimate");
	                		
	                     }
	                },
	                point:{	                	
	                	events:{
	                		click: function(e){
	                			popFWQProjectSummary.call(this);
	                		},
	                		mouseOver: function() {
	                            this.graphic.attr('width', 25);
	                            this.graphic.attr('height', 25);
		                    },
		                    mouseOut: function() {
		                        this.graphic.attr('width', 20);
		                        this.graphic.attr('height', 20);
		                     }
		                     
	                	}
	                	
	                }
	            },
	            scatter:{
	            	marker:{
	            		radius: 7,
	            		states: {
	                        hover: {
	                            enabled: true,
	                            lineColor: 'rgb(100,100,100)'
	                        }
	                    }
	            	}
	            }
	        },
	        xAxis:{
	            title:{
	                text:'Schedule'
	                , align: 'high'
	                , offset :30
	                
	                
	            },
	            min:0,
	            max:120,
	            tickInterval:30,
	            tickLength:10,
	            
	            //minorTickLength:0,
	            //gridLineWidth:1,
	            //showLastLabel:true,
	            //showFirstLabel:false,
	            //lineColor:'#ccc',
	            //lineWidth:1    
				labels: {
					enabled: true
	                , formatter: function () {
	                	return '';
	                } 
	            	
	            } 
	            , plotBands: [{ 
		                //color: '#FCFFC5',
		                from: 0,
		                to: 30,
		                label: {
			                    text: 'Extremely Delayed<br/>(60 days~) ',
			                    verticalAlign: 'bottom'
			                },
		            	color:'rgba(255,0,0,0.05)'
		            },
		            { // mark the weekend
		                //color: '#FCFFC5',
		                from: 30,
		                to: 60,
		                label: {
		                    text: 'Significantly Delayed<br/>(~60 days) ',
		                    verticalAlign: 'bottom'
		                },
		           		color:'rgba(255,255,0,0.05)'
		            },
		            { // mark the weekend
		                //color: '#FCFFC5',
		                from: 60,
		                to: 90,
		                label: {
		                    text: 'Some Delayed<br/>(~30 days) ',
		                    verticalAlign: 'bottom'
		                },
		                color:'rgba(255,255,0,0.05)'
		            },
		            { // mark the weekend
		                //color: '#FCFFC5',
		                from: 90,
		                to: 120,
		                label: {
		                    text: 'On Schedule ',
		                    verticalAlign: 'bottom'
		                },
		                color:'rgba(0,255,0,0.05)'
		            }
	            ]
	        	, plotLines:[
	        		{value: 30,width:1,color: '#000000',dashStyle: 'dash'},
	        		{value: 60,width:1,color: '#000000',dashStyle: 'dash'},
	        		{value: 90,width:1,color: '#000000',dashStyle: 'dash'}
	        	]
	            , events: {
	                afterSetExtremes: function(event){
	                    //if (this.getExtremes().dataMin < event.min)
	                    //	symbolText();//alert("Zoomed in!");
	                    
	                }
	            }
	        },
	        yAxis:{
	            title:{
	                text:'Quality'
	                , rotation:0
	                , margin:25
	                , align: 'high'
		            , offset :0
		            , y: -10
	            },
	            min:0,
	            max:200,
	            tickInterval:5,
	            //tickInterval:10,
	            tickLength:0,
	            minorTickLength:0,
	            lineColor:'#ccc',
	            lineWidth:1     ,
	            gridLineWidth: 0,
	            labels: {
	                formatter: function () {
	                	return '';
	                }
	            }    
	            , plotBands: [{ 
		                //color: '#FCFFC5',
		                from: 0,
		                to: 50,
		                label: {
		                    text: 'Need Improve<br/>(0~50) ',
		                    textAlign: 'right',
		                    verticalAlign: 'middle',
		                    x: -10
		                }
		            },
		            { 
		                //color: '#FCFFC5',
		                from: 51,
		                to: 80,
		                label: {
		                    text: 'Improve<br/>(51~80) ',
		                    textAlign: 'right',
		                    verticalAlign: 'middle',
		                    x: -10
		                }
		            },
		            { 
		                //color: '#FCFFC5',
		                from: 81,
		                to: 100,
		                label: {
		                    text: 'Good<br/>(81~100) ',
		                    textAlign: 'right',
		                    verticalAlign: 'middle',
		                    x: -10
		                }
		            },
		            { 
		                //color: '#FCFFC5',
		                from: 101,
		                to: 150,
		                label: {
		                    text: 'Very Good<br/>(101~150) ',
		                    textAlign: 'right',
		                    verticalAlign: 'middle',
		                    x: -10
		                }
		            },
		            { 
		                //color: '#FCFFC5',
		                from: 151,
		                to: 200,
		                label: {
		                    text: 'Excellent<br/>(151~200) ',
		                    textAlign: 'right',
		                    verticalAlign: 'middle',
		                    x: -10
		                }
		            }
	            ]
	            , plotLines:[
    	        		{value: 50,width:1,color: '#000000',dashStyle: 'dash'},
    	        		{value: 80,width:1,color: '#000000',dashStyle: 'dash'},
    	        		{value: 100,width:1,color: '#000000',dashStyle: 'dash'},
    	        		{value: 150,width:1,color: '#000000',dashStyle: 'dash'},
    	        		{value: 200,width:1,color: '#000000',dashStyle: 'dash'}
    	        	]
	            ,  events: {
	                afterSetExtremes: function(event){
	                    //if (this.getExtremes().dataMin < event.min)
	                    //    alert("Zoomed in!");
	                    //symbolText();
	                }
	            }
	        },
	        series: [{
	            //color:'#185aa9',
	            data: dataHigh //,
	           /*  marker: {
	            	symbol: 'triangle',
	            	elementObj:{
	            		id:'dashboardSymbolText'
	            	},
	               //fillColor: {
	               //     radialGradient: { cx: 0.5, cy: 0.5, r: 0.9 } ,
	               //     stops: [
	               //         [0, 'rgba(100,0,0,1)'],
	               //         [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0.5).get('rgba')]
	               //     ]
	               //} ,
	                style:{
	                	//fontSize: '20px'
	                } 
	            } */
	        }]
	        , navigation: {
	            buttonOptions: {
	                theme: {
	                    // Good old text links
	                    style: {
	                        color: '#039',
	                        textDecoration: 'underline'
	                    }
	                }
	            }
	        }
	        , exporting: {
	            buttons: {
	                contextButton: {
	                    enabled: false
	                }/* ,
	                printButton: {
	                    text: 'Schedule',
	                    onclick: function () {
	                    	popSchedule();
	                    }
	                },
	                exportButton: {
	                    text: 'Quality',
	                    stroke: "#000",
	                    onclick: function () {
	                    	popFWQuality();
	                    	
	                    }
	                } */
	            }
	        }
	    }, function(chart) { // on complete
	    		pageChart = chart;
	    		symbolRenderer = new Highcharts.Renderer(
					    $('.highcharts-markers')[0],2000,2000
				);
				//symbolRenderer = chart.renderer;
	    		 $('.highcharts-markers').resize(function(){
	    			 //symbolText();
	    		 });
	    		
	    		symbolText();
	    		buttons();
			}
		
		);
		
	}
	
	function symbolTextTimeOut(){
		setTimeout(symbolText,500);
	}
	
	function symbolText(){
		//symbol path 리스트를 찾는다.
		//차이를 그린다.
		//symbol path에서 값을 읽어들여 text를 그린다.
		$.each(fwqDataList,function(){
			var id = "symbolText"+this.PJT_CODE+'-'+this.MEASURE_DT;
			var $obj = $("#"+id);
			if($obj.length>0)
				$obj.remove();
		});
		
		$.each(fwqDataList,function(){
			var diff = 0;
			var preData = this.preData;
			if(preData.POINT != undefined){
				diff = this.POINT - preData.POINT;
			}
			var symbolPath = $("#"+this.PJT_CODE + '-' + this.MEASURE_DT);
			if(symbolPath.attr("d") != undefined ){
				var x,y;
				if(diff > 0){
					x = Math.round((symbolPath).attr("d").split(" ")[6])+1;
					y = Math.round((symbolPath).attr("d").split(" ")[7]);
				}else {
					x = Math.round((symbolPath).attr("d").split(" ")[1]);
					y = Math.round((symbolPath).attr("d").split(" ")[7]);
				}
				
				if(x != undefined && Math.round(diff) != 0){
					symbolRenderer.text(Math.round(diff) + '' , x , y +10).attr("id","symbolText"+this.PJT_CODE+'-'+this.MEASURE_DT).add();
				}
			}else if(symbolPath[0].tagName == 'image'){
				if(diff > 0){
					var xoffset = 2;
					if(diff >= 10) xoffset = 0;
					x = Math.round((symbolPath).attr("x")) + xoffset;
					y = Math.round((symbolPath).attr("y"))+13;
				}else {
					x = Math.round((symbolPath).attr("x"));
					y = Math.round((symbolPath).attr("y"))+13;
				}
				
				if(x != undefined && Math.round(diff) != 0){
					symbolRenderer.text(Math.round(diff) + '' , x , y +15)
					.attr("id","symbolText"+this.PJT_CODE+'-'+this.MEASURE_DT)
					.attr("style","font-weight:bolder;font-size:11px")
					.add($(".highcharts-series-group")[0]);
				}
			}
			
		
		});
	}
	
	function buttons(){
		var chart = $("#container").highcharts();
		var width = $("#container").width();
		
		$("#buttonQuality").remove();
		$("#buttonSchedule").remove();
		chart.renderer.label('Quality Metric', width -55 - 80 - 90 , 10)
        .attr({
            padding: 3,
            width: 80,
            //fill: Highcharts.getOptions().colors[0],
            fill: 'rgba(0, 0, 0, 0.75)',
            r:5,
            id:'buttonQuality'
        })                            
        .css({
            color: 'white',
            cursor:'pointer',//,
            //stroke:'red'
            textAlign: 'center'
        })
        .on('click', function () {
        	popFWQuality();

        })
        .add();
		
		chart.renderer.label('Guide', width -55 - 80 ,10 )
        .attr({
        	width:80,
        	
        	//'text-anchor':'middle',
            padding: 3,
            dx:10,
            //fill: Highcharts.getOptions().colors[0],
            fill: 'rgba(0, 0, 0, 0.75)',
            r:5,
            id:'buttonSchedule'
        })                            
        .css({
            color: 'white',
            cursor:'pointer',//,
            //stroke:'red'
            textAlign: 'center'
        })
        .on('click', function () {
        	//popSchedule();
        	window.open('http://confluence.skhynix.com/display/FSSW/FW+Quality+Guide','_blank');
        	//window.open("http://confluence.skhynix.com/", "", "left=300, top = 200, width=1300,height=700resizable=yes, scrollbars=yes, status=yes,menubar=yes");
        })
        .on('mouseover',function(e){
        	/* text = chart.renderer.text('This confluence page could be an informative text', e.layerX - 300, e.layerY - 10)
	        .attr({
	            zIndex: 9999
	        })
	        .css({
	        	overflow: 'visible'
	        })
		    .add();
		
	        var box = text.getBBox();
	        //box surrounding the tool tip text                     
	        border = chart.renderer.rect(box.x - 5, box.y - 5, box.width + 10, box.height + 10, 5)
	            .attr({
	            fill: 'rgba(255, 255, 255, 0.95)',
	            stroke: 'blue',
	                'stroke-width': 1,
	            zIndex: 100
	        })
	        .add(); */
        })
        .on('mouseout', function () {
	        /* text.destroy();
	        border.destroy(); */
	    })
        .add();
	}
	
	
	// 창의 크기가 변했을 때 안쪽의 색깔범위를 다시 조정한다.
	function adjustColor(){
		var chart = $('#container').highcharts();
		var width = chart.plotBox.width / 2.0;
        var height = chart.plotBox.height / 2.0 + 1;
        
        //초기화
        $("#colorRect11").remove() ;
        $("#colorRect12").remove() ;
        $("#colorRect21").remove() ;
        $("#colorRect22").remove() ;
       
        //좌상   
        chart.renderer.rect(chart.plotBox.x,                      
                            chart.plotBox.y, width, height, 1)
            .attr({
                fill: 'white',
                zIndex: 0,
                id:'colorRect11'
            })
            .add();
    	//우상
     	chart.renderer.rect(chart.plotBox.x + width,                      
                            chart.plotBox.y, width, height, 1)
            .attr({
                fill: 'lightblue',
                zIndex: 0,
                id:'colorRect12'
            })
            .add();
    	//좌하
    	chart.renderer.rect(chart.plotBox.x,                      
                            chart.plotBox.y + height, width, height, 1)
            .attr({
                fill: 'rgba(255,0,0,0.5)',
                zIndex: 0,
                id:'colorRect21'
            })
            .add();
    	//우하
    	chart.renderer.rect(chart.plotBox.x + width,                      
                            chart.plotBox.y + height, width, height, 1)
            .attr({
                fill: 'white',
                zIndex: 0,
                id:'colorRect22'
            })
            .add();
	}
	
	function popFWQProjectSummary(){
		//var newWin1 = window.open("FWQualitySummary", "FWQualitySummary", "width=1000,height=870, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes"); 
		// 2016.05.31 ie에서 404 나는 현상수정
		var newWin1 = window.open("", "FWQualitySummary", "width=1000,height=900, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes");
		
		var oFrm = document.getElementById("form");
		oFrm.pjt_code.value = this.options.dataraw.PJT_CODE;
		oFrm.pjt_name.value = this.options.dataraw.PJT_NAME_PMS;
		oFrm.action =  '/dashboard/fwqProjectSummary.html';
		oFrm.method = "post";
		oFrm.target = 'FWQualitySummary'; 
	    oFrm.submit();		
	    newWin1.focus();
	}
	
	function popFWQuality(){
		//var newWin1 = window.open("FWQuality", "FWQuality", "width=1000,height=870, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes"); 
		var newWin1 = window.open("", "FWQuality", "width=1000,height=870, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes");
		
		var oFrm = document.getElementById("form");
		//oFrm.pjt_code.value = this.options.dataraw.PJT_CODE;
		//oFrm.pjt_name.value = this.options.dataraw.PJT_NAME;
		oFrm.action =  '/dashboard/fwqMetric.html';
		oFrm.method = "post";
		oFrm.target = 'FWQuality'; 
	    oFrm.submit();		    
	    newWin1.focus();
	}
	
	function popSchedule(){
		//var newWin1 = window.open("PmsSchedule", "PmsSchedule", "width=1200,height=870, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes");
		var newWin1 = window.open("", "PmsSchedule", "width=1200,height=870, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes");
		
		var oFrm = document.getElementById("form");
		//oFrm.pjt_code.value = this.options.dataraw.PJT_CODE;
		//oFrm.pjt_name.value = this.options.dataraw.PJT_NAME;
		oFrm.action =  '/dashboard/pmsSchedule.html';
		oFrm.method = "post";
		oFrm.target = 'PmsSchedule'; 
	    oFrm.submit();	
	    newWin1.focus();
	}
	
	</script>
	<style type="text/css">
		html, body,form {
	        height: 100%;
	        width: 100%;
	        padding: 0;
	        margin: 0;
	        overflow:hidden;
	        line-height: 1.3em;
	        font-size:12px;
			font-family:'Malgun Gothic', arial, dotum, gulim;
	     }
		
		.container{
			position: relative;
			min-height: 1px;
			padding-left: 0;
			padding-right: 0;
			width: 100%;
			height: 95%;			
		}		
		.div-search{
			width: 100%;
			/* margin-left:10px; */
			/* height: 20px;		 */
			display: block;	
			font-size: 12px;
			overflow: hidden;
		}
		
		/* multi-select 관련  */
		.ui-multiselect-checkboxes li label{
			font-size: 13px;
			line-height: 1.3em;
		}		
		.ui-multiselect-checkboxes li label input[type="checkbox"] {margin:0; padding:0; vertical-align:middle;}
		ui-multiselect-menu a:link, a:visited, a:active {
			font-family:'Malgun Gothic', arial, gulim, dotum;
			/* color: #000; */
			text-decoration:none;
		}
		
		td,th{
			font-size:12px;
		}
		
		#container svg text{
			overflow: visible;
		}
	</style>
</head>
<body>
<form name="form" id="form">
<input type="hidden" id="sender" name="sender" value="${param.sender}"/>
<input type="hidden" name="cookieName" value="${param.cookieName}"/>
<input type="hidden" name="cookieToken" value="${param.cookieToken}"/>
<input type="hidden" id="userId" name="userId" value="${param.userId}"/>
<input type="hidden" id="pjt_code" name="pjt_code" value=""/> 
<input type="hidden" id="pjt_name" name="pjt_name" value=""/>
<input type="hidden" id ="phaseBase" name ="phaseBase" value="phase"/>
<div id="application" class="div-search">
	<div style="display:inline-block;text-overflow:show;float:left;">
		<select name="pjtStatus" id="pjtStatus" multiple="multiple" style="width:150px" > </select>
		<input type="hidden" name="pjtCodeList" value ="xxx"/>
		<select name="pjtCodeList" id="pjtCodeList" multiple="multiple" style="" > </select>
	</div>
</div>

<div  id="container" class="container"></div>
</form>
<iframe id="devFrame" name="devFrame" width="0" height="0"></iframe>
</body>
</html>
