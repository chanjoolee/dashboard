<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="" >

    
    
    <select id="test.dashboard.series" resultType="hashmap">
	    select distinct pjt_code,pjt_name  from CODESONAR_SUMMARY	    
	    where is_valid = 'T'
	    and pjt_code = 'MercuryPlus'
    </select>
    
    <select id="test.dashboard.series.data"  parameterType="hashmap"  resultType="hashmap">
	    SELECT
	    	P0_CNT,
	    	PJT_CODE,
	    	ANALYSYS_DATE
	    from CODESONAR_SUMMARY
	    where 1=1 
	    and is_valid = 'T'
	    AND pjt_code = #{PJT_CODE}
	    ORDER BY pjt_code,PHASE,PHASE_SEQ
    </select>
    
    
    <select id="test.dashboard.project" resultType="hashmap">
	    select 
    		pjt_code
    		, sum(cnt) cnt
    	from (
	    	select
				nvl(m.pjt_name,a.pjt_code) pjt_code		
				, a.cnt
			from		
			(SELECT
		        PJT_CODE
		        ,PJT_NAME
		        ,count(*) cnt 
		    FROM
		        CODESONAR_SUMMARY
		    where is_valid = 'T'
		    group by pjt_code, pjt_name	    
		    ) a 
		    left outer join PJT_MAPPING m on m.legacy_pjt_name = A.pjt_code and LEGACY_NAME= 'CodeSonar' 
		) group by pjt_code
		order by 2 desc
    </select>
    
    
    
    <select id="test.dashboard.project.list.jira" resultType="hashmap">
	    select
			distinct nvl(m.pjt_name,a.pjt_code) pjt_code
		from		
		(select 
	    	distinct 
	    	project pjt_code ,
	    	project pjt_name ,
	    	0 cnt  
	    from JIRA_ISSUE
		) a
		left outer join PJT_MAPPING m on m.legacy_pjt_name = A.pjt_code and LEGACY_NAME= 'JIRA'
		order by 1
    </select>
    
    <select id="test.dashboard.project.list.jira.backup" resultType="hashmap">
	    select 
	    	distinct 
	    	project pjt_code ,
	    	project pjt_name ,
	    	0 cnt  
	    from JIRA_ISSUE
		order by 1
    </select>
    
    <select id="test.dashboard.project.pcount" parameterType="hashmap"  resultType="hashmap">
	    with mapping as (
    		select
				a.pjt_code legacy_pjt_name,
				nvl(m.pjt_name,a.pjt_code) as pjt_name
			from		
			(SELECT
		        PJT_CODE
		        ,PJT_NAME
		        ,count(*) cnt 
		    FROM
		        CODESONAR_SUMMARY
		    where is_valid = 'T'
		    group by pjt_code, pjt_name	    
		    ) a 
		    left outer join PJT_MAPPING m on m.legacy_pjt_name = A.pjt_code and LEGACY_NAME= 'CodeSonar' 
    	)
    	
	    select 
				pjt_code,
				to_char(to_date(ANALYSYS_DATE,'YYYY/MM/DD'),'YYYY-MM-DD') ANALYSYS_DATE,
				phase1 phase,
				ROW_NUMBER()  over( PARTITION BY pjt_code,phase1 order by ANALYSYS_DATE) as phase_seq , 
				P0_CNT P0,
				P1_CNT P1,
				P2_CNT P2,
				LOC
			from 
			(select
				m.pjt_name pjt_code, 
				s.ANALYSYS_DATE,
				(select max(phase) from PMS_INFO 
					where pjt_code = m.PJT_NAME 
					and  s.ANALYSYS_DATE between ACTUAL_START_DATE  and nvl(ACTUAL_END_DATE,to_char(sysdate,'YYYY/MM/DD'))
				) as phase1,
				P0_CNT,
				P1_CNT,
				P2_CNT,
				LOC
			from CODESONAR_SUMMARY s
			join mapping m on m.legacy_pjt_name = S.pjt_code
			where is_valid = 'T'
			and m.pjt_name = #{PJT_CODE}
			) a
		where 1=1
		--and a.phase1 is not null
		order by pjt_code, ANALYSYS_DATE
		
    </select>
    
    <select id="test.dashboard.project.multi.raw" parameterType="hashmap"  resultType="hashmap">
	    with mapping as (
    		select
				a.pjt_code legacy_pjt_name,
				nvl(m.pjt_name,a.pjt_code) as pjt_name
			from		
			(SELECT
		        PJT_CODE
		        ,PJT_NAME
		        ,count(*) cnt 
		    FROM
		        CODESONAR_SUMMARY
		    where is_valid = 'T'
		    group by pjt_code, pjt_name	    
		    ) a 
		    left outer join PJT_MAPPING m on m.legacy_pjt_name = A.pjt_code and LEGACY_NAME= 'CodeSonar' 
    	)
    	
	    select 
			pjt_code,
			ANALYSYS_DATE,
			phase1 phase,
			ROW_NUMBER()  over( PARTITION BY pjt_code,phase1 order by ANALYSYS_DATE) as phase_seq ,    -- dense_rank()
			P0_CNT,
			P1_CNT,
			P2_CNT,
			LOC
		from 
		(select
			m.pjt_name pjt_code, 
			ANALYSYS_DATE,
			(select max(phase) from PMS_INFO 
				where pjt_code = m.PJT_NAME 
				and  s.ANALYSYS_DATE between ACTUAL_START_DATE and nvl(ACTUAL_END_DATE,to_char(sysdate,'YYYY/MM/DD'))
			) as phase1,
			P0_CNT,
			P1_CNT,
			P2_CNT,
			LOC
		from CODESONAR_SUMMARY s
		join mapping m on m.legacy_pjt_name = S.pjt_code
		where is_valid = 'T'
		) a
		where 1=1
		and a.phase1 is not null
		order by pjt_code, ANALYSYS_DATE
		
    </select>
    
    <select id="test.dashboard.project.multi.count" parameterType="hashmap"  resultType="hashmap">
	    	with mapping as (
                select
                    a.pjt_code legacy_pjt_name,
                    nvl(m.pjt_name,a.pjt_code) as pjt_name
                from        
                (SELECT
                    PJT_CODE
                    ,PJT_NAME
                    ,count(*) cnt 
                FROM
                    CODESONAR_SUMMARY
                where is_valid = 'T'
                group by pjt_code, pjt_name        
                ) a 
                left outer join PJT_MAPPING m on m.legacy_pjt_name = A.pjt_code and LEGACY_NAME= 'CodeSonar' 
            )
            select 
                pjt_code,phase,count(*) cnt
            from 
            (
                select 
                    pjt_code,
                    ANALYSYS_DATE,
                    phase1 phase,
                    ROW_NUMBER()  over( PARTITION BY pjt_code,phase1 order by ANALYSYS_DATE) as phase_seq ,    -- dense_rank()
                    P0_CNT,
                    P1_CNT,
                    P2_CNT,
                    LOC
                from 
                (select
                    m.pjt_name pjt_code, 
                    ANALYSYS_DATE,
                    (select max(phase) from PMS_INFO where m.pjt_name = pjt_code and  s.ANALYSYS_DATE between ACTUAL_START_DATE and nvl(ACTUAL_END_DATE,to_char(sysdate,'YYYY/MM/DD'))) as phase1,
                    P0_CNT,
                    P1_CNT,
                    P2_CNT,
                    LOC
                from CODESONAR_SUMMARY s
                join mapping m on m.legacy_pjt_name = S.PJT_CODE 
                where is_valid = 'T'
                ) a
                where 1=1
                and a.phase1 is not null
            )
            group by pjt_code, phase
            ORDER BY pjt_code ,phase
	        
    </select>
    
    <select id="test.dashboard.project.multi.phase" parameterType="hashmap"  resultType="hashmap">
	    select 
            a.phase, 
            to_char(ADD_MONTHS(a.start_dt,rownum-1),'YYYY-MM-DD')  phase_dt ,
            nvl(b.p0,0) p0,
            nvl(b.p1,0) p1,
            nvl(b.p2,0) p2,
            nvl(b.pa0,0) pa0,
            nvl(b.pa1,0) pa1,
            nvl(b.pa2,0) pa2
        from (
            SELECT
                DISTINCT PHASE, to_date(to_char(sysdate,'YYYY') || '01-01','YYYY-MM-DD') start_dt
            FROM
                PMS_INFO
            --order by phase
        )  A  left outer join CODESONAR_PHASE_TARGET b
            on a.phase = b.phase
        order by a.phase
		
	        
    </select>
    
    <select id="test.dashboard.project.phase" parameterType="hashmap"  resultType="hashmap">
	    select 
			pi.PJT_CODE, pi.PJT_NAME, pi.PHASE, pi.PLAN_START_DATE, pi.PLAN_END_DATE, pi.ACTUAL_START_DATE
			, nvl(pi.ACTUAL_END_DATE, to_char(sysdate,'YYYY/MM/DD')) ACTUAL_END_DATE
			, nvl(tar.P0,0) p0
			, nvl(tar.P1,0) p1
			, nvl(tar.P2,0) p2
			, nvl(tar.PA0,0) pa0
			, nvl(tar.PA1,0) pa1
			, nvl(tar.PA2,0) pa2
		from PMS_INFO pi
		left outer join CODESONAR_PHASE_TARGET tar
			on tar.phase = pi.phase
		where pjt_code = #{PJT_CODE}
		and pi.ACTUAL_START_DATE is not null
		
		order by pi.phase
	        
    </select>
    
    
    <select id="test.dashboard.summary.list" parameterType="hashmap"  resultType="hashmap">
	    select
	    	pjt_code,current_phase, Quality, Delivery, Comments
	    from summary_dashboard
	    	        
    </select>
    
    <select id="test.dashboard.codereview.list" parameterType="hashmap"  resultType="hashmap">
	    select
	    	pjt_code, current_phase, submit, review, Comments
	    from code_review
	    	        
    </select>
    
    <select id="test.dashboard.defectsTrends.list" parameterType="hashmap"  resultType="hashmap">
	    with projectList as (
	    	select * from (
		    	SELECT
	                DISTINCT NVL(m.pjt_name, a.project) pjt_code, a.project
	            FROM
	                (
	                    SELECT
	                            DISTINCT project                           
	                        FROM
	                            JIRA_ISSUE
	                ) a
	                    LEFT OUTER JOIN PJT_MAPPING m
	                        ON m.legacy_pjt_name = A.project		
	                        and LEGACY_NAME= 'JIRA'
	         ) a
             where a.pjt_code = #{PJT_CODE}   
	    ) ,
	    dt as(
	        select
            max(project) as project,
            min(dt) start_dt,
            max(dt) end_dt
        from (     
             SELECT MAX (pjt_code) AS project,
                   TO_CHAR (MIN(created), 'YYYY-MM-DD') dt
              FROM JIRA_ISSUE jira 
             JOIN projectList list ON list.project = jira.project
             WHERE list.pjt_code = #{PJT_CODE} 
             <if test="priority != null">
                 and PRIORITY in 
                 <foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
                     #{item}
                 </foreach>
                 
             </if>
             <if test="issuetype != null">
                 and ISSUETYPE in 
                 <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
                     #{item}
                 </foreach>
                 
             </if>
             union all
             SELECT MAX (pjt_code) AS project,
                   TO_CHAR (max(created), 'YYYY-MM-DD') dt
              FROM JIRA_ISSUE jira 
             JOIN projectList list ON list.project = jira.project
             WHERE list.pjt_code = #{PJT_CODE} 
             <if test="priority != null">
                 and PRIORITY in 
                 <foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
                     #{item}
                 </foreach>
                 
             </if>
             <if test="issuetype != null">
                 and ISSUETYPE in 
                 <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
                     #{item}
                 </foreach>
                 
             </if>
             union all
             SELECT MAX (pjt_code) AS project,
                   TO_CHAR (min(RESOLUTIONDATE), 'YYYY-MM-DD') dt
              FROM JIRA_ISSUE jira 
             JOIN projectList list ON list.project = jira.project
             WHERE list.pjt_code = #{PJT_CODE} 
             <if test="priority != null">
                 and PRIORITY in 
                 <foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
                     #{item}
                 </foreach>
                 
             </if>
             <if test="issuetype != null">
                 and ISSUETYPE in 
                 <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
                     #{item}
                 </foreach>
                 
             </if>
             union all
             SELECT MAX (pjt_code) AS project,
                   TO_CHAR (MAX(RESOLUTIONDATE), 'YYYY-MM-DD') dt
              FROM JIRA_ISSUE jira 
             JOIN projectList list ON list.project = jira.project
             WHERE list.pjt_code =#{PJT_CODE}
	        <if test="priority != null">
                 and PRIORITY in 
                 <foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
                     #{item}
                 </foreach>
                 
             </if>
             <if test="issuetype != null">
                 and ISSUETYPE in 
                 <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
                     #{item}
                 </foreach>
                 
             </if>
             )
	    )	                
	    select
	     a.project pjt_code
	     , to_char(a.pre_dt,'YYYY/MM/DD') pre_dt 
	     , to_char(a.dt, 'YYYY/MM/DD' )   defects_date
	     , (select count(*) 
	            from JIRA_ISSUE b 
	            join projectList list on list.project = b.project
	            where a.project= list.pjt_code 
	            and b.created is not null
	            <![CDATA[
	            and b.created >= (a.pre_dt+1)
	            and b.created < (a.dt + 1)
	            ]]>
	            <if test="priority != null">
	                 and b.PRIORITY in 
	                 <foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
	                     #{item}
	                 </foreach>
	                 
	             </if>
	             <if test="issuetype != null">
	                 and b.ISSUETYPE in 
	                 <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
	                     #{item}
	                 </foreach>
	                 
	             </if>
	        ) created
	     , (select count(*) 
	            from JIRA_ISSUE b 
	            join projectList list on list.project = b.project
	            where a.project= list.pjt_code 
	            and b.RESOLUTIONDATE is not null
	            <![CDATA[
	            and b.RESOLUTIONDATE >= (a.pre_dt+1)
	            and b.RESOLUTIONDATE < (a.dt + 1)
	            ]]>
	            <if test="priority != null">
	                 and b.PRIORITY in 
	                 <foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
	                     #{item}
	                 </foreach>
	                 
	             </if>
	             <if test="issuetype != null">
	                 and b.ISSUETYPE in 
	                 <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
	                     #{item}
	                 </foreach>
	                 
	             </if>
	        ) resolved
	    from 
	    (
	        select
	            (select project from dt) project 
	            , a.dt
	            , nvl(lag(a.dt) over (order by a.levelno),a.dt-1) pre_dt
	        from 
	        (
	            select * from (
	                select to_date( (select start_dt from dt)  , 'YYYY-MM-DD') + rownum -1 dt , level as levelno
	                from dual
	                <![CDATA[
	                connect by level <= to_date( (select end_dt from dt) , 'YYYY-MM-DD') - to_date( (select start_dt from dt)  , 'YYYY-MM-DD') +1
	                ]]>
	            ) where mod(levelno,7) = 0 or levelno=1 or dt = to_date( (select end_dt from dt) , 'YYYY-MM-DD')
	        ) a
	    ) a   	    
	    	        
    </select>
    
    
    <select id="test.dashboard.defectsTrends.list.backup1" parameterType="hashmap"  resultType="hashmap">
	    select 
            project pjt_code,
            defects_date,
            created,
            (select count(*) 
                from JIRA_ISSUE b 
                where a.project= b.project 
                and b.RESOLUTIONDATE is not null
                <![CDATA[
                and b.RESOLUTIONDATE >= to_date(pre_date,'YYYY/MM/DD') +1
                and b.RESOLUTIONDATE  < to_date(a.defects_date,'YYYY/MM/DD') + 1
                ]]>
                <if test="priority != null">
                     and b.PRIORITY in 
                     <foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
                         #{item}
                     </foreach>
                     
                 </if>
                 <if test="issuetype != null">
                     and b.ISSUETYPE in 
                     <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
                         #{item}
                     </foreach>
                     
                 </if>
            ) resolved
        from (
            select 
                a.project project,
                a.created defects_date ,
                count(decode(a.gubun,'real',1,null)) created,
                lag(created) over(order by a.project,a.created) pre_date            
             from 
             (
                 select 
                     project,
                     to_char(created,'YYYY/MM/DD') created,
                     'real' gubun
                 from JIRA_ISSUE
                 where project =  #{PJT_CODE}
                 <if test="priority != null">
                     and PRIORITY in 
                     <foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
                         #{item}
                     </foreach>
                     
                 </if>
                 <if test="issuetype != null">
                     and ISSUETYPE in 
                     <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
                         #{item}
                     </foreach>
                     
                 </if>
                 union all
                 select 
                    '${PJT_CODE}' project,
                    (
                    	select max(to_char(resolutiondate,'YYYY/MM/DD')) from JIRA_ISSUE 
                    	where project = #{PJT_CODE}
                    	<if test="priority != null">
		                    and PRIORITY in 
		                	<foreach collection="priority" item="item" index="index"  open="(" separator="," close=")">
		                         #{item}
		                    </foreach>
		                </if>
		                <if test="issuetype != null">
		                    and ISSUETYPE in 
		                    <foreach collection="issuetype" item="item" index="index" open="(" separator="," close=")">
		                        #{item}
		                    </foreach>		                     
		                </if>
                    
                    ) created ,
                    'virtual' gubun                   
                 from dual                 
             ) a
            group by a.project,a.created
            order by defects_date 
        ) a 
	    	        
    </select>
    
    <select id="test.dashboard.defectsTrends.list.backup" parameterType="hashmap"  resultType="hashmap">
	    select 
			project pjt_code,
			created defects_date ,
			count(*) created,
			count(decode(resolved,null,null,1)) resolved
		 from 
		 (
		 	select 
		 	project,
		 	to_char(created,'YYYY/MM/DD') created ,
		 	to_char(resolutiondate,'YYYY/MM/DD') resolved
		 	from JIRA_ISSUE
		 	where project = #{PJT_CODE}			 		
		 	<if test="priority != null">
		 		and PRIORITY in 
		 		<foreach collection="priority" item="a" index="index"  open="(" separator="," close=")">
		 			#{a}
		 		</foreach>
		 		
		 	</if>
		 	<if test="issuetype != null">
		 		and ISSUETYPE in 
		 		<foreach collection="issuetype" item="a" index="index" open="(" separator="," close=")">
		 			#{a}
		 		</foreach>
		 		
		 	</if>
		 )
		group by project,created
		order by defects_date 
	    	        
    </select>
    
    <select id="test.dashboard.defectsTrends.list.old" parameterType="hashmap"  resultType="hashmap">
	    select
	    	pjt_code, defects_date, created, resolved
	    from defects_trends
	    where pjt_code = #{PJT_CODE}
	    	        
    </select>
    <select id="test.dashboard.defectsTrends.issuetype" parameterType="hashmap"  resultType="hashmap">
    	with projectList as (
	    	select * from (
		    	SELECT
	                DISTINCT NVL(m.pjt_name, a.project) pjt_code, a.project
	            FROM
	                (
	                    SELECT
	                            DISTINCT project                           
	                        FROM
	                            JIRA_ISSUE
	                ) a
	                    LEFT OUTER JOIN PJT_MAPPING m
	                        ON m.legacy_pjt_name = A.project
	                        and LEGACY_NAME= 'JIRA'		
	         ) a
             where a.pjt_code = #{PJT_CODE}   
	    )
	    
		SELECT
	        ISSUETYPE , COUNT(*) CNT
	    FROM
	        JIRA_ISSUE jira     
	        join projectList list on list.project = jira.project        
	    GROUP BY ISSUETYPE
	    ORDER BY ISSUETYPE
	    	        
    </select>
    <select id="test.dashboard.defectsTrends.priority" parameterType="hashmap"  resultType="hashmap">
    	with projectList as (
	    	select * from (
		    	SELECT
	                DISTINCT NVL(m.pjt_name, a.project) pjt_code, a.project
	            FROM
	                (
	                    SELECT
	                            DISTINCT project                           
	                        FROM
	                            JIRA_ISSUE
	                ) a
	                    LEFT OUTER JOIN PJT_MAPPING m
	                        ON m.legacy_pjt_name = A.project
	                        and LEGACY_NAME= 'JIRA'		
	         ) a
             where a.pjt_code = #{PJT_CODE}   
	    ) 
	    
	    SELECT
	        PRIORITY , COUNT(*) CNT
	    FROM
	        JIRA_ISSUE jira     
	        join projectList list on list.project = jira.project        
	    GROUP BY PRIORITY
	    ORDER BY PRIORITY
	    	        
    </select>
    
    <select id="test.dashboard.defectsUnresolved" parameterType="hashmap"  resultType="hashmap">
    	with projectList as (
            select * from (
                SELECT
                    DISTINCT NVL(m.pjt_name, a.project) pjt_code, a.project
                FROM
                    (
                        SELECT
                                DISTINCT project                           
                            FROM
                                JIRA_ISSUE
                    ) a
                        LEFT OUTER JOIN PJT_MAPPING m
                            ON m.legacy_pjt_name = A.project
                            and LEGACY_NAME= 'JIRA'        
             ) a
             where a.pjt_code = #{PJT_CODE} 
        ) 
        SELECT
            list.pjt_code , 
            jira.PRIORITY , 
            sum(decode(jira.resolutiondate,null,1,0)) unresolved
        FROM
            JIRA_ISSUE jira     
            join projectList list on list.project = jira.project           
        GROUP BY list.pjt_code,PRIORITY
        ORDER BY PRIORITY
	    	        
    </select>
    
    <select id="test.dashboard.defectsUnresolved.pie" parameterType="hashmap"  resultType="hashmap">
    	with projectList as (
            select * from (
                SELECT
                    DISTINCT NVL(m.pjt_name, a.project) pjt_code, a.project
                FROM
                    (
                        SELECT
                                DISTINCT project                           
                            FROM
                                JIRA_ISSUE
                    ) a
                        LEFT OUTER JOIN PJT_MAPPING m
                            ON m.legacy_pjt_name = A.project
                            and LEGACY_NAME= 'JIRA'        
             ) a
             where a.pjt_code = #{PJT_CODE} 
        ) 
        SELECT
            list.pjt_code , 
            /*jira.PRIORITY , */ 
            issueType,
            sum(decode(jira.resolutiondate,null,1,0)) unresolved
        FROM
            JIRA_ISSUE jira     
            join projectList list on list.project = jira.project        
        where priority like '%' || #{PRIORITY} || '%'   
        GROUP BY 
        	list.pjt_code,
        	/*PRIORITY,*/
        	issueType
        ORDER BY issueType
	    	        
    </select>
    
</mapper>