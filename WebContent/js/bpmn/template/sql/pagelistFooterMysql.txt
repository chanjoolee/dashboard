	) A where 1=1 
			<choose>
				<when test="filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )">
					and (
					<if test="filters.rules.size() > 0" >
			       		<foreach collection="filters.rules" item="item" index="index"  open="(" separator="" close=")">
			           		<if test="index > 0 "> ${filters.groupOp} </if>
							<choose>
								<when test="item.data.equalsIgnoreCase('isnull')">${item.field} is null</when>
				    			<when test="item.op =='eq' ">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>
				           		<when test="item.op =='ne' ">${item.field} <![CDATA[ != ]]> #{item.data}</when>
				           		<when test="item.op =='lt' ">${item.field} <![CDATA[ < ]]> #{item.data}</when>
				           		<when test="item.op =='le' ">${item.field} <![CDATA[ <= ]]> #{item.data}</when>
				           		<when test="item.op =='gt' ">${item.field} <![CDATA[ > ]]> #{item.data}</when>
				           		<when test="item.op =='ge' ">${item.field} <![CDATA[ >= ]]> #{item.data}</when>
				           		<when test="item.op =='bw' ">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>
				           		<when test="item.op =='bn' "> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>
				           		<when test="item.op =='in' "></when>
				           		<when test="item.op =='ni' "></when>
				           		<when test="item.op =='ew' "> REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>
				           		<when test="item.op =='en' "> NOT REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>
				           		<when test="item.op =='cn' ">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>
				           		<when test="item.op =='nc' ">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>
				           		</choose>
			       		</foreach>	
			       	</if>	
			       	<if test="filters.groups != null and filters.groups.size() > 0">
		       			<foreach collection="filters.groups" item="group" index="group_index"  open=""  close="">
			       			<if test="group.rules.size() > 0">
			       			${filters.groupOp}
				           	<foreach collection="group.rules" item="rule" index="rule_index"  open="("   separator="" close=")">
					        	<if test="rule_index > 0 "> ${group.groupOp} </if>
	           		 			<choose>
									<when test="rule.data.equalsIgnoreCase('isnull')">${rule.field} is null</when>	
					           		<when test="rule.op =='eq' ">REGEXP_LIKE(${rule.field}, '^' || #{rule.data}|| '$','i')</when>
					           		<when test="rule.op =='ne' ">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>
					           		<when test="rule.op =='lt' ">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>
					           		<when test="rule.op =='le' ">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>
					           		<when test="rule.op =='gt' ">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>
					           		<when test="rule.op =='ge' ">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>
					           		<when test="rule.op =='bw' ">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>
					           		<when test="rule.op =='bn' "> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>
					           		<when test="rule.op =='in' "></when>
					           		<when test="rule.op =='ni' "></when>
					           		<when test="rule.op =='ew' "> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>
					           		<when test="rule.op =='en' "> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>
					           		<when test="rule.op =='cn' ">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>
					           		<when test="rule.op =='nc' ">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>
					           		</choose> 
					       	</foreach>
					       	</if>
				       	</foreach>
		       		</if> 
		       		 )
		   		</when>
	   		</choose>
		) A
		LIMIT #{int_limit} OFFSET #{int_offset}
		