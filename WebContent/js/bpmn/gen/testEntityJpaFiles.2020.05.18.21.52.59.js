		var testEntityJpaFiles = [
			{
				"fileType": "jsp",
				"editType": "general",
				"fileName": "cmmCd",
				"entityId": "cmm_cd",
				"foreignEntities": [],
				"childEntities": [],
				"schema": {
					"search": {
						"name": "v_schema_search",
						"containerId": "v_schema_searchContainer",
						"schema": {
							"type": "Vertical",
							"id": "searchConditionHorizontalLayout",
							"name": "searchConditionHorizontalLayout",
							"label": "",
							"controlCss": [
								{
									"code": "min-height",
									"value": "30px"
								}
							],
							"elements": [
								{
									"label": "",
									"type": "HorizontalLayout",
									"cls": "",
									"containerCss": [],
									"elements": [
										{
											"containerCss": [],
											"label": "",
											"id": "searchVervical",
											"type": "Vertical",
											"elements": [
												{
													"label": "",
													"type": "HorizontalLayout",
													"id": "searchHorizontalLayout",
													"name": "searchHorizontalLayout",
													"containerCss": [
														{
															"code": "min-height",
															"value": "25px"
														}
													],
													"elements": []
												}
											]
										},
										{
											"label": "",
											"type": "HorizontalLayout",
											"cls": "btn_txt",
											"containerCss": [
												{
													"code": "margin-left",
													"value": "10px"
												},
												{
													"code": "float",
													"value": "right"
												}
											],
											"elements": [
												{
													"type": "ButtonBootstrap",
													"id": "btnSearch",
													"name": "btnSearch",
													"label": "SEARCH",
													"containerCss": [
														{
															"code": "margin-right",
															"value": "3px"
														}
													],
													"events": {
														"click": function(){
														                                                fn_search();
														                                            }

													}
												}
											]
										}
									]
								}
							]
						}
					},
					"contents": {
						"name": "v_schema_content",
						"containerId": "v_schema_contentContainer",
						"schema": {
							"type": "Vertical",
							"id": "contentVertical",
							"name": "contentVertical",
							"label": "",
							"elements": [
								{
									"type": "grid",
									"id": "cmmCdGrid",
									"name": "cmmCdGrid",
									"label": "",
									"text": "Cmm_cd",
									"sqlId": "cmmCd.cmmCd",
									"entityId": "cmm_cd",
									"containerCss": [
										{
											"code": "width",
											"value": "100%"
										},
										{
											"code": "margin-top",
											"value": "10px"
										},
										{
											"code": "background-color",
											"value": "#FFF"
										}
									],
									"gridOpt": {
										"datatype": "json",
										"pager": "#cmmCdGridPager",
										"sqlId": "cmmCd.cmmCd",
										"gridId": "cmmCdGrid",
										"modelVarName": "testEntityJpa",
										"url": function(){ 
										                    return	"./genericlListPageJson.do?" + 
										                        $("#form").serialize() + 
										                        "&sqlid=cmmCd.cmmCd.page.list" +  
										                        "&paging_sqlid=cmmCd.cmmCd.page.total" 
										                },

										"editurl": "./ssdCusDummySaveJson.do",
										"styleUI": "Bootstrap",
										"viewrecords": true,
										"width": "100%",
										"autowidth": true,
										"height": 650,
										"multiselect": false,
										"multiboxonly": true,
										"multiSort": true,
										"rowNum": 20,
										"rowList": [
											5,
											10,
											15,
											20,
											30
										],
										"emptyrecords": "No records to view",
										"gridComplete": function () {
										                    var grid = $(this).jqGrid();
										                    var gridParam = grid.getGridParam();
										                    var show_filter = true;
										                    if ( gridParam.filterToolbarShow != null 
										                        && gridParam.filterToolbarShow == false )
										                        show_filter = false; 
										                    if (show_filter){
										                        grid.jqGrid('filterToolbar',
										                        {
										                            defaultSearch:'cn'
										                            // JSON stringify all data from search, including search toolbar operators
										                            ,stringResult: true
										                            // instuct the grid toolbar to show the search options
										                            // ,searchOperators: true
										                        }
										                        );
										                    }
										                    
										                    
										                    grid.navGrid(gridParam.pager ,
										                        // the buttons to appear on the toolbar of the grid
										                        { edit: true, add: true, del: true, search: false,  refresh: true, view: true, position: "left", cloneToTop: false  
										                            ,addfunc: function(){
										                                commonFunc.fn_view_detail.call(this,'add');
										                            }
										                            , editfunc : function(){
										                                commonFunc.fn_view_detail.call(this,'edit');
										                            }, viewfunc : function(){
										                                commonFunc.fn_view_detail.call(this,'view');
										                            }
										
										                        }
										                        // options for the Edit Dialog
										                        ,{  }
										                        // options for the Script Master Add Dialog
										                        
										                        ,{	
										                            addCaption: "Add Script Master",
										                            modal:true,
										                            recreateForm: true,
										                            closeAfterAdd: true,
										                            reloadAfterSubmit: true,
										                            //template: template,
										                            errorTextFormat: function (data) {
										                                return 'Error: ' + data.responseText
										                            },
										                            onInitializeForm : function(formid){
										                                $(formid).attr('method','POST');
										                                $(formid).attr('action','');
										                                $(formid).attr('enctype','multipart/form-data');
										                                $(formid).css("font-size","14px");
										                                
										                            },
										                            afterSubmit: function(response, postdata) 
										                            { 
										                                var grid = $(this).jqGrid();
										                                var gridParam = grid.getGridParam();
										                                var formdata = this.ownerDocument.FormPost;
										                                var fd = new FormData(formdata);  	
										                                var response1 = {};
										                                
										                                $.ajax({
										                                    url: "./genericSaveJson.do?sqlid=" + gridParam.sqlId + ".insert",
										                                    type: "POST",
										                                    data: fd, 
										                                    async: false,
										                                    cache: false,
										                                    contentType: false,
										                                    processData: false,
										                                    success:  function(data){
										                                        response1 = data;
										                                        if(response1.result == 'success'){
										                                            // Cumtomise...
										                                        }
										                                        
										                                    }
										                                });
										                                
										                                //return [success,message,new_id] ;
										                                if(response1.result == 'success'){
										                                    //$(this).trigger('reloadGrid'); 
										                                    return [true, response1.result, ''];
										                                }
										                                else
										                                    return [false, response1.result + ":<br/>" + response1.message , ''];
										                                    
										                            }                         
										                        }
										                        // options for the Script Master Del Dialog 
										                        ,{  
										                            reloadAfterSubmit: true,
										                            afterSubmit: function(response, postdata) { 
										                                //$("#refresh_grid_script").hide();
										                                var grid = $(this);
										                                var paramObj = {
										                                    delRows : []
										                                };
										                                $.each(postdata.id.split(","),function(i,rowid){
										                                    var row = grid.getRowData(rowid);
										                                    paramObj.delRows.push(row);
										                                });
										                                
										                                //  
										                                paramObj.loop_id = "delRows";
										                                $.ajax({
										                                    url: "./genericSaveJson.do",
										                                    type: "POST",
										                                    data: {
										                                        searchJson: JSON.stringify(paramObj),
										                                        sqlid: "cmmCd.cmmCd.delete"
										                                    }  , 
										                                    async: false,
										                                    success:  function(data){
										                                        response1 = data;
										                                        if(response1.result == 'success'){
										                                        
										                                            msg = "Del Success!";
										                                            $("#dialog-confirm").html(msg);
										                                            $("#dialog-confirm").dialog({
										                                                resizable: false,
										                                                modal: true,
										                                                title: "Success",
										                                                //height: 200,
										                                                width: 200,
										                                                dialogClass: 'no-close',
										                                                closeOnEscape: false,
										                                                buttons: [
										                                                    {
										                                                        text: "OK",
										                                                        click: function() {
										                                                            $( this ).dialog( "close" );		
										                                                            // fn_search_script();
										                                                        }
										                                                    }
										                                                ]
										                                            });
										                                        }
										                                        
										                                    }
										                                });
										                                
										                                //return [success,message,new_id] ;
										                                if(response1.result == 'success'){
										                                    //$(this).trigger('reloadGrid'); 
										                                    return [true, response1.result, ''];
										                                }
										                                else
										                                    return [false, response1.result + ":<br/>" + response1.message , ''];
										                                    
										                            }
										                        }
										                        ,{ 
										                            multipleSearch: true,
										                            multipleGroup: true
										                        }
										                        
										                    );
										                    if ($(gridParam.pager).find(".ui-pg-button[title=Copy]").length == 0 && true) {
										                        grid.navButtonAdd(gridParam.pager, {
										                            caption : "", 
										                            title: "Copy",
										                            buttonicon : "glyphicon-copy",
										                            onClickButton: function(){ 
										                                var theGrid = $(this).jqGrid();
										                                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');
										                                if ( parentRowKey == null )   {
										                                    $("#dialog-confirm").html("Please, select row");
										                                    $("#dialog-confirm").dialog({
										                                        resizable: false,
										                                        modal: true,
										                                        title: "Error",
										                                        //height: 200,
										                                        width: 300,
										                                        dialogClass: 'no-close',
										                                        closeOnEscape: false,
										                                        buttons: [
										                                            {
										                                                text: "OK",
										                                                click: function() {
										                                                    $( this ).dialog( "close" );											                    			                  
										                                                }
										                                            }
										                                        ]
										                                    });
										                                    return;
										                                }
										                                commonFunc.fn_view_detail.call(this,'copy');
										                                // alert("Deleting Row");
										                            }, 
										                            position:"last"
										                        });
										                        var td_cp = $(gridParam.pager).find(".ui-pg-table .ui-pg-button[title='Copy']")
										                        var td_add = $(gridParam.pager).find(".ui-pg-table .ui-pg-button[title='Add new row']");
										                        td_add.after(td_cp);
										
										
										                    }
										                },

										"onCellSelect": function (rowId, iCol, content, event) {
										
										                    var grid = $(this).jqGrid();
										                    var row = grid.jqGrid('getRowData',rowId);
										                    var cms = grid.jqGrid("getGridParam", "colModel");
										                    var cm = cms[iCol];
										
										                    var oFrm = document.getElementById("form1");
										
										                    var v_property = _.find(gridProperties, { _name : cm.name.toLowerCase() });
										                    
										                    //customize
										                    var somCondition = ( v_property != null && 
										                        v_property._documentation != null &&
										                        v_property._documentation.file_info != null );
										
										                    if ( somCondition ){
										                        var path_column = v_property._documentation.file_info.path_column ;
										                        var path = '.'+ row[path_column] ;
										                        if((/\\.(txt|config|pdf|jpg|jpeg|gif|png|log)$/i).test(path)){
										                            var newWin1 = window.open("", "filedownload", "width=1200,height=900, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes");
										                            
										                            oFrm.action =  path;
										                            oFrm.method = "post";
										                            oFrm.target = 'filedownload'; 
										                            oFrm.submit();		
										                            newWin1.focus();
										                        }else if(row[cm.name].match(/\\.([\undefined]+)$/i) != null){
										                            //var src = "/dashboard/filedownloadJson.do";
										                            //src += "?filename=" + row.FILE_NAME;
										                            //src +="&path=" + row.FILE_PATH;
										                            //document.getElementById('file_iframe').src =  src;
										                            
										                            var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6
										                            if (isIE){
										                                //var fileData = ['\undefinedfeff' + "." + row.FILE_PATH];
										                                //var blobObject = new Blob(fileData);
										                                //window.navigator.msSaveOrOpenBlob(blobObject, row.FILE_NAME);
										                                var link = document.createElement('a');
										                                // customize for same path and name ==> formalize 
										                                var value_split = row[cm.name].split("/");
										                                var return_text = value_split.pop();
										                                // link.download = row[cm.name];
										                                link.download = return_text;
										                                link.href = "." + row[path_column] ;
										                                //Firefox requires the link to be in the body
										                                document.body.appendChild(link);
										                                link.click();
										                                link.target = '_blank';
										                                document.body.removeChild(link);
										
										                            }else{
										                                var link = document.createElement('a');
										                                // customize for same path and name ==> formalize 
										                                var value_split = row[cm.name].split("/");
										                                var return_text = value_split.pop();
										                                // link.download = row[cm.name];
										                                link.download = return_text;
										                                link.href = "." + row[path_column] ;
										                                //Firefox requires the link to be in the body
										                                document.body.appendChild(link);
										                                link.click();
										                                document.body.removeChild(link);
										                            }
										                                                                    
										                        }
										                    }
										                },

										"subGrid": false,
										"subgridtype": "json",
										"entityId": "cmm_cd",
										"subGridRowExpanded": function(parentRowID, parentRowKey){
										                        var theGrid = $(this).jqGrid();
										                        var row = theGrid.jqGrid('getRowData',parentRowKey);
										                        var cms = theGrid.jqGrid("getGridParam", "colModel");
										                        var searchRow = {};
										                        var vGridOpt  = theGrid.getGridParam();
										                        $.each(row,function(k,v){
										                            // searchRow['search_' + _.camelCase(k)] = v;
										                        });
										                        var vKeys = [];
										                        // var models = eval(vGridOpt.modelVarName);
										                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
										                        $.each([].concat(gridProperties), function(i, prop){
										                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
										                            if (vId != null){
										                                vKeys.push(prop._name.toUpperCase());
										                                searchRow['search_' + _.camelCase(prop._name)] = row[prop._name.toUpperCase()];
										                            }
										                        });
										    
										                        // ***  grid ***//
										                        var childDivId = parentRowID + "_div_input";
										                        var childDiv = $(document.createElement("div"));
										                        childDiv.attr("id",childDivId);
										                        // add a table and pager HTML elements to the parent grid row - we will render the child grid here			    			
										                        $('#' + parentRowID).append(childDiv);
										    
										                        var detailList = [];
										                        $.ajax({
										                            type: "POST",
										                            url: "./genericlListJson.do?sqlid=cmmCd.cmmCd.one" ,
										                            data: searchRow ,
										                            //data: $("#form").serialize(), 
										                            async: false,
										                            success:  function(response){
										                                detailList  = response.dataList;                            
										                            }
										                        });
										                        
										                        if (detailList.length == 0 ){
										                            childDiv.text("no data");
										                            return;
										                        }
										    
										                        var schema1 = {
										                            containerId: childDivId,
										                            type:'Vertical',
										                            label: '',
										                            elements: [
										                                {
										                                    label: "",
										                                    type: 'Group',
										                                    elements: [
										                                        {
										                                            type: "inline_edit",
										                                            cols: 1,
										                                            data: function(){ 
										                                                return detailList[0];
										                                            },
										                                            options : {
										                                                keys : vKeys ,
										                                                fn_change: function( input ){
										                                                    //
										                                                    // if(this.props.options.name == 'SCRIPT_NAME'){
										                                                    // 	var convert = this.reactObjects.find(function(td){
										                                                    // 		return td.props.options.name == 'CONVERT_SCRIPT';
										                                                    // 	});	
										                                                    // 	//convert digit
										                                                    // 	//var v_hax = this.state.value;
										                                                    // 	var v_hax = input;
										                                                    // 	var v_digit = [];
										                                                    // 	$.each(v_hax.split(" "), function(i,str){
										                                                    // 		var d = "";
										                                                    // 		if(str.startsWith("0x")){
										                                                    // 			v_digit.push(parseInt(str,16));
										                                                    // 		}else{
										                                                    // 			v_digit.push(str);
										                                                    // 		}
										                                                    // 	});																		
										                                                    // 	convert.setState({value : v_digit.join(" ")});
										                                                        
										                                                    // }
										                                                    
										                                                },
										                                                fn_submit: function(){
										                                                    //alert("submit function defined");
										                                                    var state = true;
										                                                    var paramObj = {
										                                                        //origindatas: this.props.options.keys
										                                                        origindatas: this.state.keys
										                                                    };
										                                                    
										                                                    if(this.props.options.value == this.state.value)
										                                                        return state;
										                                                    $.ajax({
										                                                        url: "./genericSaveJson.do",
										                                                        type: "POST",
										                                                        data: {
										                                                            searchJson: JSON.stringify(paramObj),
										                                                            fieldName: this.state.name,
										                                                            fieldValue: this.state.value,
										                                                            fieldValueOrigin: this.state.value_origin,
										                                                            userId: $("#userId").val(),
										                                                            // sqlid: "dashboard.ssd_sm.script_master.update"
										                                                            sqlid: "cmmCd.cmmCd.edit"
										                                                        }, 
										                                                        async: false,			                    		
										                                                        success:  function(data){
										                                                            response1 = data;
										                                                            if(response1.result != 'success'){
										                                                                state = false;
										                                                                msg = "Save Success!";
										                                                                $("#dialog-confirm").html(response1.message);
										                                                                $("#dialog-confirm").dialog({
										                                                                    resizable: false,
										                                                                    modal: true,
										                                                                    title: "Error",
										                                                                    //height: 200,
										                                                                    width: 300,
										                                                                    dialogClass: 'no-close',
										                                                                    closeOnEscape: false,
										                                                                    buttons: [
										                                                                        {
										                                                                            text: "OK",
										                                                                            click: function() {
										                                                                            $( this ).dialog( "close" );											                    			                  
										                                                                            }
										                                                                        }
										                                                                    ]
										                                                                });
										                                                                
										                                                                
										                                                                
										                                                            }						                    			
										                                                        }
										                                                    });
										                                                    
										                                                    return state;
										                                                },
										                                                fn_afterSubmit: function(keyUpdatedObjects){
										                                                    
										                                                    $.each(this,function(i,react){
										                                                        if(_.find(cms,function(cm){return cm.name == react.state.name})){
										                                                            var vobject = {};
										                                                            vobject[react.state.name] = react.state.value;
										                                                            theGrid.setRowData(parentRowKey,vobject);
										                                                        }
										                                                        
										                                                    });
										                                                    
										                                                },
										                                                progressObject: parent.$("#loader")
										                                            },
										                                            items: _.map([].concat(gridProperties), function(prop){
										                                                var _cms = cms;
										                                                var rtnObj = {
										                                                    label : _.capitalize(_.upperCase(prop._name)),
										                                                    col : prop._name.toUpperCase() 
										                                                };
										                                                let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
										                                                if (vId != null){
										                                                    rtnObj.editable = false;
										                                                }
										    
										                                                // list hiden columns
										                                                if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
										                                                    rtnObj.isDateTime = true;
										                                                }
										                                                var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
										                                                if(vEdit != null){
										                                                    rtnObj.edit_tag = vEdit._value;
										                                                }
										    
										                                                var cm = _.find(_cms , {id: rtnObj.col});
										                                                if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
										    
										                                                    // rtnObj.selectOptions = cm.editoptions.value;
										                                                    var options = [];
										                                                    $.each(cm.editoptions.value, function (k, v) {
										                                                        var opt = {value: k, label: v};
										                                                        options.push(opt);
										                                                    });
										                                                    rtnObj.selectOptions = options;
										                                                    rtnObj.edit_tag = cm.edittype;
										                                                    if (parentFrame.v_filterPop[rtnObj.col] != null ){
										                                                        rtnObj.edit_tag = 'input';
										                                                        rtnObj.editable = false;
										                                                    }
										                                                }
										                                                return rtnObj;
										                                            })
										                                            
										                                        }
										                                        
										                                    
										                                    ]
										                                }
										                                
										                            
										                            ]
										                        };
										                        fn_makeHtml(childDiv,schema1);
										    
										    
										    
										                    }

									},
									"items": [
										{
											"label": "Code category",
											"name": "CODE_CATEGORY",
											"id": "CODE_CATEGORY",
											"align": "center",
											"entityName": "cmm_cd",
											"editable": true,
											"gridId": "cmmCdGrid",
											"editrules": {
												"edithidden": true
											},
											"cellattr": function( rowId, cellValue, rawObject, cm, rdata ){
											                        var grid = $(this).jqGrid();
											                        var vGridOpt = grid.getGridParam();
											                        // var models = eval(vGridOpt.modelVarName);
											                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
											                        var result = " class='contextMenu contextMenu-child'";
											                        result += " style='vertical-align: middle;";
											                        // blue
											                        // result += "color: #009eff;font-weight: bolder;cursor:pointer;'";
											                        result += "cursor:pointer;'";
											                        result += " gridId='" + vGridOpt.gridId + "'";
											                        result += " entityId='" + vGridOpt.entityId + "'";
											                        result += " columnName='" + cm.name + "'";
											                        result += " cellValue='" + rawObject[cm.name] + "'";
											                        
											                        return result;
											                    }

										},
										{
											"label": "Code id",
											"name": "CODE_ID",
											"id": "CODE_ID",
											"align": "center",
											"entityName": "cmm_cd",
											"editable": true,
											"gridId": "cmmCdGrid",
											"editrules": {
												"edithidden": true
											},
											"cellattr": function( rowId, cellValue, rawObject, cm, rdata ){
											                        var grid = $(this).jqGrid();
											                        var vGridOpt = grid.getGridParam();                    
											                        var result = "";
											                        
											                        if ( cm.file_info != null){
											                            result = " class='glyphicon glyphicon-download-alt'";
											                            result += " style='vertical-align: middle;";
											                            result += "cursor:pointer;'";
											                        }
											                        result += " gridId='" + vGridOpt.gridId + "'";
											                        result += " entityId='" + vGridOpt.entityId + "'";
											                        result += " columnName='" + cm.name + "'";
											                        result += " cellValue='" + rawObject[cm.name] + "'";
											                        
											                        return result;
											                    }

										},
										{
											"label": "Code nm",
											"name": "CODE_NM",
											"id": "CODE_NM",
											"align": "center",
											"entityName": "cmm_cd",
											"editable": true,
											"gridId": "cmmCdGrid",
											"editrules": {
												"edithidden": true
											},
											"cellattr": function( rowId, cellValue, rawObject, cm, rdata ){
											                        var grid = $(this).jqGrid();
											                        var vGridOpt = grid.getGridParam();                    
											                        var result = "";
											                        
											                        if ( cm.file_info != null){
											                            result = " class='glyphicon glyphicon-download-alt'";
											                            result += " style='vertical-align: middle;";
											                            result += "cursor:pointer;'";
											                        }
											                        result += " gridId='" + vGridOpt.gridId + "'";
											                        result += " entityId='" + vGridOpt.entityId + "'";
											                        result += " columnName='" + cm.name + "'";
											                        result += " cellValue='" + rawObject[cm.name] + "'";
											                        
											                        return result;
											                    }

										}
									]
								}
							]
						}
					}
				},
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvvF-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBaMcTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mvu1-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvv1-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBaMcjRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mvvl-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvvV-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvul-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": [
								{
									"_xmi:id": "_Q4Mvwl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgDRPEDih466MYOWd-w",
									"__prefix": null
								},
								{
									"_xmi:id": "_Q4Mvw1-9EeqK2M3E1LfZ7Q",
									"_key": "name_column",
									"_value": "code_nm",
									"__prefix": null
								}
							],
							"_xmi:id": "_Q4MvwV-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvxl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4MvxV-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvxF-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4MvwF-9EeqK2M3E1LfZ7Q",
						"_name": "code_id",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvyV-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBazgjRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4MvyF-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvx1-9EeqK2M3E1LfZ7Q",
						"_name": "code_nm",
						"__prefix": null
					}
				],
				"sqlGenerator": {
					"fileName": "cmmCdSql.xml",
					"dbType": "mysql",
					"sqls": [
						{
							"id": "cmmCd.cmmCd",
							"type": "select",
							"contents": [
								"select ",
								"\tCODE_CATEGORY,CODE_ID,CODE_NM",
								"from CMM_CD a ",
								"where 1=1"
							],
							"wheres": [
								"<if test=\"search_codeCategory != null and search_codeCategory !='' \">",
								"\tand code_category = #{search_codeCategory}",
								"</if>",
								"<if test=\"search_codeId != null and search_codeId !='' \">",
								"\tand code_id = #{search_codeId}",
								"</if>",
								"<if test=\"search_codeNm != null and search_codeNm !='' \">",
								"\tand code_nm = #{search_codeNm}",
								"</if>"
							],
							"jsp_type": "grid"
						},
						{
							"id": "cmmCd.cmmCd.insert",
							"type": "insert",
							"contents": [
								"\tinsert into CMM_CD(",
								"\t\tcode_category,code_id,code_nm",
								"\t\t,INS_DT",
								"\t)",
								"\tvalues (",
								"\t\t#{CODE_CATEGORY}",
								"\t\t,",
								"\t\t#{CODE_ID}",
								"\t\t,",
								"\t\t#{CODE_NM}",
								"\t\t,now()",
								"\t);"
							],
							"wheres": [],
							"jsp_type": "grid"
						},
						{
							"id": "cmmCd.cmmCd.edit",
							"type": "update",
							"contents": [
								"update CMM_CD set",
								"\tMOD_Dt = now(),  ",
								"\t\t ${fieldName} = #{fieldValue}",
								"\twhere 1=1",
								"\t<choose>",
								"\t\t<when test=\"searchJson != null and searchJson != '' and searchJson.origindatas.size() > 0 \" >",
								"\t\t\t<foreach collection=\"searchJson.origindatas\" item=\"item\" index=\"index\"  >",
								"\t\t\t and ${item.field} = #{item.value}",
								"\t\t\t</foreach>",
								"\t\t</when>",
								"\t\t<otherwise>",
								"\t\tand 1=2",
								"\t\t</otherwise>",
								"\t</choose>",
								"\t;"
							],
							"wheres": []
						},
						{
							"id": "cmmCd.cmmCd.delete",
							"type": "update",
							"contents": [
								"\t\tdelete from CMM_CD",
								"\t\twhere 1=1",
								"\t\tand code_category = #{detail.CODE_CATEGORY}",
								"\t\tand code_id = #{detail.CODE_ID}",
								"\t\t;"
							],
							"wheres": []
						},
						{
							"id": "cmmCd.dictionary.cmmCd",
							"type": "select",
							"contents": [
								"select  ",
								"b.TABLE_NAME",
								", b.COLUMN_NAME",
								", a.CODE_CATEGORY",
								", a.CODE_ID",
								", a.CODE_NM",
								"from CMM_CD a",
								"left outer join  CMM_USE b",
								" on a.CODE_CATEGORY = b.CODE_CATEGORY",
								"where b.TABLE_NAME is not null",
								"order by 1,2,3,4"
							],
							"wheres": []
						}
					],
					"sources": [
						"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
						"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">",
						"<mapper namespace=\"\">",
						"<select id=\"cmmCd.cmmCd.page.list\" resultType=\"hashmap\" >",
						"\tSelect \n\t\t\t*\t\t\n\t\tFrom \n\t\t(\n\t\t\tselect\n\t\t\t\tA.*\n\t\t\tfrom \n\t\t\t(",
						"\tselect ",
						"\t\tCODE_CATEGORY,CODE_ID,CODE_NM",
						"\tfrom CMM_CD a ",
						"\twhere 1=1",
						"\t<if test=\"search_codeCategory != null and search_codeCategory !='' \">",
						"\t\tand code_category = #{search_codeCategory}",
						"\t</if>",
						"\t<if test=\"search_codeId != null and search_codeId !='' \">",
						"\t\tand code_id = #{search_codeId}",
						"\t</if>",
						"\t<if test=\"search_codeNm != null and search_codeNm !='' \">",
						"\t\tand code_nm = #{search_codeNm}",
						"\t</if>",
						"\n\t\t\n",
						"\t) A where 1=1 \n\t\t\t<choose>\n\t\t\t\t<when test=\"filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )\">\n\t\t\t\t\tand (\n\t\t\t\t\t<if test=\"filters.rules.size() > 0\" >\n\t\t\t       \t\t<foreach collection=\"filters.rules\" item=\"item\" index=\"index\"  open=\"(\" separator=\"\" close=\")\">\n\t\t\t           \t\t<if test=\"index > 0 \"> ${filters.groupOp} </if>\n\t\t\t\t\t\t\t<choose>\n\t\t\t\t\t\t\t\t<when test=\"item.data.equalsIgnoreCase('isnull')\">${item.field} is null</when>\n\t\t\t\t    \t\t\t<when test=\"item.op =='eq' \">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ne' \">${item.field} <![CDATA[ != ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='lt' \">${item.field} <![CDATA[ < ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='le' \">${item.field} <![CDATA[ <= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='gt' \">${item.field} <![CDATA[ > ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ge' \">${item.field} <![CDATA[ >= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bw' \">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bn' \"> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='in' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ni' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ew' \"> REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='en' \"> NOT REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='nc' \">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t</choose>\n\t\t\t       \t\t</foreach>\t\n\t\t\t       \t</if>\t\n\t\t\t       \t<if test=\"filters.groups != null and filters.groups.size() > 0\">\n\t\t       \t\t\t<foreach collection=\"filters.groups\" item=\"group\" index=\"group_index\"  open=\"\"  close=\"\">\n\t\t\t       \t\t\t<if test=\"group.rules.size() > 0\">\n\t\t\t       \t\t\t${filters.groupOp}\n\t\t\t\t           \t<foreach collection=\"group.rules\" item=\"rule\" index=\"rule_index\"  open=\"(\"   separator=\"\" close=\")\">\n\t\t\t\t\t        \t<if test=\"rule_index > 0 \"> ${group.groupOp} </if>\n\t           \t\t \t\t\t<choose>\n\t\t\t\t\t\t\t\t\t<when test=\"rule.data.equalsIgnoreCase('isnull')\">${rule.field} is null</when>\t\n\t\t\t\t\t           \t\t<when test=\"rule.op =='eq' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data}|| '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ne' \">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='lt' \">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='le' \">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='gt' \">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ge' \">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bw' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bn' \"> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='in' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ni' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ew' \"> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='en' \"> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='nc' \">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t</choose> \n\t\t\t\t\t       \t</foreach>\n\t\t\t\t\t       \t</if>\n\t\t\t\t       \t</foreach>\n\t\t       \t\t</if> \n\t\t       \t\t )\n\t\t   \t\t</when>\n\t   \t\t</choose>\n\t\t) A\n\t\tLIMIT #{int_limit} OFFSET #{int_offset}\n\t\t",
						"</select>",
						"<select id=\"cmmCd.cmmCd.page.total\" resultType=\"hashmap\" >",
						"\tselect \n\t\tceil(count(*)/ #{rows} ) as total,\n\t\t#{page} as page ,\n\t\tcount(*) records \n\tfrom \n\t(\n\t\tselect a.* from (\n",
						"\tselect ",
						"\t\tCODE_CATEGORY,CODE_ID,CODE_NM",
						"\tfrom CMM_CD a ",
						"\twhere 1=1",
						"\t<if test=\"search_codeCategory != null and search_codeCategory !='' \">",
						"\t\tand code_category = #{search_codeCategory}",
						"\t</if>",
						"\t<if test=\"search_codeId != null and search_codeId !='' \">",
						"\t\tand code_id = #{search_codeId}",
						"\t</if>",
						"\t<if test=\"search_codeNm != null and search_codeNm !='' \">",
						"\t\tand code_nm = #{search_codeNm}",
						"\t</if>",
						"\n\t\t\n",
						"\t) a\n\twhere 1=1 \t\t\t\n\t<choose>\n\t\t<when test=\"filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )\">\n\t\t\tand (\n\t\t\t<if test=\"filters.rules.size() > 0\" >\n\t\t\t\t<foreach collection=\"filters.rules\" item=\"item\" index=\"index\"  open=\"(\" separator=\"\" close=\")\">\n\t\t\t\t\t<if test=\"index > 0 \"> ${filters.groupOp} </if>\n\t\t\t\t\t<choose>\n\t\t\t\t    <when test=\"item.op =='eq' \">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ne' \">${item.field} <![CDATA[ != ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='lt' \">${item.field} <![CDATA[ < ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='le' \">${item.field} <![CDATA[ <= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='gt' \">${item.field} <![CDATA[ > ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ge' \">${item.field} <![CDATA[ >= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bw' \">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bn' \"> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='in' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ni' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ew' \"> REGEXP_LIKE(${item.field}, #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='en' \"> NOT REGEXP_LIKE(${item.field}, #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t</choose>\n\t\t\t\t</foreach>\t\n\t\t\t</if>\t\n\t\t\t<if test=\"filters.groups != null and filters.groups.size() > 0\">\n\t\t\t\t<foreach collection=\"filters.groups\" item=\"group\" index=\"group_index\"  open=\"\"  close=\"\">\n\t\t\t\t\t<if test=\"group.rules.size() > 0\">\n\t\t\t\t\t${filters.groupOp}\n\t\t\t\t\t<foreach collection=\"group.rules\" item=\"rule\" index=\"rule_index\"  open=\"(\"   separator=\"\" close=\")\">\n\t\t\t\t\t\t<if test=\"rule_index > 0 \"> ${group.groupOp} </if>\n\t\t\t\t\t\t<choose>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='eq' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ne' \">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='lt' \">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='le' \">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='gt' \">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ge' \">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bw' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bn' \"> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='in' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ni' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ew' \"> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='en' \"> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t</choose>           \t\t \n\t\t\t\t\t</foreach>\n\t\t\t\t\t</if>\n\t\t\t\t</foreach>\n\t\t\t</if> \n\t\t\t\t)\n\t\t</when>\n\t</choose>\n\t) a",
						"</select>",
						"<select id=\"cmmCd.cmmCd.one\" resultType=\"hashmap\" >",
						"\tselect ",
						"\t\tCODE_CATEGORY,CODE_ID,CODE_NM",
						"\tfrom CMM_CD a ",
						"\twhere 1=1",
						"\t<if test=\"search_codeCategory != null and search_codeCategory !='' \">",
						"\t\tand code_category = #{search_codeCategory}",
						"\t</if>",
						"\t<if test=\"search_codeId != null and search_codeId !='' \">",
						"\t\tand code_id = #{search_codeId}",
						"\t</if>",
						"\t<if test=\"search_codeNm != null and search_codeNm !='' \">",
						"\t\tand code_nm = #{search_codeNm}",
						"\t</if>",
						"\n\t\t\n",
						"</select>",
						"<update id=\"cmmCd.cmmCd.insert\" parameterType=\"hashmap\" >",
						"\t\tinsert into CMM_CD(",
						"\t\t\tcode_category,code_id,code_nm",
						"\t\t\t,INS_DT",
						"\t\t)",
						"\t\tvalues (",
						"\t\t\t#{CODE_CATEGORY}",
						"\t\t\t,",
						"\t\t\t#{CODE_ID}",
						"\t\t\t,",
						"\t\t\t#{CODE_NM}",
						"\t\t\t,now()",
						"\t\t);",
						"</update>",
						"<update id=\"cmmCd.cmmCd.edit\" parameterType=\"hashmap\" >",
						"\tupdate CMM_CD set",
						"\t\tMOD_Dt = now(),  ",
						"\t\t\t ${fieldName} = #{fieldValue}",
						"\t\twhere 1=1",
						"\t\t<choose>",
						"\t\t\t<when test=\"searchJson != null and searchJson != '' and searchJson.origindatas.size() > 0 \" >",
						"\t\t\t\t<foreach collection=\"searchJson.origindatas\" item=\"item\" index=\"index\"  >",
						"\t\t\t\t and ${item.field} = #{item.value}",
						"\t\t\t\t</foreach>",
						"\t\t\t</when>",
						"\t\t\t<otherwise>",
						"\t\t\tand 1=2",
						"\t\t\t</otherwise>",
						"\t\t</choose>",
						"\t\t;",
						"</update>",
						"<update id=\"cmmCd.cmmCd.delete\" parameterType=\"hashmap\" >",
						"\t\t\tdelete from CMM_CD",
						"\t\t\twhere 1=1",
						"\t\t\tand code_category = #{detail.CODE_CATEGORY}",
						"\t\t\tand code_id = #{detail.CODE_ID}",
						"\t\t\t;",
						"</update>",
						"<select id=\"cmmCd.dictionary.cmmCd\" resultType=\"hashmap\" >",
						"\tselect  ",
						"\tb.TABLE_NAME",
						"\t, b.COLUMN_NAME",
						"\t, a.CODE_CATEGORY",
						"\t, a.CODE_ID",
						"\t, a.CODE_NM",
						"\tfrom CMM_CD a",
						"\tleft outer join  CMM_USE b",
						"\t on a.CODE_CATEGORY = b.CODE_CATEGORY",
						"\twhere b.TABLE_NAME is not null",
						"\torder by 1,2,3,4",
						"</select>",
						"</mapper>"
					],
					"fn_generate": function(){
					    var _this = this;
					    var src = '<?xml version="1.0" encoding="UTF-8"?>'; this.sources.push(src);
					    src = '<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">'; this.sources.push(src);
					    src = '<mapper namespace="">'; this.sources.push(src);
					    $.each(_this.sqls, function(i,sql){
					        if(sql.type == "select" ){
					            if(sql.jsp_type == "grid"){
					                var src = "";
					                //////////////////// page list
					                src = '<' + sql.type + ' id="'+ sql.id + '.page.list"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                
					                src = $("#pagelistHead"+ _.capitalize(_this.dbType)).text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                // jstree
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                //  include foot
					                src = $("#pagelistFooter" + _.capitalize(_this.dbType)).text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					                
					                
					                /////////////////// page total
					                src = '<' + sql.type + ' id="'+ sql.id + '.page.total"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                src = $("#pageTotalHead").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                // jstree
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                //  include foot
					                src = $("#pageTotalFooter").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					
					
					
					
					                ////////////////////// detail one select
					                src = '<' + sql.type + ' id="'+ sql.id + '.one"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                //  include foot
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					
					
					                ////////////////////// detail edit
					            } else {
					                src = '<' + sql.type + ' id="'+ sql.id + '" resultType="hashmap" >' ;
					                _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					            }
					        }else if (sql.type == 'insert'){
					            src = '<update id="'+ sql.id + '" parameterType="hashmap" >' ;            
					            _this.sources.push(src);
					            $.each(sql.contents, function(j,content){
					                src = "\	" + content ; _this.sources.push(src);
					            });
					            src = '</update>'; _this.sources.push(src);
					        }else if (sql.type == 'update'){
					            src = '<update id="'+ sql.id + '" parameterType="hashmap" >' ;
					            
					            _this.sources.push(src);
					            $.each(sql.contents, function(j,content){
					                src = "\	" + content ; _this.sources.push(src);
					            });
					            src = '</update>'; _this.sources.push(src);
					        }
					        
					    });
					    src = '</mapper>'; this.sources.push(src);
					
					}

				},
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page not use in general",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_cd\",",
					"\t\t\t\t\"sqlId\": \"cmmCd.dictionary.cmmCd\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"cmm_cd\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar jstreeInfo = {",
					"\t\t\t\"idList\": [],",
					"\t\t\t\"search\": function(){\n\t\t\t                var _this = this;\n\t\t\t                if (_this.idList.length == 0)\n\t\t\t                    return;\n\t\t\t                var selJsTree3 = [];\n\t\t\t                $.each(_this.idList, function(i,vJsTreeId){\n\t\t\t                    var vJsTree = $(\"#\" + vJsTreeId ).jstree(true);\n\t\t\t                    // var selJsTree = _.filter(vJsTree._model.data , {state : {selected: true } });\n\t\t\t                    var selJsTree = _.filter(vJsTree._model.data , function( data ){\n\t\t\t                        // if (data.id == \"#\")\n\t\t\t                        // \treturn false;\n\t\t\t                        if (data['original'] == null || data.original[\"field\"] == null)\n\t\t\t                            return false;\n\t\t\t                        if ( data.state.selected == null ) \n\t\t\t                            return false;\n\t\t\t                        var vSelected = data.state.selected;\n\t\t\t                        if ( vSelected)\n\t\t\t                            return true;\n\t\t\t                        $.each(vJsTree.get_node(data.id).children_d, function(i, nodeId){\n\t\t\t                            var vNode = vJsTree.get_node(nodeId);\n\t\t\t                            if ( vNode.state.selected) {\n\t\t\t                                vSelected = true;\n\t\t\t                                return false;\n\t\t\t                            }\n\t\t\t                        });\n\t\t\t                        // if ( vJsTree.get_bottom_checked(data.id).length > 0 )\n\t\t\t                        // \treturn true;\n\t\t\t\n\t\t\t                        return vSelected;\n\t\t\t\n\t\t\t                    });\n\t\t\t                    var selJsTree1 = _.map(selJsTree, function(data, i){\n\t\t\t                        var obj = {};\n\t\t\t\n\t\t\t                        // // Customize if field is different with Original field\n\t\t\t                        // var _datas = data.id.split(\";;;\");\n\t\t\t                        // var _col = _datas[1];\n\t\t\t                        // if ( _col != null && data.original.field != 'GUBUN' ){\n\t\t\t                        //     var _cols = _col.split(\"/\");\n\t\t\t                        //     var textIndex = _.findIndex(_datas.slice(2), function(o) { return o == data.text; });\n\t\t\t                        //     var keyIndex   = textIndex - 0;\n\t\t\t                        //     var _field = _cols[keyIndex];\n\t\t\t                        //     if ( _field == null) \n\t\t\t                        //         debugger;\n\t\t\t                        //     var _field1 = decamelize(_field,'_')\n\t\t\t                        //     obj[ _field1.toUpperCase() ] = data.text; \n\t\t\t                        // }else{\n\t\t\t                        //     // obj[_.camelCase(data.original.field)] = data.text;\n\t\t\t                        //     obj[ data.original.field] = data.text;\n\t\t\t                        // }\n\t\t\t                        obj[ data.original.field] = data.original.value;\n\t\t\t\n\t\t\t                        return obj;\n\t\t\t\n\t\t\t                    });\n\t\t\t                    var selJsTree2 = serializeArrayJSON(selJsTree1);\n\t\t\t                    \n\t\t\t                    $.each(selJsTree2, function(field, data){\n\t\t\t                        var obj = {\n\t\t\t                            field : field ,\n\t\t\t                            // value: [].concat(data)\n\t\t\t                            value: data , \n\t\t\t                            isArray : _.isArray(data)\n\t\t\t                        };\n\t\t\t                        selJsTree3.push( obj );\n\t\t\t                    });\n\t\t\t                    \n\t\t\t                });\n\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: selJsTree3}));\n\t\t\t                // var parameter = $(\"#form\").serializeFormJSON();\n\t\t\t                // var removedList = _.remove(selJsTree3,{field:'GUBUN'} );\n\t\t\t            }\n",
					"\t\t};",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvvF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBaMcTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mvu1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvv1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBaMcjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvvl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvvV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvul-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvwl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvw1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"name_column\",",
					"\t\t\t\t\t\t\t\"_value\": \"code_nm\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t],",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvwV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvxl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvxV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvxF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4MvwF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_id\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvyV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBazgjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvyF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvx1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_nm\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar v_schema_search = {",
					"\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\"id\": \"searchConditionHorizontalLayout\",",
					"\t\t\t\"name\": \"searchConditionHorizontalLayout\",",
					"\t\t\t\"label\": \"\",",
					"\t\t\t\"controlCss\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"code\": \"min-height\",",
					"\t\t\t\t\t\"value\": \"30px\"",
					"\t\t\t\t}",
					"\t\t\t],",
					"\t\t\t\"elements\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\"cls\": \"\",",
					"\t\t\t\t\t\"containerCss\": [],",
					"\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"containerCss\": [],",
					"\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\"id\": \"searchVervical\",",
					"\t\t\t\t\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"id\": \"searchHorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"name\": \"searchHorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"code\": \"min-height\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"value\": \"25px\"",
					"\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\t\t\"elements\": []",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t]",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\t\t\"cls\": \"btn_txt\",",
					"\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"code\": \"margin-left\",",
					"\t\t\t\t\t\t\t\t\t\"value\": \"10px\"",
					"\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"code\": \"float\",",
					"\t\t\t\t\t\t\t\t\t\"value\": \"right\"",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"type\": \"ButtonBootstrap\",",
					"\t\t\t\t\t\t\t\t\t\"id\": \"btnSearch\",",
					"\t\t\t\t\t\t\t\t\t\"name\": \"btnSearch\",",
					"\t\t\t\t\t\t\t\t\t\"label\": \"SEARCH\",",
					"\t\t\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"code\": \"margin-right\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"value\": \"3px\"",
					"\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\t\t\"events\": {",
					"\t\t\t\t\t\t\t\t\t\t\"click\": function(){\n\t\t\t\t\t\t\t\t\t\t                                                fn_search();\n\t\t\t\t\t\t\t\t\t\t                                            }\n",
					"\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t]",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t]",
					"\t\t\t\t}",
					"\t\t\t]",
					"\t\t};",
					"\t\tvar v_schema_content = {",
					"\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\"id\": \"contentVertical\",",
					"\t\t\t\"name\": \"contentVertical\",",
					"\t\t\t\"label\": \"\",",
					"\t\t\t\"elements\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"type\": \"grid\",",
					"\t\t\t\t\t\"id\": \"cmmCdGrid\",",
					"\t\t\t\t\t\"name\": \"cmmCdGrid\",",
					"\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\"text\": \"Cmm_cd\",",
					"\t\t\t\t\t\"sqlId\": \"cmmCd.cmmCd\",",
					"\t\t\t\t\t\"entityId\": \"cmm_cd\",",
					"\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"width\",",
					"\t\t\t\t\t\t\t\"value\": \"100%\"",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"margin-top\",",
					"\t\t\t\t\t\t\t\"value\": \"10px\"",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"background-color\",",
					"\t\t\t\t\t\t\t\"value\": \"#FFF\"",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t],",
					"\t\t\t\t\t\"gridOpt\": {",
					"\t\t\t\t\t\t\"datatype\": \"json\",",
					"\t\t\t\t\t\t\"pager\": \"#cmmCdGridPager\",",
					"\t\t\t\t\t\t\"sqlId\": \"cmmCd.cmmCd\",",
					"\t\t\t\t\t\t\"gridId\": \"cmmCdGrid\",",
					"\t\t\t\t\t\t\"modelVarName\": \"testEntityJpa\",",
					"\t\t\t\t\t\t\"url\": function(){ \n\t\t\t\t\t\t                    return\t\"./genericlListPageJson.do?\" + \n\t\t\t\t\t\t                        $(\"#form\").serialize() + \n\t\t\t\t\t\t                        \"&sqlid=cmmCd.cmmCd.page.list\" +  \n\t\t\t\t\t\t                        \"&paging_sqlid=cmmCd.cmmCd.page.total\" \n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"editurl\": \"./ssdCusDummySaveJson.html\",",
					"\t\t\t\t\t\t\"styleUI\": \"Bootstrap\",",
					"\t\t\t\t\t\t\"viewrecords\": true,",
					"\t\t\t\t\t\t\"width\": \"100%\",",
					"\t\t\t\t\t\t\"autowidth\": true,",
					"\t\t\t\t\t\t\"height\": 650,",
					"\t\t\t\t\t\t\"multiselect\": false,",
					"\t\t\t\t\t\t\"multiboxonly\": true,",
					"\t\t\t\t\t\t\"multiSort\": true,",
					"\t\t\t\t\t\t\"rowNum\": 20,",
					"\t\t\t\t\t\t\"rowList\": [",
					"\t\t\t\t\t\t\t5,",
					"\t\t\t\t\t\t\t10,",
					"\t\t\t\t\t\t\t15,",
					"\t\t\t\t\t\t\t20,",
					"\t\t\t\t\t\t\t30",
					"\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\"emptyrecords\": \"No records to view\",",
					"\t\t\t\t\t\t\"gridComplete\": function () {\n\t\t\t\t\t\t                    var grid = $(this).jqGrid();\n\t\t\t\t\t\t                    var gridParam = grid.getGridParam();\n\t\t\t\t\t\t                    var show_filter = true;\n\t\t\t\t\t\t                    if ( gridParam.filterToolbarShow != null \n\t\t\t\t\t\t                        && gridParam.filterToolbarShow == false )\n\t\t\t\t\t\t                        show_filter = false; \n\t\t\t\t\t\t                    if (show_filter){\n\t\t\t\t\t\t                        grid.jqGrid('filterToolbar',\n\t\t\t\t\t\t                        {\n\t\t\t\t\t\t                            defaultSearch:'cn'\n\t\t\t\t\t\t                            // JSON stringify all data from search, including search toolbar operators\n\t\t\t\t\t\t                            ,stringResult: true\n\t\t\t\t\t\t                            // instuct the grid toolbar to show the search options\n\t\t\t\t\t\t                            // ,searchOperators: true\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        );\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    grid.navGrid(gridParam.pager ,\n\t\t\t\t\t\t                        // the buttons to appear on the toolbar of the grid\n\t\t\t\t\t\t                        { edit: true, add: true, del: true, search: false,  refresh: true, view: true, position: \"left\", cloneToTop: false  \n\t\t\t\t\t\t                            ,addfunc: function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'add');\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                            , editfunc : function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'edit');\n\t\t\t\t\t\t                            }, viewfunc : function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'view');\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        // options for the Edit Dialog\n\t\t\t\t\t\t                        ,{  }\n\t\t\t\t\t\t                        // options for the Script Master Add Dialog\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        ,{\t\n\t\t\t\t\t\t                            addCaption: \"Add Script Master\",\n\t\t\t\t\t\t                            modal:true,\n\t\t\t\t\t\t                            recreateForm: true,\n\t\t\t\t\t\t                            closeAfterAdd: true,\n\t\t\t\t\t\t                            reloadAfterSubmit: true,\n\t\t\t\t\t\t                            //template: template,\n\t\t\t\t\t\t                            errorTextFormat: function (data) {\n\t\t\t\t\t\t                                return 'Error: ' + data.responseText\n\t\t\t\t\t\t                            },\n\t\t\t\t\t\t                            onInitializeForm : function(formid){\n\t\t\t\t\t\t                                $(formid).attr('method','POST');\n\t\t\t\t\t\t                                $(formid).attr('action','');\n\t\t\t\t\t\t                                $(formid).attr('enctype','multipart/form-data');\n\t\t\t\t\t\t                                $(formid).css(\"font-size\",\"14px\");\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                            },\n\t\t\t\t\t\t                            afterSubmit: function(response, postdata) \n\t\t\t\t\t\t                            { \n\t\t\t\t\t\t                                var grid = $(this).jqGrid();\n\t\t\t\t\t\t                                var gridParam = grid.getGridParam();\n\t\t\t\t\t\t                                var formdata = this.ownerDocument.FormPost;\n\t\t\t\t\t\t                                var fd = new FormData(formdata);  \t\n\t\t\t\t\t\t                                var response1 = {};\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                $.ajax({\n\t\t\t\t\t\t                                    url: \"./genericSaveJson.do?sqlid=\" + gridParam.sqlId + \".insert\",\n\t\t\t\t\t\t                                    type: \"POST\",\n\t\t\t\t\t\t                                    data: fd, \n\t\t\t\t\t\t                                    async: false,\n\t\t\t\t\t\t                                    cache: false,\n\t\t\t\t\t\t                                    contentType: false,\n\t\t\t\t\t\t                                    processData: false,\n\t\t\t\t\t\t                                    success:  function(data){\n\t\t\t\t\t\t                                        response1 = data;\n\t\t\t\t\t\t                                        if(response1.result == 'success'){\n\t\t\t\t\t\t                                            // Cumtomise...\n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    }\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //return [success,message,new_id] ;\n\t\t\t\t\t\t                                if(response1.result == 'success'){\n\t\t\t\t\t\t                                    //$(this).trigger('reloadGrid'); \n\t\t\t\t\t\t                                    return [true, response1.result, ''];\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                else\n\t\t\t\t\t\t                                    return [false, response1.result + \":<br/>\" + response1.message , ''];\n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                            }                         \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        // options for the Script Master Del Dialog \n\t\t\t\t\t\t                        ,{  \n\t\t\t\t\t\t                            reloadAfterSubmit: true,\n\t\t\t\t\t\t                            afterSubmit: function(response, postdata) { \n\t\t\t\t\t\t                                //$(\"#refresh_grid_script\").hide();\n\t\t\t\t\t\t                                var grid = $(this);\n\t\t\t\t\t\t                                var paramObj = {\n\t\t\t\t\t\t                                    delRows : []\n\t\t\t\t\t\t                                };\n\t\t\t\t\t\t                                $.each(postdata.id.split(\",\"),function(i,rowid){\n\t\t\t\t\t\t                                    var row = grid.getRowData(rowid);\n\t\t\t\t\t\t                                    paramObj.delRows.push(row);\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //  \n\t\t\t\t\t\t                                paramObj.loop_id = \"delRows\";\n\t\t\t\t\t\t                                $.ajax({\n\t\t\t\t\t\t                                    url: \"./genericSaveJson.html\",\n\t\t\t\t\t\t                                    type: \"POST\",\n\t\t\t\t\t\t                                    data: {\n\t\t\t\t\t\t                                        searchJson: JSON.stringify(paramObj),\n\t\t\t\t\t\t                                        sqlid: \"cmmCd.cmmCd.delete\"\n\t\t\t\t\t\t                                    }  , \n\t\t\t\t\t\t                                    async: false,\n\t\t\t\t\t\t                                    success:  function(data){\n\t\t\t\t\t\t                                        response1 = data;\n\t\t\t\t\t\t                                        if(response1.result == 'success'){\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                            msg = \"Del Success!\";\n\t\t\t\t\t\t                                            $(\"#dialog-confirm\").html(msg);\n\t\t\t\t\t\t                                            $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                                resizable: false,\n\t\t\t\t\t\t                                                modal: true,\n\t\t\t\t\t\t                                                title: \"Success\",\n\t\t\t\t\t\t                                                //height: 200,\n\t\t\t\t\t\t                                                width: 200,\n\t\t\t\t\t\t                                                dialogClass: 'no-close',\n\t\t\t\t\t\t                                                closeOnEscape: false,\n\t\t\t\t\t\t                                                buttons: [\n\t\t\t\t\t\t                                                    {\n\t\t\t\t\t\t                                                        text: \"OK\",\n\t\t\t\t\t\t                                                        click: function() {\n\t\t\t\t\t\t                                                            $( this ).dialog( \"close\" );\t\t\n\t\t\t\t\t\t                                                            // fn_search_script();\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                    }\n\t\t\t\t\t\t                                                ]\n\t\t\t\t\t\t                                            });\n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    }\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //return [success,message,new_id] ;\n\t\t\t\t\t\t                                if(response1.result == 'success'){\n\t\t\t\t\t\t                                    //$(this).trigger('reloadGrid'); \n\t\t\t\t\t\t                                    return [true, response1.result, ''];\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                else\n\t\t\t\t\t\t                                    return [false, response1.result + \":<br/>\" + response1.message , ''];\n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        ,{ \n\t\t\t\t\t\t                            multipleSearch: true,\n\t\t\t\t\t\t                            multipleGroup: true\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                    );\n\t\t\t\t\t\t                    if ($(gridParam.pager).find(\".ui-pg-button[title=Copy]\").length == 0 && true) {\n\t\t\t\t\t\t                        grid.navButtonAdd(gridParam.pager, {\n\t\t\t\t\t\t                            caption : \"\", \n\t\t\t\t\t\t                            title: \"Copy\",\n\t\t\t\t\t\t                            buttonicon : \"glyphicon-copy\",\n\t\t\t\t\t\t                            onClickButton: function(){ \n\t\t\t\t\t\t                                var theGrid = $(this).jqGrid();\n\t\t\t\t\t\t                                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');\n\t\t\t\t\t\t                                if ( parentRowKey == null )   {\n\t\t\t\t\t\t                                    $(\"#dialog-confirm\").html(\"Please, select row\");\n\t\t\t\t\t\t                                    $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                        resizable: false,\n\t\t\t\t\t\t                                        modal: true,\n\t\t\t\t\t\t                                        title: \"Error\",\n\t\t\t\t\t\t                                        //height: 200,\n\t\t\t\t\t\t                                        width: 300,\n\t\t\t\t\t\t                                        dialogClass: 'no-close',\n\t\t\t\t\t\t                                        closeOnEscape: false,\n\t\t\t\t\t\t                                        buttons: [\n\t\t\t\t\t\t                                            {\n\t\t\t\t\t\t                                                text: \"OK\",\n\t\t\t\t\t\t                                                click: function() {\n\t\t\t\t\t\t                                                    $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                            }\n\t\t\t\t\t\t                                        ]\n\t\t\t\t\t\t                                    });\n\t\t\t\t\t\t                                    return;\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'copy');\n\t\t\t\t\t\t                                // alert(\"Deleting Row\");\n\t\t\t\t\t\t                            }, \n\t\t\t\t\t\t                            position:\"last\"\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        var td_cp = $(gridParam.pager).find(\".ui-pg-table .ui-pg-button[title='Copy']\")\n\t\t\t\t\t\t                        var td_add = $(gridParam.pager).find(\".ui-pg-table .ui-pg-button[title='Add new row']\");\n\t\t\t\t\t\t                        td_add.after(td_cp);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"onCellSelect\": function (rowId, iCol, content, event) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var grid = $(this).jqGrid();\n\t\t\t\t\t\t                    var row = grid.jqGrid('getRowData',rowId);\n\t\t\t\t\t\t                    var cms = grid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\t\t\t                    var cm = cms[iCol];\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var oFrm = document.getElementById(\"form1\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var v_property = _.find(gridProperties, { _name : cm.name.toLowerCase() });\n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    //customize\n\t\t\t\t\t\t                    var somCondition = ( v_property != null && \n\t\t\t\t\t\t                        v_property._documentation != null &&\n\t\t\t\t\t\t                        v_property._documentation.file_info != null );\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    if ( somCondition ){\n\t\t\t\t\t\t                        var path_column = v_property._documentation.file_info.path_column ;\n\t\t\t\t\t\t                        var path = '.'+ row[path_column] ;\n\t\t\t\t\t\t                        if((/\\\\.(txt|config|pdf|jpg|jpeg|gif|png|log)$/i).test(path)){\n\t\t\t\t\t\t                            var newWin1 = window.open(\"\", \"filedownload\", \"width=1200,height=900, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            oFrm.action =  path;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = 'filedownload'; \n\t\t\t\t\t\t                            oFrm.submit();\t\t\n\t\t\t\t\t\t                            newWin1.focus();\n\t\t\t\t\t\t                        }else if(row[cm.name].match(/\\.([\\w]+)$/i) != null){\n\t\t\t\t\t\t                            //var src = \"/dashboard/filedownloadJson.do\";\n\t\t\t\t\t\t                            //src += \"?filename=\" + row.FILE_NAME;\n\t\t\t\t\t\t                            //src +=\"&path=\" + row.FILE_PATH;\n\t\t\t\t\t\t                            //document.getElementById('file_iframe').src =  src;\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6\n\t\t\t\t\t\t                            if (isIE){\n\t\t\t\t\t\t                                //var fileData = ['\\\\ufeff' + \".\" + row.FILE_PATH];\n\t\t\t\t\t\t                                //var blobObject = new Blob(fileData);\n\t\t\t\t\t\t                                //window.navigator.msSaveOrOpenBlob(blobObject, row.FILE_NAME);\n\t\t\t\t\t\t                                var link = document.createElement('a');\n\t\t\t\t\t\t                                // customize for same path and name ==> formalize \n\t\t\t\t\t\t                                var value_split = row[cm.name].split(\"/\");\n\t\t\t\t\t\t                                var return_text = value_split.pop();\n\t\t\t\t\t\t                                // link.download = row[cm.name];\n\t\t\t\t\t\t                                link.download = return_text;\n\t\t\t\t\t\t                                link.href = \".\" + row[path_column] ;\n\t\t\t\t\t\t                                //Firefox requires the link to be in the body\n\t\t\t\t\t\t                                document.body.appendChild(link);\n\t\t\t\t\t\t                                link.click();\n\t\t\t\t\t\t                                link.target = '_blank';\n\t\t\t\t\t\t                                document.body.removeChild(link);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            }else{\n\t\t\t\t\t\t                                var link = document.createElement('a');\n\t\t\t\t\t\t                                // customize for same path and name ==> formalize \n\t\t\t\t\t\t                                var value_split = row[cm.name].split(\"/\");\n\t\t\t\t\t\t                                var return_text = value_split.pop();\n\t\t\t\t\t\t                                // link.download = row[cm.name];\n\t\t\t\t\t\t                                link.download = return_text;\n\t\t\t\t\t\t                                link.href = \".\" + row[path_column] ;\n\t\t\t\t\t\t                                //Firefox requires the link to be in the body\n\t\t\t\t\t\t                                document.body.appendChild(link);\n\t\t\t\t\t\t                                link.click();\n\t\t\t\t\t\t                                document.body.removeChild(link);\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                                                                    \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"subGrid\": false,",
					"\t\t\t\t\t\t\"subgridtype\": \"json\",",
					"\t\t\t\t\t\t\"entityId\": \"cmm_cd\",",
					"\t\t\t\t\t\t\"subGridRowExpanded\": function(parentRowID, parentRowKey){\n\t\t\t\t\t\t                        var theGrid = $(this).jqGrid();\n\t\t\t\t\t\t                        var row = theGrid.jqGrid('getRowData',parentRowKey);\n\t\t\t\t\t\t                        var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\t\t\t                        var searchRow = {};\n\t\t\t\t\t\t                        var vGridOpt  = theGrid.getGridParam();\n\t\t\t\t\t\t                        $.each(row,function(k,v){\n\t\t\t\t\t\t                            // searchRow['search_' + _.camelCase(k)] = v;\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        var vKeys = [];\n\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t                        $.each([].concat(gridProperties), function(i, prop){\n\t\t\t\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t\t\t\t                            if (vId != null){\n\t\t\t\t\t\t                                vKeys.push(prop._name.toUpperCase());\n\t\t\t\t\t\t                                searchRow['search_' + _.camelCase(prop._name)] = row[prop._name.toUpperCase()];\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        // ***  grid ***//\n\t\t\t\t\t\t                        var childDivId = parentRowID + \"_div_input\";\n\t\t\t\t\t\t                        var childDiv = $(document.createElement(\"div\"));\n\t\t\t\t\t\t                        childDiv.attr(\"id\",childDivId);\n\t\t\t\t\t\t                        // add a table and pager HTML elements to the parent grid row - we will render the child grid here\t\t\t    \t\t\t\n\t\t\t\t\t\t                        $('#' + parentRowID).append(childDiv);\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        var detailList = [];\n\t\t\t\t\t\t                        $.ajax({\n\t\t\t\t\t\t                            type: \"POST\",\n\t\t\t\t\t\t                            url: \"./genericlListJson.do?sqlid=cmmCd.cmmCd.one\" ,\n\t\t\t\t\t\t                            data: searchRow ,\n\t\t\t\t\t\t                            //data: $(\"#form\").serialize(), \n\t\t\t\t\t\t                            async: false,\n\t\t\t\t\t\t                            success:  function(response){\n\t\t\t\t\t\t                                detailList  = response.dataList;                            \n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        if (detailList.length == 0 ){\n\t\t\t\t\t\t                            childDiv.text(\"no data\");\n\t\t\t\t\t\t                            return;\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        var schema1 = {\n\t\t\t\t\t\t                            containerId: childDivId,\n\t\t\t\t\t\t                            type:'Vertical',\n\t\t\t\t\t\t                            label: '',\n\t\t\t\t\t\t                            elements: [\n\t\t\t\t\t\t                                {\n\t\t\t\t\t\t                                    label: \"\",\n\t\t\t\t\t\t                                    type: 'Group',\n\t\t\t\t\t\t                                    elements: [\n\t\t\t\t\t\t                                        {\n\t\t\t\t\t\t                                            type: \"inline_edit\",\n\t\t\t\t\t\t                                            cols: 1,\n\t\t\t\t\t\t                                            data: function(){ \n\t\t\t\t\t\t                                                return detailList[0];\n\t\t\t\t\t\t                                            },\n\t\t\t\t\t\t                                            options : {\n\t\t\t\t\t\t                                                keys : vKeys ,\n\t\t\t\t\t\t                                                fn_change: function( input ){\n\t\t\t\t\t\t                                                    //\n\t\t\t\t\t\t                                                    // if(this.props.options.name == 'SCRIPT_NAME'){\n\t\t\t\t\t\t                                                    // \tvar convert = this.reactObjects.find(function(td){\n\t\t\t\t\t\t                                                    // \t\treturn td.props.options.name == 'CONVERT_SCRIPT';\n\t\t\t\t\t\t                                                    // \t});\t\n\t\t\t\t\t\t                                                    // \t//convert digit\n\t\t\t\t\t\t                                                    // \t//var v_hax = this.state.value;\n\t\t\t\t\t\t                                                    // \tvar v_hax = input;\n\t\t\t\t\t\t                                                    // \tvar v_digit = [];\n\t\t\t\t\t\t                                                    // \t$.each(v_hax.split(\" \"), function(i,str){\n\t\t\t\t\t\t                                                    // \t\tvar d = \"\";\n\t\t\t\t\t\t                                                    // \t\tif(str.startsWith(\"0x\")){\n\t\t\t\t\t\t                                                    // \t\t\tv_digit.push(parseInt(str,16));\n\t\t\t\t\t\t                                                    // \t\t}else{\n\t\t\t\t\t\t                                                    // \t\t\tv_digit.push(str);\n\t\t\t\t\t\t                                                    // \t\t}\n\t\t\t\t\t\t                                                    // \t});\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                                                    // \tconvert.setState({value : v_digit.join(\" \")});\n\t\t\t\t\t\t                                                        \n\t\t\t\t\t\t                                                    // }\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                fn_submit: function(){\n\t\t\t\t\t\t                                                    //alert(\"submit function defined\");\n\t\t\t\t\t\t                                                    var state = true;\n\t\t\t\t\t\t                                                    var paramObj = {\n\t\t\t\t\t\t                                                        //origindatas: this.props.options.keys\n\t\t\t\t\t\t                                                        origindatas: this.state.keys\n\t\t\t\t\t\t                                                    };\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    if(this.props.options.value == this.state.value)\n\t\t\t\t\t\t                                                        return state;\n\t\t\t\t\t\t                                                    $.ajax({\n\t\t\t\t\t\t                                                        url: \"./genericSaveJson.html\",\n\t\t\t\t\t\t                                                        type: \"POST\",\n\t\t\t\t\t\t                                                        data: {\n\t\t\t\t\t\t                                                            searchJson: JSON.stringify(paramObj),\n\t\t\t\t\t\t                                                            fieldName: this.state.name,\n\t\t\t\t\t\t                                                            fieldValue: this.state.value,\n\t\t\t\t\t\t                                                            fieldValueOrigin: this.state.value_origin,\n\t\t\t\t\t\t                                                            userId: $(\"#userId\").val(),\n\t\t\t\t\t\t                                                            // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t\t\t\t                                                            sqlid: \"cmmCd.cmmCd.edit\"\n\t\t\t\t\t\t                                                        }, \n\t\t\t\t\t\t                                                        async: false,\t\t\t                    \t\t\n\t\t\t\t\t\t                                                        success:  function(data){\n\t\t\t\t\t\t                                                            response1 = data;\n\t\t\t\t\t\t                                                            if(response1.result != 'success'){\n\t\t\t\t\t\t                                                                state = false;\n\t\t\t\t\t\t                                                                msg = \"Save Success!\";\n\t\t\t\t\t\t                                                                $(\"#dialog-confirm\").html(response1.message);\n\t\t\t\t\t\t                                                                $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                                                    resizable: false,\n\t\t\t\t\t\t                                                                    modal: true,\n\t\t\t\t\t\t                                                                    title: \"Error\",\n\t\t\t\t\t\t                                                                    //height: 200,\n\t\t\t\t\t\t                                                                    width: 300,\n\t\t\t\t\t\t                                                                    dialogClass: 'no-close',\n\t\t\t\t\t\t                                                                    closeOnEscape: false,\n\t\t\t\t\t\t                                                                    buttons: [\n\t\t\t\t\t\t                                                                        {\n\t\t\t\t\t\t                                                                            text: \"OK\",\n\t\t\t\t\t\t                                                                            click: function() {\n\t\t\t\t\t\t                                                                            $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t\t\t\t                                                                            }\n\t\t\t\t\t\t                                                                        }\n\t\t\t\t\t\t                                                                    ]\n\t\t\t\t\t\t                                                                });\n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                            }\t\t\t\t\t\t                    \t\t\t\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    return state;\n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    $.each(this,function(i,react){\n\t\t\t\t\t\t                                                        if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t\t\t\t                                                            var vobject = {};\n\t\t\t\t\t\t                                                            vobject[react.state.name] = react.state.value;\n\t\t\t\t\t\t                                                            theGrid.setRowData(parentRowKey,vobject);\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                        \n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                progressObject: parent.$(\"#loader\")\n\t\t\t\t\t\t                                            },\n\t\t\t\t\t\t                                            items: _.map([].concat(gridProperties), function(prop){\n\t\t\t\t\t\t                                                var _cms = cms;\n\t\t\t\t\t\t                                                var rtnObj = {\n\t\t\t\t\t\t                                                    label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t\t\t\t                                                    col : prop._name.toUpperCase() \n\t\t\t\t\t\t                                                };\n\t\t\t\t\t\t                                                let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t\t\t\t                                                if (vId != null){\n\t\t\t\t\t\t                                                    rtnObj.editable = false;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                // list hiden columns\n\t\t\t\t\t\t                                                if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t\t\t\t                                                    rtnObj.isDateTime = true;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                                var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t\t\t\t                                                if(vEdit != null){\n\t\t\t\t\t\t                                                    rtnObj.edit_tag = vEdit._value;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t\t\t\t                                                if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                    // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t\t\t\t                                                    var options = [];\n\t\t\t\t\t\t                                                    $.each(cm.editoptions.value, function (k, v) {\n\t\t\t\t\t\t                                                        var opt = {value: k, label: v};\n\t\t\t\t\t\t                                                        options.push(opt);\n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    rtnObj.selectOptions = options;\n\t\t\t\t\t\t                                                    rtnObj.edit_tag = cm.edittype;\n\t\t\t\t\t\t                                                    if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t\t\t\t                                                        rtnObj.edit_tag = 'input';\n\t\t\t\t\t\t                                                        rtnObj.editable = false;\n\t\t\t\t\t\t                                                    }\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                                return rtnObj;\n\t\t\t\t\t\t                                            })\n\t\t\t\t\t\t                                            \n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                                    ]\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            ]\n\t\t\t\t\t\t                        };\n\t\t\t\t\t\t                        fn_makeHtml(childDiv,schema1);\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    \n\t\t\t\t\t\t    \n\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"items\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"Code category\",",
					"\t\t\t\t\t\t\t\"name\": \"CODE_CATEGORY\",",
					"\t\t\t\t\t\t\t\"id\": \"CODE_CATEGORY\",",
					"\t\t\t\t\t\t\t\"align\": \"center\",",
					"\t\t\t\t\t\t\t\"entityName\": \"cmm_cd\",",
					"\t\t\t\t\t\t\t\"editable\": true,",
					"\t\t\t\t\t\t\t\"gridId\": \"cmmCdGrid\",",
					"\t\t\t\t\t\t\t\"editrules\": {",
					"\t\t\t\t\t\t\t\t\"edithidden\": true",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"cellattr\": function( rowId, cellValue, rawObject, cm, rdata ){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t\t                        var result = \" class='contextMenu contextMenu-child'\";\n\t\t\t\t\t\t\t                        result += \" style='vertical-align: middle;\";\n\t\t\t\t\t\t\t                        // blue\n\t\t\t\t\t\t\t                        // result += \"color: #009eff;font-weight: bolder;cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \"cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \" gridId='\" + vGridOpt.gridId + \"'\";\n\t\t\t\t\t\t\t                        result += \" entityId='\" + vGridOpt.entityId + \"'\";\n\t\t\t\t\t\t\t                        result += \" columnName='\" + cm.name + \"'\";\n\t\t\t\t\t\t\t                        result += \" cellValue='\" + rawObject[cm.name] + \"'\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        return result;\n\t\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"Code id\",",
					"\t\t\t\t\t\t\t\"name\": \"CODE_ID\",",
					"\t\t\t\t\t\t\t\"id\": \"CODE_ID\",",
					"\t\t\t\t\t\t\t\"align\": \"center\",",
					"\t\t\t\t\t\t\t\"entityName\": \"cmm_cd\",",
					"\t\t\t\t\t\t\t\"editable\": true,",
					"\t\t\t\t\t\t\t\"gridId\": \"cmmCdGrid\",",
					"\t\t\t\t\t\t\t\"editrules\": {",
					"\t\t\t\t\t\t\t\t\"edithidden\": true",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"cellattr\": function( rowId, cellValue, rawObject, cm, rdata ){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var vGridOpt = grid.getGridParam();                    \n\t\t\t\t\t\t\t                        var result = \"\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        if ( cm.file_info != null){\n\t\t\t\t\t\t\t                            result = \" class='glyphicon glyphicon-download-alt'\";\n\t\t\t\t\t\t\t                            result += \" style='vertical-align: middle;\";\n\t\t\t\t\t\t\t                            result += \"cursor:pointer;'\";\n\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t                        result += \" gridId='\" + vGridOpt.gridId + \"'\";\n\t\t\t\t\t\t\t                        result += \" entityId='\" + vGridOpt.entityId + \"'\";\n\t\t\t\t\t\t\t                        result += \" columnName='\" + cm.name + \"'\";\n\t\t\t\t\t\t\t                        result += \" cellValue='\" + rawObject[cm.name] + \"'\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        return result;\n\t\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"Code nm\",",
					"\t\t\t\t\t\t\t\"name\": \"CODE_NM\",",
					"\t\t\t\t\t\t\t\"id\": \"CODE_NM\",",
					"\t\t\t\t\t\t\t\"align\": \"center\",",
					"\t\t\t\t\t\t\t\"entityName\": \"cmm_cd\",",
					"\t\t\t\t\t\t\t\"editable\": true,",
					"\t\t\t\t\t\t\t\"gridId\": \"cmmCdGrid\",",
					"\t\t\t\t\t\t\t\"editrules\": {",
					"\t\t\t\t\t\t\t\t\"edithidden\": true",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"cellattr\": function( rowId, cellValue, rawObject, cm, rdata ){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var vGridOpt = grid.getGridParam();                    \n\t\t\t\t\t\t\t                        var result = \"\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        if ( cm.file_info != null){\n\t\t\t\t\t\t\t                            result = \" class='glyphicon glyphicon-download-alt'\";\n\t\t\t\t\t\t\t                            result += \" style='vertical-align: middle;\";\n\t\t\t\t\t\t\t                            result += \"cursor:pointer;'\";\n\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t                        result += \" gridId='\" + vGridOpt.gridId + \"'\";\n\t\t\t\t\t\t\t                        result += \" entityId='\" + vGridOpt.entityId + \"'\";\n\t\t\t\t\t\t\t                        result += \" columnName='\" + cm.name + \"'\";\n\t\t\t\t\t\t\t                        result += \" cellValue='\" + rawObject[cm.name] + \"'\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        return result;\n\t\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t]",
					"\t\t\t\t}",
					"\t\t\t]",
					"\t\t};",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t                if($(\"#filterPop\").val() != \"\" ){\n\t\t\t                    v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t                    var v_filters = [];\n\t\t\t                    $.each(v_filterPop ,function(field, data){\n\t\t\t                        var obj = {\n\t\t\t                            field : field ,\n\t\t\t                            // value: [].concat(data)\n\t\t\t                            value: data , \n\t\t\t                            isArray : _.isArray(data)\n\t\t\t                        };\n\t\t\t                        v_filters.push( obj );\n\t\t\t                    });\n\t\t\t                    $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));\n\t\t\t                    if(false){\n\t\t\t                        //  tree deselect all\n\t\t\t                        var vJstreeList = [];\n\t\t\t                        $.each(v_filterPop ,function(k, v){\n\t\t\t                            var targetEl = findAllByElName( v_schema_search , function( _el){\n\t\t\t                                if ( _el.type == \"jsTreeSearch\"){\n\t\t\t                                    let _target = _.find(_el.relation.columns, function(col){\n\t\t\t                                        return col.childColumn.toUpperCase() ==  k.toUpperCase();\n\t\t\t                                    });\n\t\t\t                                    if( _target != null)\n\t\t\t                                        return true;\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t    \n\t\t\t                            if ( targetEl != null){\n\t\t\t                                if (targetEl.type == \"jsTreeSearch\"){\n\t\t\t                                    if( _.find(vJstreeList,{id : targetEl.id}) == null){\n\t\t\t                                        vJstreeList.push(targetEl);\n\t\t\t                                    }\n\t\t\t                                    targetEl.popValues.push(v);\n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        $.each(vJstreeList, function (i,tree) {  \n\t\t\t                            var vTree = $(\"#\" + tree.id ).jstree(true);\n\t\t\t                            vTree.deselect_all(true);\n\t\t\t                            vTree.select_node(tree.popValues.join(';;;'));\n\t\t\t                        });\n\t\t\t    \n\t\t\t                        $.each(v_filterPop ,function(k, v){\n\t\t\t                            var targetEl = findAllByElName( v_schema_search , function( _el){\n\t\t\t                                if( _el.type == \"multiCombo\"){\n\t\t\t                                    if( _el.jpa_column.child_column.toUpperCase() == k.toUpperCase())\n\t\t\t                                        return true;\n\t\t\t                                }else if ( _el.type == \"jsTreeSearch\"){\n\t\t\t                                    // let _target = _.find(_el.relation.columns, function(col){\n\t\t\t                                    //     return col.childColumn.toUpperCase() ==  k.toUpperCase();\n\t\t\t                                    // });\n\t\t\t                                    // if( _target != null)\n\t\t\t                                    //     return true;\n\t\t\t                                }else if ( _el.type == \"input\"){\n\t\t\t                                    if ( _el.columnName.toUpperCase() == k.toUpperCase() )\n\t\t\t                                        return true;\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t    \n\t\t\t                            if ( targetEl != null){\n\t\t\t                                if (targetEl.type == \"multiCombo\"){\n\t\t\t                                    // origin select\n\t\t\t                                    $(\"#\" + targetEl.id +\" option\").prop('selected',false);\n\t\t\t                                    $(\"#\" + targetEl.id +\" option[value='\"  + v + \"']\").prop('selected',true);\n\t\t\t                                    // // div view\n\t\t\t                                    // $(\"input[name=multiselect_\" + targetEl.name +\"]\").prop('checked',false);\n\t\t\t                                    // $(\"input[name=multiselect_\" + targetEl.name +\"] option[value=\"  + v + \"]\").prop('checked',true);\n\t\t\t                                    var mainControl = $(\"#\" + targetEl.id );\n\t\t\t                                    mainControl.multiselect('refresh');\n\t\t\t                                    mainControl.multiselect('widget').css(\"width\",\"400px\");\n\t\t\t                                    mainControl.multiselect('widget').find(\".ui-multiselect-filter input\").css(\"width\",\"150px\");\n\t\t\t    \n\t\t\t                                }else if (targetEl.type == \"jsTreeSearch\"){\n\t\t\t                                    // var vTree = $(\"#\" + targetEl.id ).jstree(true);\n\t\t\t                                    // // vTree.deselect_all(true);\n\t\t\t                                    // var seldata = _.find(vTree._model.data , function( data ){\n\t\t\t                                    //     if (data['original'] == null || data.original[\"field\"] == null)\n\t\t\t                                    //         return false;\n\t\t\t                                    //     var vOriginal = data['original'];\n\t\t\t                                    //     if ( vOriginal.field == k && vOriginal.value == v){\n\t\t\t                                    //         return true;\n\t\t\t                                    //     }\n\t\t\t                                    //     return false;\n\t\t\t    \n\t\t\t                                    // });\n\t\t\t                                    // if(seldata != null  && seldata.children != null && seldata.children.length == 0 )\n\t\t\t                                    //     vTree.select_node(seldata.id);\n\t\t\t    \n\t\t\t                                }else if (targetEl.type == \"input\"){\n\t\t\t                                    $(\"#\" + targetEl.id).val(v);\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            \n\t\t\t                            \n\t\t\t                        });\n\t\t\t                    }\n\t\t\t                    \n\t\t\t                }\n\t\t\t                \n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select_set\": function(){\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t                if($(\"#pop_select\").val() == \"\" )\n\t\t\t                    return;\n\t\t\t                var v_pop_select = JSON.parse($(\"#pop_select\").val());\n\t\t\t                if ( _.keys(v_pop_select).length == 0 )\n\t\t\t                    return;\n\t\t\t                if ( _.keys(v_pop_select.search_str_option).length == 0 )\n\t\t\t                    return;\n\t\t\t\n\t\t\t                // find grid\n\t\t\t                var v_grid_schema = findAllByElName(v_schema_content.elements , {type:\"grid\"});\n\t\t\t                if ( v_grid_schema  == null)\n\t\t\t                    return;\n\t\t\t                \n\t\t\t                // rules Array  2020.01.03\n\t\t\t                v_rules =[];\n\t\t\t                if (typeof v_pop_select.search_str_option.search_field == \"string\"){\n\t\t\t                    // find item\n\t\t\t                    var v_item = _.find(v_grid_schema.items , {name : v_pop_select.search_str_option.search_field});\n\t\t\t                    if (v_item == null)\n\t\t\t                        return;\n\t\t\t                    /**********************************************/\n\t\t\t                    /****  For Item setting filter initialtext ****/\n\t\t\t                    /**********************************************/\n\t\t\t                    // set searchoptions.defaultValue\n\t\t\t                    var v_item_to_merge = {\n\t\t\t                        searchoptions : {\n\t\t\t                            searchOperMenu: true,\n\t\t\t                            defaultValue: '' + v_pop_select.search_str_option.search_value\n\t\t\t                            //  defaultValue: '^' + v_pop_select.search_str_option.search_value\n\t\t\t                        }\t\t\t\t\t\t\t\t\n\t\t\t                    };\n\t\t\t                    _.merge(v_item, v_item_to_merge);\n\t\t\t                    /**********************************************/\n\t\t\t                    /****  For Grid Setting postData.filers *******/\n\t\t\t                    /**********************************************/\n\t\t\t                    v_rules.push(\n\t\t\t                        {\n\t\t\t                            field : v_pop_select.search_str_option.search_field,\n\t\t\t                            op: \"cn\",\n\t\t\t                            data : '^' + v_pop_select.search_str_option.search_value\n\t\t\t                        }\n\t\t\t                    );\n\t\t\t                }else if ( _.isArray(v_pop_select.search_str_option.search_field)){\n\t\t\t                    \n\t\t\t                    $.each(v_pop_select.search_str_option.search_field , function(i,search_field){\n\t\t\t                        \n\t\t\t                        if ( search_field.value != null && search_field.value.length > 0){\n\t\t\t                            /**********************************************/\n\t\t\t                            /****  For Item setting filter initialtext ****/\n\t\t\t                            /**********************************************/\n\t\t\t                            // set searchoptions.defaultValue\n\t\t\t                            var v_item = _.find(v_grid_schema.items , {name : search_field.target });\n\t\t\t                            if ( v_item == null )\n\t\t\t                                return true;\n\t\t\t                            var v_item_to_merge = {\n\t\t\t                                searchoptions : {\n\t\t\t                                    searchOperMenu: true,\n\t\t\t                                    defaultValue: '^' + search_field.value\n\t\t\t                                    //  defaultValue: '^' + v_pop_select.search_str_option.search_value\n\t\t\t                                }\t\t\t\t\t\t\t\t\n\t\t\t                            };\n\t\t\t                            _.merge(v_item, v_item_to_merge);\n\t\t\t\n\t\t\t                            /**********************************************/\n\t\t\t                            /****  For Grid Setting postData.filers *******/\n\t\t\t                            /**********************************************/\n\t\t\t                            \n\t\t\t                            v_rules.push(\n\t\t\t                                {\n\t\t\t                                    field : search_field.target,\n\t\t\t                                    op: \"cn\",\n\t\t\t                                    // data : '^' + v_pop_select.search_str_option.search_value\n\t\t\t                                    data : '^' + search_field.value\n\t\t\t                                }\n\t\t\t                            );\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    });\n\t\t\t                }else{\n\t\t\t                    return;\n\t\t\t                }\n\t\t\t                    \n\t\t\t                var v_filters = {\n\t\t\t                    groupOp : \"AND\",\n\t\t\t                    rules : v_rules\n\t\t\t                };\n\t\t\t                \n\t\t\t\n\t\t\t\n\t\t\t                var v_grid_to_merge = {\n\t\t\t                    postData : {\n\t\t\t                        filters : JSON.stringify(v_filters)\n\t\t\t                    }\n\t\t\t                };\n\t\t\t                _.merge(v_grid_schema.gridOpt, v_grid_to_merge);\n\t\t\t\n\t\t\t\n\t\t\t            }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmCd.cmmCd\",",
					"\t\t\t\"fn_view_detail\": function(_type){\n\t\t\t                var pageBody = parent.$(\"body\");\n\t\t\t                if (pageBody.length == 0)\n\t\t\t\t\t\t\t\tpageBody = parent.parent.$(\"body\");\n\t\t\t                // var modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t                // if (modalCommon.length == 0 ){\n\t\t\t                //     modalCommon = parent.parent.$(\"[name=infiniteLogModal]\");\n\t\t\t                // }\n\t\t\t                var parent_str = \"parent\";\n\t\t\t                var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t                while(modalCommon.length ==0){\n\t\t\t                    parent_str += \".parent\";\n\t\t\t                    modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t                    pageBody = eval(parent_str + \".$('body')\");\n\t\t\t                }\n\t\t\t                \n\t\t\t                var modalClone = modalCommon.clone();\n\t\t\t                pageBody.append(modalClone);\n\t\t\t                modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\n\t\t\t                var today = new Date();\n\t\t\t                var y = today.getFullYear();\n\t\t\t                var m = today.getMonth() + 1;\n\t\t\t                var d = today.getDate();\n\t\t\t                var h = today.getHours();\n\t\t\t                var mi = today.getMinutes();\n\t\t\t                var s = today.getSeconds();\n\t\t\t                var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t                var modalId = \"modal_\" + idPrefix;\n\t\t\t                var frameId = \"frame_\" + idPrefix;\n\t\t\t                modalClone.attr(\"id\",modalId);\n\t\t\t                modalClone.attr(\"name\",modalId);\n\t\t\t\n\t\t\t                var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t                frameDom.attr(\"id\", frameId);\n\t\t\t                frameDom.attr(\"name\", frameId);\n\t\t\t\n\t\t\t                var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t                container.append(frameDom);\n\t\t\t\n\t\t\t                // Form Submit\n\t\t\t                var oFrm = document.getElementById(\"form\");\n\t\t\t                var filter = {};\n\t\t\t                var theGrid = $(this).jqGrid();\n\t\t\t                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');\n\t\t\t                var row = theGrid.getRowData(parentRowKey);\n\t\t\t                var entityId = theGrid.jqGrid('getGridParam','entityId');\n\t\t\t                $.each(gridProperties , function(i,prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if(vId != null){\n\t\t\t                        filter[prop._name.toUpperCase()] = row[prop._name.toUpperCase()];\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\n\t\t\t                var viewName = $(\"#viewName\").val();\n\t\t\t                var viewPath = viewName.split(\"/\");\n\t\t\t                var itemName = viewPath.pop();\n\t\t\t                oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \".\" + _type + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t                // oFrm.action =  \"${pageContext.request.contextPath}/generic.do?viewName=common/commonDetail\";\n\t\t\t                $(\"#detailSqlId\").val(\"cmmCd.cmmCd.one\");\n\t\t\t                $(\"#detailSqlUpdateId\").val(\"cmmCd.cmmCd.edit\");\n\t\t\t                $(\"#detailType\").val(_type);\n\t\t\t                // $(\"#frameName\").val( 'frame_' +  _.camelCase( entityId ));\n\t\t\t                // $(\"#frameName\").val( window.frameElement.name );\n\t\t\t                var parentFrameName = \"${param.frameName}\";\n\t\t\t                if ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t                    $(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t                }else {\n\t\t\t                    $(\"#frameName\").val( window.frameElement.name );\n\t\t\t                }\n\t\t\t                oFrm.method = \"post\";\n\t\t\t                oFrm.target = frameId;\n\t\t\t                frameDom.show();\n\t\t\t                // Header\n\t\t\t                var filterStrs = [];\n\t\t\t                $.each(filter,function(k,v){\n\t\t\t                    var str = _.camelCase(k);\n\t\t\t                    str += \" : \" + v;\n\t\t\t                    filterStrs.push(str);\n\t\t\t                });\n\t\t\t                \n\t\t\t                var headStr = '[' + _.camelCase( entityId ) + ' ' +  _.upperCase(_type) + ' ]  '\n\t\t\t                if ( _type != \"add\" ) \n\t\t\t                    headStr += filterStrs.join(\" , \");\t\t\t\n\t\t\t\n\t\t\t                modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t                modalClone.modal();\n\t\t\t                // parent.$(\"#\"+modalId).modal();\n\t\t\t                modalClone.draggable({\n\t\t\t                    handle: \".modal-header\"\n\t\t\t                }); \n\t\t\t                oFrm.submit();\n\t\t\t            },\n",
					"\t\t\t\"fn_grid_option\": function(){\n\t\t\t                var is_pop_select = \"${param.is_pop_select}\";\n\t\t\t                var is_pop = \"${param.isPop}\";\n\t\t\t                var is_sub_frame = \"${param.isSubFrame}\";\n\t\t\t\n\t\t\t                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});\n\t\t\t                \n\t\t\t                if ( is_sub_frame ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 210;\n\t\t\t                    grid_shema.gridOpt.rowNum = 5;\n\t\t\t                }else if ( is_pop_select ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 420;\n\t\t\t                    grid_shema.gridOpt.rowNum = 15;\n\t\t\t                }else if ( is_pop ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 420;\n\t\t\t                    grid_shema.gridOpt.rowNum = 15;\n\t\t\t                }else {\n\t\t\t                    grid_shema.gridOpt.height = 650;\n\t\t\t                    grid_shema.gridOpt.rowNum = 20;\n\t\t\t                }\n\t\t\t            },\n",
					"\t\t\t\"fn_add_button_select_in_grid\": function(){\n\t\t\t                var is_pop_select = \"${param.is_pop_select}\";\n\t\t\t                if (is_pop_select != \"Y\")\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar item = {\n\t\t\t\t\t\t\t\t\"label\": \" \",\n\t\t\t\t\t\t\t\t\"name\": \"SELECT_BUTTON\",\n\t\t\t\t\t\t\t\t\"id\": \"SELECT_BUTTON\",\n\t\t\t\t\t\t\t\t\"align\": \"center\",\n\t\t\t\t\t\t\t\t\"width\": 45,\n\t\t\t\t\t\t\t\tsearch : false ,\n\t\t\t\t\t\t\t\t\"formatter\": function(cellValue, options, rowObject){\n\t\t\t\t\t\t\t\t\tvar btnHtml = '<button type=\"button\" class=\"btn btn-warning btn-xs\" style=\"line-height:1\" onclick=\"commonFunc.fn_select_for_parentframe(\\''+ options.rowId +'\\');\">Select</button>';\n\t\t\t\t\t\t\t\t\treturn btnHtml;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tvar grid_schema = findAllByElName(v_schema_content.elements , {type:'grid'});\n\t\t\t\t\t\t\tif (grid_schema != null){\n\t\t\t\t\t\t\t\tgrid_schema.items.push(item);\n\t\t\t\t\t\t\t}\n\t\t\t            },\n",
					"\t\t\t\"fn_select_for_parentframe\": function(_rowid){\n\t\t\t                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});\n\t\t\t                var theGrid = $(\"#\" + grid_shema.id).jqGrid();\n\t\t\t    \n\t\t\t                var row = theGrid.getRowData(_rowid);\n\t\t\t                var v_react_target = parentFrame.commonFunc.pop_select_react_object ;\n\t\t\t                var col = v_react_target.dataSrc.parentColumnName.toUpperCase() ;\n\t\t\t                \n\t\t\t                v_react_target.setState({value :row[col] });\n\t\t\t                \n\t\t\t                // search_str : expression\t\n\t\t\t                if($(\"#pop_select\").val() != \"\" ){\n\t\t\t                    var v_pop_select = JSON.parse($(\"#pop_select\").val());\n\t\t\t                    if ( _.keys(v_pop_select).length > 0 ){\n\t\t\t                        if ( _.keys(v_pop_select.search_str_option).length > 0 ){\n\t\t\t                            if (v_pop_select.search_str_option.expression != null){\n\t\t\t                                if (v_pop_select.search_str_option.expression != \"\"){\n\t\t\t                                    v_react_target.setState({search_str : eval(v_pop_select.search_str_option.expression) });\n\t\t\t                                    \n\t\t\t                                    // search_str : addtional field update\n\t\t\t                                    if (v_pop_select.search_str_option.additional_update_field != null){\n\t\t\t                                        $.each(v_pop_select.search_str_option.additional_update_field, function(k,v){\n\t\t\t                                            var v_addtional_target = _.find(v_react_target.reactObjects,{state: {name : k}});\n\t\t\t                                            if(v_addtional_target != null)\n\t\t\t                                                v_addtional_target.setState({value: row[v]});\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                    \n\t\t\t    \n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                    }\n\t\t\t                }\n\t\t\t                parentFrame.commonFunc.fn_pop_select_callback();\n\t\t\t                // parentFrame.commonFunc.fn_view_sub();\n\t\t\t    \n\t\t\t                // window close\n\t\t\t                setTimeout( function(){\n\t\t\t                    // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                    parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                },0);\n\t\t\t    \n\t\t\t            }\n",
					"\t\t};",
					"\t\tcommonFunc.fn_grid_option();",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\tcommonFunc.fn_add_button_select_in_grid();",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t$('#v_schema_searchContainer').html('')",
					"\t\t\t\tif($(\"#filterPop\").val() == \"\" ){",
					"\t\t\t\t\tfn_makeHtml('v_schema_searchContainer',v_schema_search);",
					"\t\t\t\t}",
					"\t\t\t\telse{",
					"\t\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t\tpopParemeters.fn_pop_select_set();",
					"\t\t\t\t\tfindAll(\"cmmCdGrid\",v_schema_content.elements)[0].label = \"\";",
					"\t\t\t\t}",
					"\t\t\t\t$('#v_schema_contentContainer').html('')",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema_content);",
					"\t\t\t\t$.contextMenu(",
					"\t\t\t\t\t{",
					"\t\t\t\t\t\t\"selector\": \".jqgrow td.contextMenu\",",
					"\t\t\t\t\t\t\"trigger\": \"left\",",
					"\t\t\t\t\t\t\"build\": function($trigger) {\n\t\t\t\t\t\t            var options = {\n\t\t\t\t\t\t                callback: function(key, options) {\n\t\t\t\t\t\t                    // var m = \"clicked: \" + key;\n\t\t\t\t\t\t                    // window.console && console.log(m) || alert(m);\n\t\t\t\t\t\t                    options.items[key].callback.call(this,key,options);\n\t\t\t\t\t\t                },\n\t\t\t\t\t\t                items: {}\n\t\t\t\t\t\t\n\t\t\t\t\t\t            };\n\t\t\t\t\t\t\n\t\t\t\t\t\t            // if ($trigger.hasClass('something')) {\n\t\t\t\t\t\t            // \toptions.items.foo = {name: \"foo\"};\n\t\t\t\t\t\t            // } else {\n\t\t\t\t\t\t            //     options.items.bar = {name: \"bar\"};\n\t\t\t\t\t\t            // }\n\t\t\t\t\t\t            var columnName = $trigger.attr(\"columnName\");\n\t\t\t\t\t\t            if (columnName == null)\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            var gridId = $trigger.attr(\"gridId\");\n\t\t\t\t\t\t            var grid = $(\"#\"+gridId).jqGrid();\n\t\t\t\t\t\t            var rowId = $trigger.parent().attr(\"id\");\n\t\t\t\t\t\t            var rowData = grid.getRowData(rowId);\n\t\t\t\t\t\t            var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t            var cms = vGridOpt.colModel;\n\t\t\t\t\t\t            var cm = _.find(cms, {name: $trigger.attr(\"columnName\")} );\n\t\t\t\t\t\t            // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t            // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t            \n\t\t\t\t\t\t            // parents\n\t\t\t\t\t\t            var hasParents = false;\n\t\t\t\t\t\t            var parents = [];\n\t\t\t\t\t\t            if ( cm.referenceId != null){\n\t\t\t\t\t\t                \n\t\t\t\t\t\t                var src = _.find(dataSrc, {\"referenceId\": cm.referenceId , \"topRefrenceId\" : cm.topRefrenceId  });\n\t\t\t\t\t\t                // if ( _.includes(_.map(src.childColumnNames, function( _name ){  return _name.toUpperCase(); } ), cm.name.toUpperCase()) ) {\n\t\t\t\t\t\t                var itemName = _.camelCase(src.parentEntity);\n\t\t\t\t\t\t                options.items[itemName] = {\n\t\t\t\t\t\t                    name: \"Parents: \" + itemName ,\n\t\t\t\t\t\t                    callback : function(key, options){\n\t\t\t\t\t\t                        var m = \"clicked: \" + key + \", data: \" + $(this).text();\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Modal Pop\n\t\t\t\t\t\t                        if(true){\n\t\t\t\t\t\t                            var pageBody = parent.$(\"body\");\n\t\t\t\t\t\t                            var modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t                            var parent_str = \"parent\";\n\t\t\t\t\t\t                            var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                            while(modalCommon.length ==0){\n\t\t\t\t\t\t                                parent_str += \".parent\";\n\t\t\t\t\t\t                                modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                                pageBody = eval(parent_str + \".$('body')\");\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                            // var modalClone = $(modalCommon.html());\n\t\t\t\t\t\t                            var modalClone = modalCommon.clone();\n\t\t\t\t\t\t                            pageBody.append(modalClone);\n\t\t\t\t\t\t                            modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var today = new Date();\n\t\t\t\t\t\t                            var y = today.getFullYear();\n\t\t\t\t\t\t                            var m = today.getMonth() + 1;\n\t\t\t\t\t\t                            var d = today.getDate();\n\t\t\t\t\t\t                            var h = today.getHours();\n\t\t\t\t\t\t                            var mi = today.getMinutes();\n\t\t\t\t\t\t                            var s = today.getSeconds();\n\t\t\t\t\t\t                            var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t                            var modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t                            var frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t                            modalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t                            modalClone.attr(\"name\",modalId);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t                            frameDom.attr(\"id\", frameId);\n\t\t\t\t\t\t                            frameDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t                            container.append(frameDom);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // Form Submit\n\t\t\t\t\t\t                            var oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t                            var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                            var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                            viewPath.pop();\n\t\t\t\t\t\t                            var filter = {};\n\t\t\t\t\t\t                            $.each(src.childColumnNames , function(i,column){\n\t\t\t\t\t\t                                var parentColumn = src.parentColumnNames[i];\n\t\t\t\t\t\t                                if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                    filter[parentColumn.toUpperCase()] = rowData[column.toUpperCase()];\n\t\t\t\t\t\t                                // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                            oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = frameId;\n\t\t\t\t\t\t                            frameDom.show();\n\t\t\t\t\t\t                            // Header\n\t\t\t\t\t\t                            var filterStrs = [];\n\t\t\t\t\t\t                            $.each(filter,function(k,v){\n\t\t\t\t\t\t                                var str = _.camelCase(k);\n\t\t\t\t\t\t                                str += \" : \" + v;\n\t\t\t\t\t\t                                filterStrs.push(str);\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            var headStr = '[' + itemName + ']  ' +  filterStrs.join(\" , \");\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.modal();\n\t\t\t\t\t\t                            // parent.$(\"#\"+modalId).modal();\n\t\t\t\t\t\t                            modalClone.draggable({\n\t\t\t\t\t\t                                handle: \".modal-header\"\n\t\t\t\t\t\t                            }); \n\t\t\t\t\t\t                            oFrm.submit();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        return; \n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Window Pop\n\t\t\t\t\t\t                        // console.log(m);\n\t\t\t\t\t\t                        var windowName = \"Parents: \" + itemName;\n\t\t\t\t\t\t                        var newWin1 = window.open(\"\", windowName , \"width=1000,height=750, screenY=\" + event.screenY + \", top=\" + event.screenY + \", screenX=\" + event.screenX + \",left=\" + (event.screenX + 0) + \", scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                        var oFrm = document.getElementById(\"form\");\t\n\t\t\t\t\t\t                        var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                        var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                        viewPath.pop();\n\t\t\t\t\t\t                        var filter = {};\n\t\t\t\t\t\t                        // // filter[cm.name] = $(this).text() ;\n\t\t\t\t\t\t                        // var referece = _.find([].concat(src.parentEntity.references ), {\"xmi:id\": cm.referenceId });\n\t\t\t\t\t\t                        // var child_columns_detail = _.find(reference.eAnnotations.details, { \"_key\": \"child_columns\" });\n\t\t\t\t\t\t                        // var child_columns = child_columns_detail._value.split(\",\");\n\t\t\t\t\t\t                        $.each(src.childColumnNames , function(i,column){\n\t\t\t\t\t\t                            var parentColumn = src.parentColumnNames[i];\n\t\t\t\t\t\t                            if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                filter[parentColumn.toUpperCase()] = rowData[column.toUpperCase()];\n\t\t\t\t\t\t                            // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                        oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";\n\t\t\t\t\t\t                        oFrm.method = \"post\";\n\t\t\t\t\t\t                        oFrm.target = windowName; \n\t\t\t\t\t\t                        oFrm.submit();\t\t\n\t\t\t\t\t\t                        newWin1.focus();\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                };\n\t\t\t\t\t\t                hasParents = true;\n\t\t\t\t\t\t                // }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            // children\n\t\t\t\t\t\t            var hasChildrens = false;\n\t\t\t\t\t\t            var childrens = childReferences;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            $.each(childrens , function(i,child){\n\t\t\t\t\t\t                var child_columns = child.child_columns;\n\t\t\t\t\t\t                var parent_columns = child.parent_columns;\n\t\t\t\t\t\t                var child_columns_index = _.indexOf(child.parent_columns, cm.name.toLowerCase());\n\t\t\t\t\t\t                if (child_columns_index == -1)\n\t\t\t\t\t\t                    return false;\n\t\t\t\t\t\t                var itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t                options.items[itemName] = {\n\t\t\t\t\t\t                    name: \"Child: \" + itemName ,\n\t\t\t\t\t\t                    callback : function(key, options){\n\t\t\t\t\t\t                        // var m = \"clicked: \" + key + \", data: \" + $(this).text();\n\t\t\t\t\t\t                        // console.log(m);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Modal Pop\n\t\t\t\t\t\t                        if(true){\n\t\t\t\t\t\t                            var pageBody = parent.$(\"body\");\n\t\t\t\t\t\t                            var modalCommon = parent.$(\"[name=infiniteLogModal]\");                            \n\t\t\t\t\t\t                            var parent_str = \"parent\";\n\t\t\t\t\t\t                            var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                            while(modalCommon.length ==0){\n\t\t\t\t\t\t                                parent_str += \".parent\";\n\t\t\t\t\t\t                                modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                                pageBody = eval(parent_str + \".$('body')\");\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // var modalClone = $(modalCommon.html());\n\t\t\t\t\t\t                            var modalClone = modalCommon.clone();\n\t\t\t\t\t\t                            pageBody.append(modalClone);\n\t\t\t\t\t\t                            modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var today = new Date();\n\t\t\t\t\t\t                            var y = today.getFullYear();\n\t\t\t\t\t\t                            var m = today.getMonth() + 1;\n\t\t\t\t\t\t                            var d = today.getDate();\n\t\t\t\t\t\t                            var h = today.getHours();\n\t\t\t\t\t\t                            var mi = today.getMinutes();\n\t\t\t\t\t\t                            var s = today.getSeconds();\n\t\t\t\t\t\t                            var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t                            var modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t                            var frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t                            modalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t                            modalClone.attr(\"name\",modalId);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t                            frameDom.attr(\"id\", frameId);\n\t\t\t\t\t\t                            frameDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t                            container.append(frameDom);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // Form Submit\n\t\t\t\t\t\t                            var oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t                            var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                            var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                            viewPath.pop();\n\t\t\t\t\t\t                            var filter = {};\n\t\t\t\t\t\t                            $.each(child_columns , function(i,column){\n\t\t\t\t\t\t                                var parentColumn = parent_columns[i];\n\t\t\t\t\t\t                                if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                    filter[column.toUpperCase()] = rowData[parentColumn.toUpperCase()];\n\t\t\t\t\t\t                                // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                            oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = frameId;\n\t\t\t\t\t\t                            frameDom.show();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            // Header\n\t\t\t\t\t\t                            var filterStrs = [];\n\t\t\t\t\t\t                            $.each(filter,function(k,v){\n\t\t\t\t\t\t                                var str = _.camelCase(k);\n\t\t\t\t\t\t                                str += \" : \" + v;\n\t\t\t\t\t\t                                filterStrs.push(str);\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            var headStr = '[' + itemName + ']  ' +  filterStrs.join(\" , \");\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.modal();\n\t\t\t\t\t\t                            // parent.$(\"#\"+modalId).modal();\n\t\t\t\t\t\t                            modalClone.draggable({\n\t\t\t\t\t\t                                handle: \".modal-header\"\n\t\t\t\t\t\t                            }); \n\t\t\t\t\t\t                            oFrm.submit();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        return ;\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Window Pop\n\t\t\t\t\t\t                        var windowName = \"Child: \" + itemName;\n\t\t\t\t\t\t                        var newWin1 = window.open(\"\", windowName , \"width=1000,height=750, screenY=\" + event.screenY + \", top=\" + event.screenY + \", screenX=\" + event.screenX + \",left=\" + (event.screenX + 0) + \", scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                        var oFrm = document.getElementById(\"form\");\t\n\t\t\t\t\t\t                        var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                        var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                        viewPath.pop();\n\t\t\t\t\t\t                        var filter = {};\n\t\t\t\t\t\t                        // filter[cm.name] = $(this).text() ;\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        $.each(child_columns , function(i,column){\n\t\t\t\t\t\t                            var parentColumn = parent_columns[i];\n\t\t\t\t\t\t                            if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                filter[column.toUpperCase()] = rowData[parentColumn.toUpperCase()];\n\t\t\t\t\t\t                            // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                        oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName;\n\t\t\t\t\t\t                        oFrm.method = \"post\";\n\t\t\t\t\t\t                        oFrm.target = windowName; \n\t\t\t\t\t\t                        oFrm.submit();\t\t\n\t\t\t\t\t\t                        newWin1.focus();\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                };\n\t\t\t\t\t\t                hasChildrens = true;\n\t\t\t\t\t\t                \n\t\t\t\t\t\t                \n\t\t\t\t\t\t            });\n\t\t\t\t\t\t            \n\t\t\t\t\t\t            if ( !hasParents && !hasChildrens )\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            if ( _.keys(options.items).length == 1 ){\n\t\t\t\t\t\t                options.items[_.keys(options.items)[0]].callback();\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            return options;\n\t\t\t\t\t\t            // return false; \n\t\t\t\t\t\t        }\n",
					"\t\t\t\t\t}",
					"\t\t\t\t);",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t\tfunction fn_search(){",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\tvar theGrid = $(\"#cmmCdGrid\").jqGrid();",
					"\t\t\t\ttheGrid.trigger('reloadGrid',[{page:1}]);",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t}",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailSqlId\" name=\"detailSqlId\" value=\"\"/>",
					"<input type=\"hidden\" id=\"detailSqlUpdateId\" name=\"detailSqlUpdateId\" value=\"\"/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value=\"\"/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value=\"${param.frameName}\"/>",
					"<input type=\"hidden\" id=\"isSubFrame\" name=\"isSubFrame\" value=\"${param.isSubFrame}\"/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"content_container srch_box2\" style=\"margin-top: 3px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"content_container\" style=\"margin-top: 3px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"parentEntityName": "cmm_cd",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"code_category"
						],
						"child_columns": [
							"code_category"
						]
					}
				],
				"dictionaries": [
					{
						"entityName": "cmm_cd",
						"sqlId": "cmmCd.dictionary.cmmCd",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"jstreeInfo": {
					"idList": [],
					"search": function(){
					                var _this = this;
					                if (_this.idList.length == 0)
					                    return;
					                var selJsTree3 = [];
					                $.each(_this.idList, function(i,vJsTreeId){
					                    var vJsTree = $("#" + vJsTreeId ).jstree(true);
					                    // var selJsTree = _.filter(vJsTree._model.data , {state : {selected: true } });
					                    var selJsTree = _.filter(vJsTree._model.data , function( data ){
					                        // if (data.id == "#")
					                        // 	return false;
					                        if (data['original'] == null || data.original["field"] == null)
					                            return false;
					                        if ( data.state.selected == null ) 
					                            return false;
					                        var vSelected = data.state.selected;
					                        if ( vSelected)
					                            return true;
					                        $.each(vJsTree.get_node(data.id).children_d, function(i, nodeId){
					                            var vNode = vJsTree.get_node(nodeId);
					                            if ( vNode.state.selected) {
					                                vSelected = true;
					                                return false;
					                            }
					                        });
					                        // if ( vJsTree.get_bottom_checked(data.id).length > 0 )
					                        // 	return true;
					
					                        return vSelected;
					
					                    });
					                    var selJsTree1 = _.map(selJsTree, function(data, i){
					                        var obj = {};
					
					                        // // Customize if field is different with Original field
					                        // var _datas = data.id.split(";;;");
					                        // var _col = _datas[1];
					                        // if ( _col != null && data.original.field != 'GUBUN' ){
					                        //     var _cols = _col.split("/");
					                        //     var textIndex = _.findIndex(_datas.slice(2), function(o) { return o == data.text; });
					                        //     var keyIndex   = textIndex - 0;
					                        //     var _field = _cols[keyIndex];
					                        //     if ( _field == null) 
					                        //         debugger;
					                        //     var _field1 = decamelize(_field,'_')
					                        //     obj[ _field1.toUpperCase() ] = data.text; 
					                        // }else{
					                        //     // obj[_.camelCase(data.original.field)] = data.text;
					                        //     obj[ data.original.field] = data.text;
					                        // }
					                        obj[ data.original.field] = data.original.value;
					
					                        return obj;
					
					                    });
					                    var selJsTree2 = serializeArrayJSON(selJsTree1);
					                    
					                    $.each(selJsTree2, function(field, data){
					                        var obj = {
					                            field : field ,
					                            // value: [].concat(data)
					                            value: data , 
					                            isArray : _.isArray(data)
					                        };
					                        selJsTree3.push( obj );
					                    });
					                    
					                });
					                $("#searchJson").val(JSON.stringify({fields: selJsTree3}));
					                // var parameter = $("#form").serializeFormJSON();
					                // var removedList = _.remove(selJsTree3,{field:'GUBUN'} );
					            }

				},
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "cmmCd"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmCd.cmmCd",
					"fn_view_detail": function(_type){
					                var pageBody = parent.$("body");
					                if (pageBody.length == 0)
										pageBody = parent.parent.$("body");
					                // var modalCommon = parent.$("[name=infiniteLogModal]");
					                // if (modalCommon.length == 0 ){
					                //     modalCommon = parent.parent.$("[name=infiniteLogModal]");
					                // }
					                var parent_str = "parent";
					                var modalCommon = eval(parent_str + ".$('[name=infiniteLogModal]')");
					                while(modalCommon.length ==0){
					                    parent_str += ".parent";
					                    modalCommon = eval(parent_str + ".$('[name=infiniteLogModal]')");
					                    pageBody = eval(parent_str + ".$('body')");
					                }
					                
					                var modalClone = modalCommon.clone();
					                pageBody.append(modalClone);
					                modalClone.attr("isCloned","true");
					
					                var today = new Date();
					                var y = today.getFullYear();
					                var m = today.getMonth() + 1;
					                var d = today.getDate();
					                var h = today.getHours();
					                var mi = today.getMinutes();
					                var s = today.getSeconds();
					                var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
					                var modalId = "modal_" + idPrefix;
					                var frameId = "frame_" + idPrefix;
					                modalClone.attr("id",modalId);
					                modalClone.attr("name",modalId);
					
					                var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
					                frameDom.attr("id", frameId);
					                frameDom.attr("name", frameId);
					
					                var container = modalClone.find(".infiniteLogContainer");
					                container.append(frameDom);
					
					                // Form Submit
					                var oFrm = document.getElementById("form");
					                var filter = {};
					                var theGrid = $(this).jqGrid();
					                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');
					                var row = theGrid.getRowData(parentRowKey);
					                var entityId = theGrid.jqGrid('getGridParam','entityId');
					                $.each(gridProperties , function(i,prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if(vId != null){
					                        filter[prop._name.toUpperCase()] = row[prop._name.toUpperCase()];
					                    }
					                });
					                $("#filterPop").val(JSON.stringify(filter));
					
					                var viewName = $("#viewName").val();
					                var viewPath = viewName.split("/");
					                var itemName = viewPath.pop();
					                oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "." + _type + "&backgroundColor=FFF&isPop=Y";;
					                // oFrm.action =  "${pageContext.request.contextPath}/generic.do?viewName=common/commonDetail";
					                $("#detailSqlId").val("cmmCd.cmmCd.one");
					                $("#detailSqlUpdateId").val("cmmCd.cmmCd.edit");
					                $("#detailType").val(_type);
					                // $("#frameName").val( 'frame_' +  _.camelCase( entityId ));
					                // $("#frameName").val( window.frameElement.name );
					                var parentFrameName = "${param.frameName}";
					                if ( _.startsWith( parentFrameName,"frame") ){						
					                    $("#frameName").val( parentFrameName + "." + window.frameElement.name );
					                }else {
					                    $("#frameName").val( window.frameElement.name );
					                }
					                oFrm.method = "post";
					                oFrm.target = frameId;
					                frameDom.show();
					                // Header
					                var filterStrs = [];
					                $.each(filter,function(k,v){
					                    var str = _.camelCase(k);
					                    str += " : " + v;
					                    filterStrs.push(str);
					                });
					                
					                var headStr = '[' + _.camelCase( entityId ) + ' ' +  _.upperCase(_type) + ' ]  '
					                if ( _type != "add" ) 
					                    headStr += filterStrs.join(" , ");			
					
					                modalClone.find(".modal-header h6 span").text(headStr);
					                modalClone.modal();
					                // parent.$("#"+modalId).modal();
					                modalClone.draggable({
					                    handle: ".modal-header"
					                }); 
					                oFrm.submit();
					            },

					"fn_grid_option": function(){
					                var is_pop_select = "${param.is_pop_select}";
					                var is_pop = "${param.isPop}";
					                var is_sub_frame = "${param.isSubFrame}";
					
					                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});
					                
					                if ( is_sub_frame ==  "Y"){
					                    grid_shema.gridOpt.height = 210;
					                    grid_shema.gridOpt.rowNum = 5;
					                }else if ( is_pop_select ==  "Y"){
					                    grid_shema.gridOpt.height = 420;
					                    grid_shema.gridOpt.rowNum = 15;
					                }else if ( is_pop ==  "Y"){
					                    grid_shema.gridOpt.height = 420;
					                    grid_shema.gridOpt.rowNum = 15;
					                }else {
					                    grid_shema.gridOpt.height = 650;
					                    grid_shema.gridOpt.rowNum = 20;
					                }
					            },

					"fn_add_button_select_in_grid": function(){
					                var is_pop_select = "${param.is_pop_select}";
					                if (is_pop_select != "Y")
										return;
									
									var item = {
										"label": " ",
										"name": "SELECT_BUTTON",
										"id": "SELECT_BUTTON",
										"align": "center",
										"width": 45,
										search : false ,
										"formatter": function(cellValue, options, rowObject){
											var btnHtml = '<button type="button" class="btn btn-warning btn-xs" style="line-height:1" onclick="commonFunc.fn_select_for_parentframe(\''+ options.rowId +'\');">Select</button>';
											return btnHtml;
										}
									};
									var grid_schema = findAllByElName(v_schema_content.elements , {type:'grid'});
									if (grid_schema != null){
										grid_schema.items.push(item);
									}
					            },

					"fn_select_for_parentframe": function(_rowid){
					                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});
					                var theGrid = $("#" + grid_shema.id).jqGrid();
					    
					                var row = theGrid.getRowData(_rowid);
					                var v_react_target = parentFrame.commonFunc.pop_select_react_object ;
					                var col = v_react_target.dataSrc.parentColumnName.toUpperCase() ;
					                
					                v_react_target.setState({value :row[col] });
					                
					                // search_str : expression	
					                if($("#pop_select").val() != "" ){
					                    var v_pop_select = JSON.parse($("#pop_select").val());
					                    if ( _.keys(v_pop_select).length > 0 ){
					                        if ( _.keys(v_pop_select.search_str_option).length > 0 ){
					                            if (v_pop_select.search_str_option.expression != null){
					                                if (v_pop_select.search_str_option.expression != ""){
					                                    v_react_target.setState({search_str : eval(v_pop_select.search_str_option.expression) });
					                                    
					                                    // search_str : addtional field update
					                                    if (v_pop_select.search_str_option.additional_update_field != null){
					                                        $.each(v_pop_select.search_str_option.additional_update_field, function(k,v){
					                                            var v_addtional_target = _.find(v_react_target.reactObjects,{state: {name : k}});
					                                            if(v_addtional_target != null)
					                                                v_addtional_target.setState({value: row[v]});
					                                        });
					                                    }
					                                    
					    
					                                }
					                            }
					                        }
					                    }
					                }
					                parentFrame.commonFunc.fn_pop_select_callback();
					                // parentFrame.commonFunc.fn_view_sub();
					    
					                // window close
					                setTimeout( function(){
					                    // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                    parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                },0);
					    
					            }

				},
				"popParemeters": {
					"fn_set": function(){
					                if($("#filterPop").val() != "" ){
					                    v_filterPop = JSON.parse($("#filterPop").val());
					                    var v_filters = [];
					                    $.each(v_filterPop ,function(field, data){
					                        var obj = {
					                            field : field ,
					                            // value: [].concat(data)
					                            value: data , 
					                            isArray : _.isArray(data)
					                        };
					                        v_filters.push( obj );
					                    });
					                    $("#searchJson").val(JSON.stringify({fields: v_filters}));
					                    if(false){
					                        //  tree deselect all
					                        var vJstreeList = [];
					                        $.each(v_filterPop ,function(k, v){
					                            var targetEl = findAllByElName( v_schema_search , function( _el){
					                                if ( _el.type == "jsTreeSearch"){
					                                    let _target = _.find(_el.relation.columns, function(col){
					                                        return col.childColumn.toUpperCase() ==  k.toUpperCase();
					                                    });
					                                    if( _target != null)
					                                        return true;
					                                }
					                            });
					    
					                            if ( targetEl != null){
					                                if (targetEl.type == "jsTreeSearch"){
					                                    if( _.find(vJstreeList,{id : targetEl.id}) == null){
					                                        vJstreeList.push(targetEl);
					                                    }
					                                    targetEl.popValues.push(v);
					                                    
					                                }
					                            }
					                            
					                        });
					                        $.each(vJstreeList, function (i,tree) {  
					                            var vTree = $("#" + tree.id ).jstree(true);
					                            vTree.deselect_all(true);
					                            vTree.select_node(tree.popValues.join(';;;'));
					                        });
					    
					                        $.each(v_filterPop ,function(k, v){
					                            var targetEl = findAllByElName( v_schema_search , function( _el){
					                                if( _el.type == "multiCombo"){
					                                    if( _el.jpa_column.child_column.toUpperCase() == k.toUpperCase())
					                                        return true;
					                                }else if ( _el.type == "jsTreeSearch"){
					                                    // let _target = _.find(_el.relation.columns, function(col){
					                                    //     return col.childColumn.toUpperCase() ==  k.toUpperCase();
					                                    // });
					                                    // if( _target != null)
					                                    //     return true;
					                                }else if ( _el.type == "input"){
					                                    if ( _el.columnName.toUpperCase() == k.toUpperCase() )
					                                        return true;
					                                }
					                            });
					    
					                            if ( targetEl != null){
					                                if (targetEl.type == "multiCombo"){
					                                    // origin select
					                                    $("#" + targetEl.id +" option").prop('selected',false);
					                                    $("#" + targetEl.id +" option[value='"  + v + "']").prop('selected',true);
					                                    // // div view
					                                    // $("input[name=multiselect_" + targetEl.name +"]").prop('checked',false);
					                                    // $("input[name=multiselect_" + targetEl.name +"] option[value="  + v + "]").prop('checked',true);
					                                    var mainControl = $("#" + targetEl.id );
					                                    mainControl.multiselect('refresh');
					                                    mainControl.multiselect('widget').css("width","400px");
					                                    mainControl.multiselect('widget').find(".ui-multiselect-filter input").css("width","150px");
					    
					                                }else if (targetEl.type == "jsTreeSearch"){
					                                    // var vTree = $("#" + targetEl.id ).jstree(true);
					                                    // // vTree.deselect_all(true);
					                                    // var seldata = _.find(vTree._model.data , function( data ){
					                                    //     if (data['original'] == null || data.original["field"] == null)
					                                    //         return false;
					                                    //     var vOriginal = data['original'];
					                                    //     if ( vOriginal.field == k && vOriginal.value == v){
					                                    //         return true;
					                                    //     }
					                                    //     return false;
					    
					                                    // });
					                                    // if(seldata != null  && seldata.children != null && seldata.children.length == 0 )
					                                    //     vTree.select_node(seldata.id);
					    
					                                }else if (targetEl.type == "input"){
					                                    $("#" + targetEl.id).val(v);
					                                }
					                            }
					                            
					                            
					                            
					                        });
					                    }
					                    
					                }
					                
					            },

					"fn_pop_select_set": function(){
												
					                if($("#pop_select").val() == "" )
					                    return;
					                var v_pop_select = JSON.parse($("#pop_select").val());
					                if ( _.keys(v_pop_select).length == 0 )
					                    return;
					                if ( _.keys(v_pop_select.search_str_option).length == 0 )
					                    return;
					
					                // find grid
					                var v_grid_schema = findAllByElName(v_schema_content.elements , {type:"grid"});
					                if ( v_grid_schema  == null)
					                    return;
					                
					                // rules Array  2020.01.03
					                v_rules =[];
					                if (typeof v_pop_select.search_str_option.search_field == "string"){
					                    // find item
					                    var v_item = _.find(v_grid_schema.items , {name : v_pop_select.search_str_option.search_field});
					                    if (v_item == null)
					                        return;
					                    /**********************************************/
					                    /****  For Item setting filter initialtext ****/
					                    /**********************************************/
					                    // set searchoptions.defaultValue
					                    var v_item_to_merge = {
					                        searchoptions : {
					                            searchOperMenu: true,
					                            defaultValue: '' + v_pop_select.search_str_option.search_value
					                            //  defaultValue: '^' + v_pop_select.search_str_option.search_value
					                        }								
					                    };
					                    _.merge(v_item, v_item_to_merge);
					                    /**********************************************/
					                    /****  For Grid Setting postData.filers *******/
					                    /**********************************************/
					                    v_rules.push(
					                        {
					                            field : v_pop_select.search_str_option.search_field,
					                            op: "cn",
					                            data : '^' + v_pop_select.search_str_option.search_value
					                        }
					                    );
					                }else if ( _.isArray(v_pop_select.search_str_option.search_field)){
					                    
					                    $.each(v_pop_select.search_str_option.search_field , function(i,search_field){
					                        
					                        if ( search_field.value != null && search_field.value.length > 0){
					                            /**********************************************/
					                            /****  For Item setting filter initialtext ****/
					                            /**********************************************/
					                            // set searchoptions.defaultValue
					                            var v_item = _.find(v_grid_schema.items , {name : search_field.target });
					                            if ( v_item == null )
					                                return true;
					                            var v_item_to_merge = {
					                                searchoptions : {
					                                    searchOperMenu: true,
					                                    defaultValue: '^' + search_field.value
					                                    //  defaultValue: '^' + v_pop_select.search_str_option.search_value
					                                }								
					                            };
					                            _.merge(v_item, v_item_to_merge);
					
					                            /**********************************************/
					                            /****  For Grid Setting postData.filers *******/
					                            /**********************************************/
					                            
					                            v_rules.push(
					                                {
					                                    field : search_field.target,
					                                    op: "cn",
					                                    // data : '^' + v_pop_select.search_str_option.search_value
					                                    data : '^' + search_field.value
					                                }
					                            );
					                        }
					                        
					                    });
					                }else{
					                    return;
					                }
					                    
					                var v_filters = {
					                    groupOp : "AND",
					                    rules : v_rules
					                };
					                
					
					
					                var v_grid_to_merge = {
					                    postData : {
					                        filters : JSON.stringify(v_filters)
					                    }
					                };
					                _.merge(v_grid_schema.gridOpt, v_grid_to_merge);
					
					
					            }

				}
			},
			{
				"fileType": "jsp",
				"editType": "add",
				"fileName": "cmmCd.add",
				"entityId": "cmm_cd",
				"dictionaries": [
					{
						"entityName": "cmm_cd",
						"sqlId": "cmmCd.dictionary.cmmCd",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"parentEntityName": "cmm_cd",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"code_category"
						],
						"child_columns": [
							"code_category"
						]
					}
				],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvvF-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBaMcTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mvu1-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvv1-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBaMcjRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mvvl-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvvV-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvul-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": [
								{
									"_xmi:id": "_Q4Mvwl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgDRPEDih466MYOWd-w",
									"__prefix": null
								},
								{
									"_xmi:id": "_Q4Mvw1-9EeqK2M3E1LfZ7Q",
									"_key": "name_column",
									"_value": "code_nm",
									"__prefix": null
								}
							],
							"_xmi:id": "_Q4MvwV-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvxl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4MvxV-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvxF-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4MvwF-9EeqK2M3E1LfZ7Q",
						"_name": "code_id",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvyV-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBazgjRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4MvyF-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvx1-9EeqK2M3E1LfZ7Q",
						"_name": "code_nm",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_cd\",",
					"\t\t\t\t\"sqlId\": \"cmmCd.dictionary.cmmCd\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"cmm_cd\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvvF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBaMcTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mvu1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvv1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBaMcjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvvl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvvV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvul-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvwl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvw1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"name_column\",",
					"\t\t\t\t\t\t\t\"_value\": \"code_nm\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t],",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvwV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvxl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvxV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvxF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4MvwF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_id\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvyV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBazgjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvyF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvx1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_nm\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmCd.cmmCd\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];\n\t\t\t                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=cmmCd.cmmCd.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                var properties = _.filter(gridProperties, function(prop){ \n\t\t\t                    return true;\n\t\t\t                });\n\t\t\t                $.each([].concat(properties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(properties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != \"\"){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t\n\t\t\t                            // if add_hidden , then edit_tage : hidden\n\t\t\t                            if (prop._documentation != null && prop._documentation.add_hidden ){\n\t\t\t                                rtnObj.edit_tag = \"hidden\";\n\t\t\t                            }\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                    \n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(properties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if add_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.add_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != \"\" ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"cmmCd.cmmCd.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t\n\t\t\t                            // fileupload\n\t\t\t                            var parameter = \"\";\n\t\t\t                            // if you want to upload options ....\n\t\t\t                            // parameter = \"uploadBoard=schema\";\n\t\t\t                            // parameter += \"&useRealFileName=Y\";\n\t\t\t                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){\n\t\t\t                                $('#form').ajaxForm({\n\t\t\t                                    url: \"./fileTestJson.do?\" + parameter \n\t\t\t                                    , type:\"POST\"\n\t\t\t                                    , dataType:\"json\"\n\t\t\t                                    , async: false\n\t\t\t                                    , success:function(json) {\n\t\t\t                                        fileInfo = json;\n\t\t\t                                    }\n\t\t\t                                    , error:function(e){\n\t\t\t                                        alert(e.responseText);\n\t\t\t                                    }\n\t\t\t                                });\n\t\t\t                                $('#form').submit();\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});\n\t\t\t                            if (edit_items.length > 0 ){\n\t\t\t                                $.each(edit_items, function(i,edit_item){\n\t\t\t                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });\n\t\t\t                                    if (item_fileinfo != null){\n\t\t\t                                        addRow[edit_item.col] = item_fileinfo.orgFileName;\n\t\t\t                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;\n\t\t\t                                        \n\t\t\t                                    }\t\t\n\t\t\t                                });\n\t\t\t                                \t\t\t\t\t\t\t\t\t\n\t\t\t                            }\n\t\t\t\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t                if (entityDoc.add_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.add_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };  \n\t\t\t                \n\t\t\t                \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t                    \n\t\t\t                    var parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t                                \n\t\t\t                                if (typeof option.search_field == \"string\"){\n\t\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t$.each( option.search_field , function(i,search_field){\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar target_react = _.find( \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_this.reactObjects ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: search_field.from\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tsearch_field.value = target_react.state.value;\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t                                }\n\t\t\t                                \n\t\t\t                                pop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do some customize ...\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t                \n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "cmmCd"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmCd.cmmCd",
					"fn_make_schema": function(){
					                var detailList = [];
					                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=cmmCd.cmmCd.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                var properties = _.filter(gridProperties, function(prop){ 
					                    return true;
					                });
					                $.each([].concat(properties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(properties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != ""){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					
					                            // if add_hidden , then edit_tage : hidden
					                            if (prop._documentation != null && prop._documentation.add_hidden ){
					                                rtnObj.edit_tag = "hidden";
					                            }
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					                        }
					                        
					
					                    });
					                    
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(properties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if add_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.add_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != "" ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "cmmCd.cmmCd.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					
					                            // fileupload
					                            var parameter = "";
					                            // if you want to upload options ....
					                            // parameter = "uploadBoard=schema";
					                            // parameter += "&useRealFileName=Y";
					                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){
					                                $('#form').ajaxForm({
					                                    url: "./fileTestJson.do?" + parameter 
					                                    , type:"POST"
					                                    , dataType:"json"
					                                    , async: false
					                                    , success:function(json) {
					                                        fileInfo = json;
					                                    }
					                                    , error:function(e){
					                                        alert(e.responseText);
					                                    }
					                                });
					                                $('#form').submit();
					                            }
					                            
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});
					                            if (edit_items.length > 0 ){
					                                $.each(edit_items, function(i,edit_item){
					                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });
					                                    if (item_fileinfo != null){
					                                        addRow[edit_item.col] = item_fileinfo.orgFileName;
					                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;
					                                        
					                                    }		
					                                });
					                                									
					                            }
					
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					                if (entityDoc.add_button_option != null){
					                    schema_options.button_option = entityDoc.add_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };  
					                
					                
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
										oFrm.target = frameId;
					                    
					                    var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
					                                
					                                if (typeof option.search_field == "string"){
														option.search_value = this.state.search_str;								
														
													}else{
														$.each( option.search_field , function(i,search_field){
															var target_react = _.find( 
																_this.reactObjects ,  
																{ 
																	props : {
																		options : {
																			name: search_field.from
																		} 
																	}															
																}
															);																		
															search_field.value = target_react.state.value;										
														});
					                                }
					                                
					                                pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do some customize ...
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					                
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "edit",
				"fileName": "cmmCd.edit",
				"entityId": "cmm_cd",
				"dictionaries": [
					{
						"entityName": "cmm_cd",
						"sqlId": "cmmCd.dictionary.cmmCd",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"parentEntityName": "cmm_cd",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"code_category"
						],
						"child_columns": [
							"code_category"
						]
					}
				],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvvF-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBaMcTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mvu1-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvv1-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBaMcjRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mvvl-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvvV-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvul-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": [
								{
									"_xmi:id": "_Q4Mvwl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgDRPEDih466MYOWd-w",
									"__prefix": null
								},
								{
									"_xmi:id": "_Q4Mvw1-9EeqK2M3E1LfZ7Q",
									"_key": "name_column",
									"_value": "code_nm",
									"__prefix": null
								}
							],
							"_xmi:id": "_Q4MvwV-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvxl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4MvxV-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvxF-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4MvwF-9EeqK2M3E1LfZ7Q",
						"_name": "code_id",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvyV-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBazgjRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4MvyF-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvx1-9EeqK2M3E1LfZ7Q",
						"_name": "code_nm",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_cd\",",
					"\t\t\t\t\"sqlId\": \"cmmCd.dictionary.cmmCd\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"cmm_cd\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvvF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBaMcTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mvu1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvv1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBaMcjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvvl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvvV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvul-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvwl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvw1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"name_column\",",
					"\t\t\t\t\t\t\t\"_value\": \"code_nm\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t],",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvwV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvxl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvxV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvxF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4MvwF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_id\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvyV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBazgjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvyF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvx1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_nm\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmCd.cmmCd\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=cmmCd.cmmCd.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.edit_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"cmmCd.cmmCd.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.edit_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.edit_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };              \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do some customize ...\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "cmmCd"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmCd.cmmCd",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=cmmCd.cmmCd.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.edit_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "cmmCd.cmmCd.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.edit_button_option != null){
					                    schema_options.button_option = entityDoc.edit_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };              
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do some customize ...
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "copy",
				"fileName": "cmmCd.copy",
				"entityId": "cmm_cd",
				"dictionaries": [
					{
						"entityName": "cmm_cd",
						"sqlId": "cmmCd.dictionary.cmmCd",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"parentEntityName": "cmm_cd",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"code_category"
						],
						"child_columns": [
							"code_category"
						]
					}
				],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvvF-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBaMcTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mvu1-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvv1-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBaMcjRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mvvl-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvvV-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvul-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": [
								{
									"_xmi:id": "_Q4Mvwl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgDRPEDih466MYOWd-w",
									"__prefix": null
								},
								{
									"_xmi:id": "_Q4Mvw1-9EeqK2M3E1LfZ7Q",
									"_key": "name_column",
									"_value": "code_nm",
									"__prefix": null
								}
							],
							"_xmi:id": "_Q4MvwV-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvxl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4MvxV-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvxF-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4MvwF-9EeqK2M3E1LfZ7Q",
						"_name": "code_id",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvyV-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBazgjRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4MvyF-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvx1-9EeqK2M3E1LfZ7Q",
						"_name": "code_nm",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_cd\",",
					"\t\t\t\t\"sqlId\": \"cmmCd.dictionary.cmmCd\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"cmm_cd\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvvF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBaMcTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mvu1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvv1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBaMcjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvvl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvvV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvul-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvwl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvw1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"name_column\",",
					"\t\t\t\t\t\t\t\"_value\": \"code_nm\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t],",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvwV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvxl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvxV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvxF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4MvwF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_id\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvyV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBazgjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvyF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvx1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_nm\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmCd.cmmCd\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=cmmCd.cmmCd.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.copy_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"cmmCd.cmmCd.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            // fileupload\n\t\t\t                            var parameter = \"\";\n\t\t\t                            // if you want to upload options ....\n\t\t\t                            // parameter = \"uploadBoard=schema\";\n\t\t\t\t\t\t\t\t\t\t// parameter += \"&useRealFileName=Y\";\n\t\t\t                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){\n\t\t\t                                $('#form').ajaxForm({\n\t\t\t                                    url: \"./fileTestJson.do?\" + parameter \n\t\t\t                                    , type:\"POST\"\n\t\t\t                                    , dataType:\"json\"\n\t\t\t                                    , async: false\n\t\t\t                                    , success:function(json) {\n\t\t\t                                        fileInfo = json;\n\t\t\t                                    }\n\t\t\t                                    , error:function(e){\n\t\t\t                                        \n\t\t\t                                        alert(e.responseText);\n\t\t\t                                    }\n\t\t\t                                });\n\t\t\t                                $('#form').submit();\n\t\t\t                            }\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});\n\t\t\t                            if (edit_items.length > 0 ){\n\t\t\t                                $.each(edit_items, function(i,edit_item){\n\t\t\t                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });\n\t\t\t                                    if (item_fileinfo != null){\n\t\t\t                                        addRow[edit_item.col] = item_fileinfo.orgFileName;\n\t\t\t                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;\n\t\t\t                                        \n\t\t\t                                    }\t\t\n\t\t\t                                });\n\t\t\t                                \t\t\t\t\t\t\t\t\t\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.copy_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.copy_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };            \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "cmmCd"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmCd.cmmCd",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=cmmCd.cmmCd.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.copy_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "cmmCd.cmmCd.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            // fileupload
					                            var parameter = "";
					                            // if you want to upload options ....
					                            // parameter = "uploadBoard=schema";
												// parameter += "&useRealFileName=Y";
					                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){
					                                $('#form').ajaxForm({
					                                    url: "./fileTestJson.do?" + parameter 
					                                    , type:"POST"
					                                    , dataType:"json"
					                                    , async: false
					                                    , success:function(json) {
					                                        fileInfo = json;
					                                    }
					                                    , error:function(e){
					                                        
					                                        alert(e.responseText);
					                                    }
					                                });
					                                $('#form').submit();
					                            }
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});
					                            if (edit_items.length > 0 ){
					                                $.each(edit_items, function(i,edit_item){
					                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });
					                                    if (item_fileinfo != null){
					                                        addRow[edit_item.col] = item_fileinfo.orgFileName;
					                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;
					                                        
					                                    }		
					                                });
					                                									
					                            }
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.copy_button_option != null){
					                    schema_options.button_option = entityDoc.copy_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };            
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "view",
				"fileName": "cmmCd.view",
				"entityId": "cmm_cd",
				"dictionaries": [
					{
						"entityName": "cmm_cd",
						"sqlId": "cmmCd.dictionary.cmmCd",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"parentEntityName": "cmm_cd",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"code_category"
						],
						"child_columns": [
							"code_category"
						]
					}
				],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvvF-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBaMcTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mvu1-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvv1-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBaMcjRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mvvl-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvvV-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvul-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": [
								{
									"_xmi:id": "_Q4Mvwl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgDRPEDih466MYOWd-w",
									"__prefix": null
								},
								{
									"_xmi:id": "_Q4Mvw1-9EeqK2M3E1LfZ7Q",
									"_key": "name_column",
									"_value": "code_nm",
									"__prefix": null
								}
							],
							"_xmi:id": "_Q4MvwV-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mvxl-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_fBazgTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4MvxV-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4MvxF-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4MvwF-9EeqK2M3E1LfZ7Q",
						"_name": "code_id",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4MvyV-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_fBazgjRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4MvyF-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mvx1-9EeqK2M3E1LfZ7Q",
						"_name": "code_nm",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\tvar parentFrame = parent.${param.frameName};",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_cd\",",
					"\t\t\t\t\"sqlId\": \"cmmCd.dictionary.cmmCd\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"cmm_cd\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvvF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBaMcTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mvu1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvv1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBaMcjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvvl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvvV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvul-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvwl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvw1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"name_column\",",
					"\t\t\t\t\t\t\t\"_value\": \"code_nm\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t],",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvwV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mvxl-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_fBazgTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvxV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvxF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4MvwF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_id\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4MvyV-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_fBazgjRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4MvyF-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mvx1-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_nm\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmCd.cmmCd\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=cmmCd.cmmCd.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.view_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"cmmCd.cmmCd.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.view_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.view_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };            \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do ...\n\t\t\t\n\t\t\t                // \n\t\t\t                commonFunc.fn_view_sub();\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"entityId": "cmmCd"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmCd.cmmCd",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=cmmCd.cmmCd.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.view_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "cmmCd.cmmCd.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.view_button_option != null){
					                    schema_options.button_option = entityDoc.view_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };            
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do ...
					
					                // 
					                commonFunc.fn_view_sub();
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "general",
				"fileName": "cmmUse",
				"entityId": "cmm_use",
				"foreignEntities": [
					{
						"id": "cmm_cd",
						"referenceId": "reference::cmm_cd::cmm_use",
						"schemas": [
							{
								"type": "multiCombo",
								"id": "cmmCdCodeCategorySearchMultiCombo",
								"name": "cmmCdCodeCategorySearchMultiCombo",
								"label": "",
								"text": "Code_category",
								"jpa_column": {
									"parent_column": "code_category",
									"child_column": "code_category"
								},
								"sqlId": "cmmUse.cmmCd.multicombo",
								"entityId": "cmm_cd",
								"multiselectOpt": {
									"multiple": true
								},
								"width": "150px",
								"options": {
									"cd": "CODE_CATEGORY",
									"name": "CODE_CATEGORY"
								},
								"data": function(){
								                var rtnList = [];
								                $.ajax({
								                    url: "./genericlListJson.do",
								                    data: {"sqlid": "cmmUse.cmmCd.multicombo"}, 
								                    async: false,
								                    success:  function(response){
								                        // rtnList = response.dataList;
								                        
								                        $.each(response.dataList,function(i,d){
								                            if(d != null){
								                                rtnList.push(d);
								                                if (response.dataList.length <= 100 )
								                                    d["selected"] = "selected";
								                            }
								                                
								                        });
								                    }
								                });
								                return rtnList;
								
								            },

								"events": {
									"change": function(e){
									                    fn_search();
									                }

								}
							}
						]
					},
					{
						"id": "tab_cols",
						"referenceId": "reference::tab_cols::cmm_use",
						"schemas": [
							{
								"type": "jsTreeSearch",
								"id": "table_name_column_name_jsTreeSearch",
								"name": "table_name_column_name_jsTreeSearch",
								"label": "tabColsTree Search",
								"text": " ",
								"keys": [
									{
										"codeColumn": "table_name",
										"nameColumn": "table_name"
									},
									{
										"codeColumn": "column_name",
										"nameColumn": "column_name"
									}
								],
								"rootText": "Select tableName/columnName",
								"relation": {
									"parentEntityName": "tab_cols",
									"childEntityName": "cmm_use",
									"columns": [
										{
											"parentColumn": "table_name",
											"childColumn": "table_name",
											"index": 0
										},
										{
											"parentColumn": "column_name",
											"childColumn": "column_name",
											"index": 1
										}
									]
								},
								"popValues": [],
								"events": {
									"changed.jstree": function (e, data) {
									                if (data.event != null) {
									                    fn_search();
									                }
									            },

									"loaded.jstree": function (e, data) {
									                // getGridData();
									            }

								},
								"sqlId": "cmmUse.tabCols.jstreesearch",
								"data": function(){
								        var _this = this;
								        var rtnList = [];
								        $.ajax({
								            url: "./genericlListJson.do",
								            data: {"sqlid": _this.sqlId }, 
								            async: false,
								            success:  function(response){
								                rtnList = response.dataList;
								            }
								        });
								        return rtnList;
								    },

								"entityId": "tab_cols",
								"width": "150px"
							}
						]
					}
				],
				"childEntities": [],
				"schema": {
					"search": {
						"name": "v_schema_search",
						"containerId": "v_schema_searchContainer",
						"schema": {
							"type": "Vertical",
							"id": "searchConditionHorizontalLayout",
							"name": "searchConditionHorizontalLayout",
							"label": "",
							"controlCss": [
								{
									"code": "min-height",
									"value": "30px"
								}
							],
							"elements": [
								{
									"label": "",
									"type": "HorizontalLayout",
									"cls": "",
									"containerCss": [],
									"elements": [
										{
											"containerCss": [],
											"label": "",
											"id": "searchVervical",
											"type": "Vertical",
											"elements": [
												{
													"label": "",
													"type": "HorizontalLayout",
													"id": "searchHorizontalLayout",
													"name": "searchHorizontalLayout",
													"containerCss": [
														{
															"code": "min-height",
															"value": "25px"
														}
													],
													"elements": [
														{
															"type": "SearchHeader",
															"id": "cmmCdCodeCategorySearchHeader",
															"name": "cmmCdCodeCategorySearchHeader",
															"label": "",
															"text": "Codecategory",
															"width": "100px"
														},
														{
															"type": "multiCombo",
															"id": "cmmCdCodeCategorySearchMultiCombo",
															"name": "cmmCdCodeCategorySearchMultiCombo",
															"label": "",
															"text": "Code_category",
															"jpa_column": {
																"parent_column": "code_category",
																"child_column": "code_category"
															},
															"sqlId": "cmmUse.cmmCd.multicombo",
															"entityId": "cmm_cd",
															"multiselectOpt": {
																"multiple": true
															},
															"width": "150px",
															"options": {
																"cd": "CODE_CATEGORY",
																"name": "CODE_CATEGORY"
															},
															"data": function(){
															                var rtnList = [];
															                $.ajax({
															                    url: "./genericlListJson.do",
															                    data: {"sqlid": "cmmUse.cmmCd.multicombo"}, 
															                    async: false,
															                    success:  function(response){
															                        // rtnList = response.dataList;
															                        
															                        $.each(response.dataList,function(i,d){
															                            if(d != null){
															                                rtnList.push(d);
															                                if (response.dataList.length <= 100 )
															                                    d["selected"] = "selected";
															                            }
															                                
															                        });
															                    }
															                });
															                return rtnList;
															
															            },

															"events": {
																"change": function(e){
																                    fn_search();
																                }

															}
														},
														{
															"type": "SearchHeader",
															"id": "table_name_column_name_SearchHeader",
															"name": "table_name_column_name_SearchHeader",
															"label": "",
															"text": "Table_name ...",
															"width": "100px"
														},
														{
															"type": "jsTreeSearch",
															"id": "table_name_column_name_jsTreeSearch",
															"name": "table_name_column_name_jsTreeSearch",
															"label": "tabColsTree Search",
															"text": " ",
															"keys": [
																{
																	"codeColumn": "table_name",
																	"nameColumn": "table_name"
																},
																{
																	"codeColumn": "column_name",
																	"nameColumn": "column_name"
																}
															],
															"rootText": "Select tableName/columnName",
															"relation": {
																"parentEntityName": "tab_cols",
																"childEntityName": "cmm_use",
																"columns": [
																	{
																		"parentColumn": "table_name",
																		"childColumn": "table_name",
																		"index": 0
																	},
																	{
																		"parentColumn": "column_name",
																		"childColumn": "column_name",
																		"index": 1
																	}
																]
															},
															"popValues": [],
															"events": {
																"changed.jstree": function (e, data) {
																                if (data.event != null) {
																                    fn_search();
																                }
																            },

																"loaded.jstree": function (e, data) {
																                // getGridData();
																            }

															},
															"sqlId": "cmmUse.tabCols.jstreesearch",
															"data": function(){
															        var _this = this;
															        var rtnList = [];
															        $.ajax({
															            url: "./genericlListJson.do",
															            data: {"sqlid": _this.sqlId }, 
															            async: false,
															            success:  function(response){
															                rtnList = response.dataList;
															            }
															        });
															        return rtnList;
															    },

															"entityId": "tab_cols",
															"width": "150px"
														}
													]
												}
											]
										},
										{
											"label": "",
											"type": "HorizontalLayout",
											"cls": "btn_txt",
											"containerCss": [
												{
													"code": "margin-left",
													"value": "10px"
												},
												{
													"code": "float",
													"value": "right"
												}
											],
											"elements": [
												{
													"type": "ButtonBootstrap",
													"id": "btnSearch",
													"name": "btnSearch",
													"label": "SEARCH",
													"containerCss": [
														{
															"code": "margin-right",
															"value": "3px"
														}
													],
													"events": {
														"click": function(){
														                                                fn_search();
														                                            }

													}
												}
											]
										}
									]
								}
							]
						}
					},
					"contents": {
						"name": "v_schema_content",
						"containerId": "v_schema_contentContainer",
						"schema": {
							"type": "Vertical",
							"id": "contentVertical",
							"name": "contentVertical",
							"label": "",
							"elements": [
								{
									"type": "grid",
									"id": "cmmUseGrid",
									"name": "cmmUseGrid",
									"label": "",
									"text": "Cmm_use",
									"sqlId": "cmmUse.cmmUse",
									"entityId": "cmm_use",
									"containerCss": [
										{
											"code": "width",
											"value": "100%"
										},
										{
											"code": "margin-top",
											"value": "10px"
										},
										{
											"code": "background-color",
											"value": "#FFF"
										}
									],
									"gridOpt": {
										"datatype": "json",
										"pager": "#cmmUseGridPager",
										"sqlId": "cmmUse.cmmUse",
										"gridId": "cmmUseGrid",
										"modelVarName": "testEntityJpa",
										"url": function(){ 
										                    return	"./genericlListPageJson.do?" + 
										                        $("#form").serialize() + 
										                        "&sqlid=cmmUse.cmmUse.page.list" +  
										                        "&paging_sqlid=cmmUse.cmmUse.page.total" 
										                },

										"editurl": "./ssdCusDummySaveJson.do",
										"styleUI": "Bootstrap",
										"viewrecords": true,
										"width": "100%",
										"autowidth": true,
										"height": 650,
										"multiselect": false,
										"multiboxonly": true,
										"multiSort": true,
										"rowNum": 20,
										"rowList": [
											5,
											10,
											15,
											20,
											30
										],
										"emptyrecords": "No records to view",
										"gridComplete": function () {
										                    var grid = $(this).jqGrid();
										                    var gridParam = grid.getGridParam();
										                    var show_filter = true;
										                    if ( gridParam.filterToolbarShow != null 
										                        && gridParam.filterToolbarShow == false )
										                        show_filter = false; 
										                    if (show_filter){
										                        grid.jqGrid('filterToolbar',
										                        {
										                            defaultSearch:'cn'
										                            // JSON stringify all data from search, including search toolbar operators
										                            ,stringResult: true
										                            // instuct the grid toolbar to show the search options
										                            // ,searchOperators: true
										                        }
										                        );
										                    }
										                    
										                    
										                    grid.navGrid(gridParam.pager ,
										                        // the buttons to appear on the toolbar of the grid
										                        { edit: true, add: true, del: true, search: false,  refresh: true, view: true, position: "left", cloneToTop: false  
										                            ,addfunc: function(){
										                                commonFunc.fn_view_detail.call(this,'add');
										                            }
										                            , editfunc : function(){
										                                commonFunc.fn_view_detail.call(this,'edit');
										                            }, viewfunc : function(){
										                                commonFunc.fn_view_detail.call(this,'view');
										                            }
										
										                        }
										                        // options for the Edit Dialog
										                        ,{  }
										                        // options for the Script Master Add Dialog
										                        
										                        ,{	
										                            addCaption: "Add Script Master",
										                            modal:true,
										                            recreateForm: true,
										                            closeAfterAdd: true,
										                            reloadAfterSubmit: true,
										                            //template: template,
										                            errorTextFormat: function (data) {
										                                return 'Error: ' + data.responseText
										                            },
										                            onInitializeForm : function(formid){
										                                $(formid).attr('method','POST');
										                                $(formid).attr('action','');
										                                $(formid).attr('enctype','multipart/form-data');
										                                $(formid).css("font-size","14px");
										                                
										                            },
										                            afterSubmit: function(response, postdata) 
										                            { 
										                                var grid = $(this).jqGrid();
										                                var gridParam = grid.getGridParam();
										                                var formdata = this.ownerDocument.FormPost;
										                                var fd = new FormData(formdata);  	
										                                var response1 = {};
										                                
										                                $.ajax({
										                                    url: "./genericSaveJson.do?sqlid=" + gridParam.sqlId + ".insert",
										                                    type: "POST",
										                                    data: fd, 
										                                    async: false,
										                                    cache: false,
										                                    contentType: false,
										                                    processData: false,
										                                    success:  function(data){
										                                        response1 = data;
										                                        if(response1.result == 'success'){
										                                            // Cumtomise...
										                                        }
										                                        
										                                    }
										                                });
										                                
										                                //return [success,message,new_id] ;
										                                if(response1.result == 'success'){
										                                    //$(this).trigger('reloadGrid'); 
										                                    return [true, response1.result, ''];
										                                }
										                                else
										                                    return [false, response1.result + ":<br/>" + response1.message , ''];
										                                    
										                            }                         
										                        }
										                        // options for the Script Master Del Dialog 
										                        ,{  
										                            reloadAfterSubmit: true,
										                            afterSubmit: function(response, postdata) { 
										                                //$("#refresh_grid_script").hide();
										                                var grid = $(this);
										                                var paramObj = {
										                                    delRows : []
										                                };
										                                $.each(postdata.id.split(","),function(i,rowid){
										                                    var row = grid.getRowData(rowid);
										                                    paramObj.delRows.push(row);
										                                });
										                                
										                                //  
										                                paramObj.loop_id = "delRows";
										                                $.ajax({
										                                    url: "./genericSaveJson.do",
										                                    type: "POST",
										                                    data: {
										                                        searchJson: JSON.stringify(paramObj),
										                                        sqlid: "cmmUse.cmmUse.delete"
										                                    }  , 
										                                    async: false,
										                                    success:  function(data){
										                                        response1 = data;
										                                        if(response1.result == 'success'){
										                                        
										                                            msg = "Del Success!";
										                                            $("#dialog-confirm").html(msg);
										                                            $("#dialog-confirm").dialog({
										                                                resizable: false,
										                                                modal: true,
										                                                title: "Success",
										                                                //height: 200,
										                                                width: 200,
										                                                dialogClass: 'no-close',
										                                                closeOnEscape: false,
										                                                buttons: [
										                                                    {
										                                                        text: "OK",
										                                                        click: function() {
										                                                            $( this ).dialog( "close" );		
										                                                            // fn_search_script();
										                                                        }
										                                                    }
										                                                ]
										                                            });
										                                        }
										                                        
										                                    }
										                                });
										                                
										                                //return [success,message,new_id] ;
										                                if(response1.result == 'success'){
										                                    //$(this).trigger('reloadGrid'); 
										                                    return [true, response1.result, ''];
										                                }
										                                else
										                                    return [false, response1.result + ":<br/>" + response1.message , ''];
										                                    
										                            }
										                        }
										                        ,{ 
										                            multipleSearch: true,
										                            multipleGroup: true
										                        }
										                        
										                    );
										                    if ($(gridParam.pager).find(".ui-pg-button[title=Copy]").length == 0 && true) {
										                        grid.navButtonAdd(gridParam.pager, {
										                            caption : "", 
										                            title: "Copy",
										                            buttonicon : "glyphicon-copy",
										                            onClickButton: function(){ 
										                                var theGrid = $(this).jqGrid();
										                                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');
										                                if ( parentRowKey == null )   {
										                                    $("#dialog-confirm").html("Please, select row");
										                                    $("#dialog-confirm").dialog({
										                                        resizable: false,
										                                        modal: true,
										                                        title: "Error",
										                                        //height: 200,
										                                        width: 300,
										                                        dialogClass: 'no-close',
										                                        closeOnEscape: false,
										                                        buttons: [
										                                            {
										                                                text: "OK",
										                                                click: function() {
										                                                    $( this ).dialog( "close" );											                    			                  
										                                                }
										                                            }
										                                        ]
										                                    });
										                                    return;
										                                }
										                                commonFunc.fn_view_detail.call(this,'copy');
										                                // alert("Deleting Row");
										                            }, 
										                            position:"last"
										                        });
										                        var td_cp = $(gridParam.pager).find(".ui-pg-table .ui-pg-button[title='Copy']")
										                        var td_add = $(gridParam.pager).find(".ui-pg-table .ui-pg-button[title='Add new row']");
										                        td_add.after(td_cp);
										
										
										                    }
										                },

										"onCellSelect": function (rowId, iCol, content, event) {
										
										                    var grid = $(this).jqGrid();
										                    var row = grid.jqGrid('getRowData',rowId);
										                    var cms = grid.jqGrid("getGridParam", "colModel");
										                    var cm = cms[iCol];
										
										                    var oFrm = document.getElementById("form1");
										
										                    var v_property = _.find(gridProperties, { _name : cm.name.toLowerCase() });
										                    
										                    //customize
										                    var somCondition = ( v_property != null && 
										                        v_property._documentation != null &&
										                        v_property._documentation.file_info != null );
										
										                    if ( somCondition ){
										                        var path_column = v_property._documentation.file_info.path_column ;
										                        var path = '.'+ row[path_column] ;
										                        if((/\\.(txt|config|pdf|jpg|jpeg|gif|png|log)$/i).test(path)){
										                            var newWin1 = window.open("", "filedownload", "width=1200,height=900, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes");
										                            
										                            oFrm.action =  path;
										                            oFrm.method = "post";
										                            oFrm.target = 'filedownload'; 
										                            oFrm.submit();		
										                            newWin1.focus();
										                        }else if(row[cm.name].match(/\\.([\undefined]+)$/i) != null){
										                            //var src = "/dashboard/filedownloadJson.do";
										                            //src += "?filename=" + row.FILE_NAME;
										                            //src +="&path=" + row.FILE_PATH;
										                            //document.getElementById('file_iframe').src =  src;
										                            
										                            var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6
										                            if (isIE){
										                                //var fileData = ['\undefinedfeff' + "." + row.FILE_PATH];
										                                //var blobObject = new Blob(fileData);
										                                //window.navigator.msSaveOrOpenBlob(blobObject, row.FILE_NAME);
										                                var link = document.createElement('a');
										                                // customize for same path and name ==> formalize 
										                                var value_split = row[cm.name].split("/");
										                                var return_text = value_split.pop();
										                                // link.download = row[cm.name];
										                                link.download = return_text;
										                                link.href = "." + row[path_column] ;
										                                //Firefox requires the link to be in the body
										                                document.body.appendChild(link);
										                                link.click();
										                                link.target = '_blank';
										                                document.body.removeChild(link);
										
										                            }else{
										                                var link = document.createElement('a');
										                                // customize for same path and name ==> formalize 
										                                var value_split = row[cm.name].split("/");
										                                var return_text = value_split.pop();
										                                // link.download = row[cm.name];
										                                link.download = return_text;
										                                link.href = "." + row[path_column] ;
										                                //Firefox requires the link to be in the body
										                                document.body.appendChild(link);
										                                link.click();
										                                document.body.removeChild(link);
										                            }
										                                                                    
										                        }
										                    }
										                },

										"subGrid": false,
										"subgridtype": "json",
										"entityId": "cmm_use",
										"subGridRowExpanded": function(parentRowID, parentRowKey){
										                        var theGrid = $(this).jqGrid();
										                        var row = theGrid.jqGrid('getRowData',parentRowKey);
										                        var cms = theGrid.jqGrid("getGridParam", "colModel");
										                        var searchRow = {};
										                        var vGridOpt  = theGrid.getGridParam();
										                        $.each(row,function(k,v){
										                            // searchRow['search_' + _.camelCase(k)] = v;
										                        });
										                        var vKeys = [];
										                        // var models = eval(vGridOpt.modelVarName);
										                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
										                        $.each([].concat(gridProperties), function(i, prop){
										                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
										                            if (vId != null){
										                                vKeys.push(prop._name.toUpperCase());
										                                searchRow['search_' + _.camelCase(prop._name)] = row[prop._name.toUpperCase()];
										                            }
										                        });
										    
										                        // ***  grid ***//
										                        var childDivId = parentRowID + "_div_input";
										                        var childDiv = $(document.createElement("div"));
										                        childDiv.attr("id",childDivId);
										                        // add a table and pager HTML elements to the parent grid row - we will render the child grid here			    			
										                        $('#' + parentRowID).append(childDiv);
										    
										                        var detailList = [];
										                        $.ajax({
										                            type: "POST",
										                            url: "./genericlListJson.do?sqlid=cmmUse.cmmUse.one" ,
										                            data: searchRow ,
										                            //data: $("#form").serialize(), 
										                            async: false,
										                            success:  function(response){
										                                detailList  = response.dataList;                            
										                            }
										                        });
										                        
										                        if (detailList.length == 0 ){
										                            childDiv.text("no data");
										                            return;
										                        }
										    
										                        var schema1 = {
										                            containerId: childDivId,
										                            type:'Vertical',
										                            label: '',
										                            elements: [
										                                {
										                                    label: "",
										                                    type: 'Group',
										                                    elements: [
										                                        {
										                                            type: "inline_edit",
										                                            cols: 1,
										                                            data: function(){ 
										                                                return detailList[0];
										                                            },
										                                            options : {
										                                                keys : vKeys ,
										                                                fn_change: function( input ){
										                                                    //
										                                                    // if(this.props.options.name == 'SCRIPT_NAME'){
										                                                    // 	var convert = this.reactObjects.find(function(td){
										                                                    // 		return td.props.options.name == 'CONVERT_SCRIPT';
										                                                    // 	});	
										                                                    // 	//convert digit
										                                                    // 	//var v_hax = this.state.value;
										                                                    // 	var v_hax = input;
										                                                    // 	var v_digit = [];
										                                                    // 	$.each(v_hax.split(" "), function(i,str){
										                                                    // 		var d = "";
										                                                    // 		if(str.startsWith("0x")){
										                                                    // 			v_digit.push(parseInt(str,16));
										                                                    // 		}else{
										                                                    // 			v_digit.push(str);
										                                                    // 		}
										                                                    // 	});																		
										                                                    // 	convert.setState({value : v_digit.join(" ")});
										                                                        
										                                                    // }
										                                                    
										                                                },
										                                                fn_submit: function(){
										                                                    //alert("submit function defined");
										                                                    var state = true;
										                                                    var paramObj = {
										                                                        //origindatas: this.props.options.keys
										                                                        origindatas: this.state.keys
										                                                    };
										                                                    
										                                                    if(this.props.options.value == this.state.value)
										                                                        return state;
										                                                    $.ajax({
										                                                        url: "./genericSaveJson.do",
										                                                        type: "POST",
										                                                        data: {
										                                                            searchJson: JSON.stringify(paramObj),
										                                                            fieldName: this.state.name,
										                                                            fieldValue: this.state.value,
										                                                            fieldValueOrigin: this.state.value_origin,
										                                                            userId: $("#userId").val(),
										                                                            // sqlid: "dashboard.ssd_sm.script_master.update"
										                                                            sqlid: "cmmUse.cmmUse.edit"
										                                                        }, 
										                                                        async: false,			                    		
										                                                        success:  function(data){
										                                                            response1 = data;
										                                                            if(response1.result != 'success'){
										                                                                state = false;
										                                                                msg = "Save Success!";
										                                                                $("#dialog-confirm").html(response1.message);
										                                                                $("#dialog-confirm").dialog({
										                                                                    resizable: false,
										                                                                    modal: true,
										                                                                    title: "Error",
										                                                                    //height: 200,
										                                                                    width: 300,
										                                                                    dialogClass: 'no-close',
										                                                                    closeOnEscape: false,
										                                                                    buttons: [
										                                                                        {
										                                                                            text: "OK",
										                                                                            click: function() {
										                                                                            $( this ).dialog( "close" );											                    			                  
										                                                                            }
										                                                                        }
										                                                                    ]
										                                                                });
										                                                                
										                                                                
										                                                                
										                                                            }						                    			
										                                                        }
										                                                    });
										                                                    
										                                                    return state;
										                                                },
										                                                fn_afterSubmit: function(keyUpdatedObjects){
										                                                    
										                                                    $.each(this,function(i,react){
										                                                        if(_.find(cms,function(cm){return cm.name == react.state.name})){
										                                                            var vobject = {};
										                                                            vobject[react.state.name] = react.state.value;
										                                                            theGrid.setRowData(parentRowKey,vobject);
										                                                        }
										                                                        
										                                                    });
										                                                    
										                                                },
										                                                progressObject: parent.$("#loader")
										                                            },
										                                            items: _.map([].concat(gridProperties), function(prop){
										                                                var _cms = cms;
										                                                var rtnObj = {
										                                                    label : _.capitalize(_.upperCase(prop._name)),
										                                                    col : prop._name.toUpperCase() 
										                                                };
										                                                let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
										                                                if (vId != null){
										                                                    rtnObj.editable = false;
										                                                }
										    
										                                                // list hiden columns
										                                                if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
										                                                    rtnObj.isDateTime = true;
										                                                }
										                                                var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
										                                                if(vEdit != null){
										                                                    rtnObj.edit_tag = vEdit._value;
										                                                }
										    
										                                                var cm = _.find(_cms , {id: rtnObj.col});
										                                                if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
										    
										                                                    // rtnObj.selectOptions = cm.editoptions.value;
										                                                    var options = [];
										                                                    $.each(cm.editoptions.value, function (k, v) {
										                                                        var opt = {value: k, label: v};
										                                                        options.push(opt);
										                                                    });
										                                                    rtnObj.selectOptions = options;
										                                                    rtnObj.edit_tag = cm.edittype;
										                                                    if (parentFrame.v_filterPop[rtnObj.col] != null ){
										                                                        rtnObj.edit_tag = 'input';
										                                                        rtnObj.editable = false;
										                                                    }
										                                                }
										                                                return rtnObj;
										                                            })
										                                            
										                                        }
										                                        
										                                    
										                                    ]
										                                }
										                                
										                            
										                            ]
										                        };
										                        fn_makeHtml(childDiv,schema1);
										    
										    
										    
										                    }

									},
									"items": [
										{
											"label": "Table name",
											"name": "TABLE_NAME",
											"id": "TABLE_NAME",
											"align": "center",
											"entityName": "cmm_use",
											"editable": true,
											"gridId": "cmmUseGrid",
											"editrules": {
												"edithidden": true
											},
											"referenceId": "reference::tab_cols::cmm_use",
											"topRefrenceId": "reference::tab_cols::cmm_use",
											"editoptions": {
												"dataEvents": []
											},
											"unformat": function( cellval ,  opts , cell){
											                        var grid = $(this).jqGrid();
											                        var originVal = $(cell).attr("cellValue");
											                        //opts.colModel.editoptions.value[]
											                        return originVal;
											                    },

											"cellattr": function( rowId, cellValue, rawObject, cm, rdata ){
											                        var grid = $(this).jqGrid();
											                        var vGridOpt = grid.getGridParam();
											                        // var models = eval(vGridOpt.modelVarName);
											                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
											                        var result = " class='contextMenu contextMenu-parent'";
											                        result += " style='vertical-align: middle;";
											                        // red
											                        // result += "color: #d34b4b;font-weight: bolder;cursor:pointer;'";
											                        result += "cursor:pointer;'";
											                        result += " gridId='" + vGridOpt.gridId + "'";
											                        result += " entityId='" + vGridOpt.entityId + "'";
											                        result += " columnName='" + cm.name + "'";
											                        result += " cellValue='" + rawObject[cm.name] + "'";
											                        
											                        return result;
											                    }

										},
										{
											"label": "Column name",
											"name": "COLUMN_NAME",
											"id": "COLUMN_NAME",
											"align": "center",
											"entityName": "cmm_use",
											"editable": true,
											"gridId": "cmmUseGrid",
											"editrules": {
												"edithidden": true
											},
											"referenceId": "reference::tab_cols::cmm_use",
											"topRefrenceId": "reference::tab_cols::cmm_use",
											"editoptions": {
												"dataEvents": []
											},
											"unformat": function( cellval ,  opts , cell){
											                        var grid = $(this).jqGrid();
											                        var originVal = $(cell).attr("cellValue");
											                        //opts.colModel.editoptions.value[]
											                        return originVal;
											                    },

											"cellattr": function( rowId, cellValue, rawObject, cm, rdata ){
											                        var grid = $(this).jqGrid();
											                        var vGridOpt = grid.getGridParam();
											                        // var models = eval(vGridOpt.modelVarName);
											                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
											                        var result = " class='contextMenu contextMenu-parent'";
											                        result += " style='vertical-align: middle;";
											                        // red
											                        // result += "color: #d34b4b;font-weight: bolder;cursor:pointer;'";
											                        result += "cursor:pointer;'";
											                        result += " gridId='" + vGridOpt.gridId + "'";
											                        result += " entityId='" + vGridOpt.entityId + "'";
											                        result += " columnName='" + cm.name + "'";
											                        result += " cellValue='" + rawObject[cm.name] + "'";
											                        
											                        return result;
											                    }

										},
										{
											"label": "Code category",
											"name": "CODE_CATEGORY",
											"id": "CODE_CATEGORY",
											"align": "center",
											"entityName": "cmm_use",
											"editable": true,
											"gridId": "cmmUseGrid",
											"editrules": {
												"edithidden": true
											},
											"referenceId": "reference::cmm_cd::cmm_use",
											"topRefrenceId": "reference::cmm_cd::cmm_use",
											"editoptions": {
												"dataEvents": []
											},
											"unformat": function( cellval ,  opts , cell){
											                        var grid = $(this).jqGrid();
											                        var originVal = $(cell).attr("cellValue");
											                        //opts.colModel.editoptions.value[]
											                        return originVal;
											                    },

											"cellattr": function( rowId, cellValue, rawObject, cm, rdata ){
											                        var grid = $(this).jqGrid();
											                        var vGridOpt = grid.getGridParam();
											                        // var models = eval(vGridOpt.modelVarName);
											                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
											                        var result = " class='contextMenu contextMenu-parent'";
											                        result += " style='vertical-align: middle;";
											                        // red
											                        // result += "color: #d34b4b;font-weight: bolder;cursor:pointer;'";
											                        result += "cursor:pointer;'";
											                        result += " gridId='" + vGridOpt.gridId + "'";
											                        result += " entityId='" + vGridOpt.entityId + "'";
											                        result += " columnName='" + cm.name + "'";
											                        result += " cellValue='" + rawObject[cm.name] + "'";
											                        
											                        return result;
											                    }

										}
									]
								}
							]
						}
					}
				},
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv1V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvoDRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv1F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv2F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRsvoTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv11-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv1l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv01-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv21-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvojRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv2l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv3l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRtWsDRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv3V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv3F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv2V-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv4V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRtWsTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv4F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv31-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					}
				],
				"sqlGenerator": {
					"fileName": "cmmUseSql.xml",
					"dbType": "mysql",
					"sqls": [
						{
							"id": "cmmUse.cmmCd.multicombo",
							"type": "select",
							"contents": [
								"select ",
								"distinct",
								"\tCODE_CATEGORY",
								"from CMM_CD a ",
								"where 1=1",
								"order by 1 "
							],
							"wheres": []
						},
						{
							"id": "cmmUse.tabCols.jstreesearch",
							"type": "select",
							"contents": [
								"select distinct ",
								"\tTABLE_NAME,\r\n\t\t\tCOLUMN_NAME",
								"from TAB_COLS a",
								"where 1=1",
								"order by 1 "
							],
							"wheres": []
						},
						{
							"id": "cmmUse.cmmUse",
							"type": "select",
							"contents": [
								"select ",
								"\tTABLE_NAME,COLUMN_NAME,CODE_CATEGORY",
								"from CMM_USE a ",
								"where 1=1"
							],
							"wheres": [
								"<if test=\"search_tableName != null and search_tableName !='' \">",
								"\tand table_name = #{search_tableName}",
								"</if>",
								"<if test=\"search_columnName != null and search_columnName !='' \">",
								"\tand column_name = #{search_columnName}",
								"</if>",
								"<if test=\"search_codeCategory != null and search_codeCategory !='' \">",
								"\tand code_category = #{search_codeCategory}",
								"</if>",
								"<if test=\"cmmCdCodeCategorySearchMultiComboArr != null and cmmCdCodeCategorySearchMultiComboArr !='' \">",
								"\tand code_category in ",
								"\t\t<foreach collection=\"cmmCdCodeCategorySearchMultiComboArr\" item=\"item\" index=\"index\" open=\"(\" separator=\",\" close=\")\" >",
								"\t\t#{item}",
								"\t\t</foreach>",
								"</if>"
							],
							"jsp_type": "grid"
						},
						{
							"id": "cmmUse.cmmUse.insert",
							"type": "insert",
							"contents": [
								"\tinsert into CMM_USE(",
								"\t\ttable_name,column_name,code_category",
								"\t\t,INS_DT",
								"\t)",
								"\tvalues (",
								"\t\t#{TABLE_NAME}",
								"\t\t,",
								"\t\t#{COLUMN_NAME}",
								"\t\t,",
								"\t\t#{CODE_CATEGORY}",
								"\t\t,now()",
								"\t);"
							],
							"wheres": [],
							"jsp_type": "grid"
						},
						{
							"id": "cmmUse.cmmUse.edit",
							"type": "update",
							"contents": [
								"update CMM_USE set",
								"\tMOD_Dt = now(),  ",
								"\t\t ${fieldName} = #{fieldValue}",
								"\twhere 1=1",
								"\t<choose>",
								"\t\t<when test=\"searchJson != null and searchJson != '' and searchJson.origindatas.size() > 0 \" >",
								"\t\t\t<foreach collection=\"searchJson.origindatas\" item=\"item\" index=\"index\"  >",
								"\t\t\t and ${item.field} = #{item.value}",
								"\t\t\t</foreach>",
								"\t\t</when>",
								"\t\t<otherwise>",
								"\t\tand 1=2",
								"\t\t</otherwise>",
								"\t</choose>",
								"\t;"
							],
							"wheres": []
						},
						{
							"id": "cmmUse.cmmUse.delete",
							"type": "update",
							"contents": [
								"\t\tdelete from CMM_USE",
								"\t\twhere 1=1",
								"\t\tand table_name = #{detail.TABLE_NAME}",
								"\t\tand column_name = #{detail.COLUMN_NAME}",
								"\t\t;"
							],
							"wheres": []
						},
						{
							"id": "cmmUse.datasrc.tabCols.tableName",
							"type": "select",
							"contents": [
								"select distinct ",
								"\tTABLE_NAME",
								"from TAB_COLS",
								"where 1=1",
								"order by 1"
							],
							"wheres": []
						},
						{
							"id": "cmmUse.datasrc.dynamic.tabCols.tableName",
							"type": "select",
							"contents": [
								"select distinct ",
								"\tTABLE_NAME",
								"from TAB_COLS",
								"where 1=1"
							],
							"wheres": [
								"order by 1"
							]
						},
						{
							"id": "cmmUse.dictionary.cmmUse",
							"type": "select",
							"contents": [
								"select  ",
								"b.TABLE_NAME",
								", b.COLUMN_NAME",
								", a.CODE_CATEGORY",
								", a.CODE_ID",
								", a.CODE_NM",
								"from CMM_CD a",
								"left outer join  CMM_USE b",
								" on a.CODE_CATEGORY = b.CODE_CATEGORY",
								"where b.TABLE_NAME is not null",
								"order by 1,2,3,4"
							],
							"wheres": []
						},
						{
							"id": "cmmUse.datasrc.tabCols.columnName",
							"type": "select",
							"contents": [
								"select distinct ",
								"\tCOLUMN_NAME",
								"from TAB_COLS",
								"where 1=1",
								"order by 1"
							],
							"wheres": []
						},
						{
							"id": "cmmUse.datasrc.dynamic.tabCols.columnName",
							"type": "select",
							"contents": [
								"select distinct ",
								"\tCOLUMN_NAME",
								"from TAB_COLS",
								"where 1=1"
							],
							"wheres": [
								"<if test=\"search_tableName != null and search_tableName !='' \">",
								"\tand table_name = #{search_tableName}",
								"</if>",
								"order by 1"
							]
						},
						{
							"id": "cmmUse.datasrc.cmmCd.codeCategory",
							"type": "select",
							"contents": [
								"select distinct ",
								"\tCODE_CATEGORY",
								"from CMM_CD",
								"where 1=1",
								"order by 1"
							],
							"wheres": []
						},
						{
							"id": "cmmUse.datasrc.dynamic.cmmCd.codeCategory",
							"type": "select",
							"contents": [
								"select distinct ",
								"\tCODE_CATEGORY",
								"from CMM_CD",
								"where 1=1"
							],
							"wheres": [
								"order by 1"
							]
						}
					],
					"sources": [
						"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
						"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">",
						"<mapper namespace=\"\">",
						"<select id=\"cmmUse.cmmCd.multicombo\" resultType=\"hashmap\" >",
						"\tselect ",
						"\tdistinct",
						"\t\tCODE_CATEGORY",
						"\tfrom CMM_CD a ",
						"\twhere 1=1",
						"\torder by 1 ",
						"</select>",
						"<select id=\"cmmUse.tabCols.jstreesearch\" resultType=\"hashmap\" >",
						"\tselect distinct ",
						"\t\tTABLE_NAME,\r\n\t\t\tCOLUMN_NAME",
						"\tfrom TAB_COLS a",
						"\twhere 1=1",
						"\torder by 1 ",
						"</select>",
						"<select id=\"cmmUse.cmmUse.page.list\" resultType=\"hashmap\" >",
						"\tSelect \n\t\t\t*\t\t\n\t\tFrom \n\t\t(\n\t\t\tselect\n\t\t\t\tA.*\n\t\t\tfrom \n\t\t\t(",
						"\tselect ",
						"\t\tTABLE_NAME,COLUMN_NAME,CODE_CATEGORY",
						"\tfrom CMM_USE a ",
						"\twhere 1=1",
						"\t<if test=\"search_tableName != null and search_tableName !='' \">",
						"\t\tand table_name = #{search_tableName}",
						"\t</if>",
						"\t<if test=\"search_columnName != null and search_columnName !='' \">",
						"\t\tand column_name = #{search_columnName}",
						"\t</if>",
						"\t<if test=\"search_codeCategory != null and search_codeCategory !='' \">",
						"\t\tand code_category = #{search_codeCategory}",
						"\t</if>",
						"\t<if test=\"cmmCdCodeCategorySearchMultiComboArr != null and cmmCdCodeCategorySearchMultiComboArr !='' \">",
						"\t\tand code_category in ",
						"\t\t\t<foreach collection=\"cmmCdCodeCategorySearchMultiComboArr\" item=\"item\" index=\"index\" open=\"(\" separator=\",\" close=\")\" >",
						"\t\t\t#{item}",
						"\t\t\t</foreach>",
						"\t</if>",
						"\n\t\t\n",
						"\t) A where 1=1 \n\t\t\t<choose>\n\t\t\t\t<when test=\"filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )\">\n\t\t\t\t\tand (\n\t\t\t\t\t<if test=\"filters.rules.size() > 0\" >\n\t\t\t       \t\t<foreach collection=\"filters.rules\" item=\"item\" index=\"index\"  open=\"(\" separator=\"\" close=\")\">\n\t\t\t           \t\t<if test=\"index > 0 \"> ${filters.groupOp} </if>\n\t\t\t\t\t\t\t<choose>\n\t\t\t\t\t\t\t\t<when test=\"item.data.equalsIgnoreCase('isnull')\">${item.field} is null</when>\n\t\t\t\t    \t\t\t<when test=\"item.op =='eq' \">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ne' \">${item.field} <![CDATA[ != ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='lt' \">${item.field} <![CDATA[ < ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='le' \">${item.field} <![CDATA[ <= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='gt' \">${item.field} <![CDATA[ > ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ge' \">${item.field} <![CDATA[ >= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bw' \">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bn' \"> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='in' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ni' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ew' \"> REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='en' \"> NOT REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='nc' \">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t</choose>\n\t\t\t       \t\t</foreach>\t\n\t\t\t       \t</if>\t\n\t\t\t       \t<if test=\"filters.groups != null and filters.groups.size() > 0\">\n\t\t       \t\t\t<foreach collection=\"filters.groups\" item=\"group\" index=\"group_index\"  open=\"\"  close=\"\">\n\t\t\t       \t\t\t<if test=\"group.rules.size() > 0\">\n\t\t\t       \t\t\t${filters.groupOp}\n\t\t\t\t           \t<foreach collection=\"group.rules\" item=\"rule\" index=\"rule_index\"  open=\"(\"   separator=\"\" close=\")\">\n\t\t\t\t\t        \t<if test=\"rule_index > 0 \"> ${group.groupOp} </if>\n\t           \t\t \t\t\t<choose>\n\t\t\t\t\t\t\t\t\t<when test=\"rule.data.equalsIgnoreCase('isnull')\">${rule.field} is null</when>\t\n\t\t\t\t\t           \t\t<when test=\"rule.op =='eq' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data}|| '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ne' \">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='lt' \">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='le' \">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='gt' \">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ge' \">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bw' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bn' \"> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='in' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ni' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ew' \"> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='en' \"> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='nc' \">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t</choose> \n\t\t\t\t\t       \t</foreach>\n\t\t\t\t\t       \t</if>\n\t\t\t\t       \t</foreach>\n\t\t       \t\t</if> \n\t\t       \t\t )\n\t\t   \t\t</when>\n\t   \t\t</choose>\n\t\t) A\n\t\tLIMIT #{int_limit} OFFSET #{int_offset}\n\t\t",
						"</select>",
						"<select id=\"cmmUse.cmmUse.page.total\" resultType=\"hashmap\" >",
						"\tselect \n\t\tceil(count(*)/ #{rows} ) as total,\n\t\t#{page} as page ,\n\t\tcount(*) records \n\tfrom \n\t(\n\t\tselect a.* from (\n",
						"\tselect ",
						"\t\tTABLE_NAME,COLUMN_NAME,CODE_CATEGORY",
						"\tfrom CMM_USE a ",
						"\twhere 1=1",
						"\t<if test=\"search_tableName != null and search_tableName !='' \">",
						"\t\tand table_name = #{search_tableName}",
						"\t</if>",
						"\t<if test=\"search_columnName != null and search_columnName !='' \">",
						"\t\tand column_name = #{search_columnName}",
						"\t</if>",
						"\t<if test=\"search_codeCategory != null and search_codeCategory !='' \">",
						"\t\tand code_category = #{search_codeCategory}",
						"\t</if>",
						"\t<if test=\"cmmCdCodeCategorySearchMultiComboArr != null and cmmCdCodeCategorySearchMultiComboArr !='' \">",
						"\t\tand code_category in ",
						"\t\t\t<foreach collection=\"cmmCdCodeCategorySearchMultiComboArr\" item=\"item\" index=\"index\" open=\"(\" separator=\",\" close=\")\" >",
						"\t\t\t#{item}",
						"\t\t\t</foreach>",
						"\t</if>",
						"\n\t\t\n",
						"\t) a\n\twhere 1=1 \t\t\t\n\t<choose>\n\t\t<when test=\"filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )\">\n\t\t\tand (\n\t\t\t<if test=\"filters.rules.size() > 0\" >\n\t\t\t\t<foreach collection=\"filters.rules\" item=\"item\" index=\"index\"  open=\"(\" separator=\"\" close=\")\">\n\t\t\t\t\t<if test=\"index > 0 \"> ${filters.groupOp} </if>\n\t\t\t\t\t<choose>\n\t\t\t\t    <when test=\"item.op =='eq' \">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ne' \">${item.field} <![CDATA[ != ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='lt' \">${item.field} <![CDATA[ < ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='le' \">${item.field} <![CDATA[ <= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='gt' \">${item.field} <![CDATA[ > ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ge' \">${item.field} <![CDATA[ >= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bw' \">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bn' \"> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='in' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ni' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ew' \"> REGEXP_LIKE(${item.field}, #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='en' \"> NOT REGEXP_LIKE(${item.field}, #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t</choose>\n\t\t\t\t</foreach>\t\n\t\t\t</if>\t\n\t\t\t<if test=\"filters.groups != null and filters.groups.size() > 0\">\n\t\t\t\t<foreach collection=\"filters.groups\" item=\"group\" index=\"group_index\"  open=\"\"  close=\"\">\n\t\t\t\t\t<if test=\"group.rules.size() > 0\">\n\t\t\t\t\t${filters.groupOp}\n\t\t\t\t\t<foreach collection=\"group.rules\" item=\"rule\" index=\"rule_index\"  open=\"(\"   separator=\"\" close=\")\">\n\t\t\t\t\t\t<if test=\"rule_index > 0 \"> ${group.groupOp} </if>\n\t\t\t\t\t\t<choose>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='eq' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ne' \">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='lt' \">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='le' \">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='gt' \">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ge' \">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bw' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bn' \"> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='in' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ni' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ew' \"> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='en' \"> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t</choose>           \t\t \n\t\t\t\t\t</foreach>\n\t\t\t\t\t</if>\n\t\t\t\t</foreach>\n\t\t\t</if> \n\t\t\t\t)\n\t\t</when>\n\t</choose>\n\t) a",
						"</select>",
						"<select id=\"cmmUse.cmmUse.one\" resultType=\"hashmap\" >",
						"\tselect ",
						"\t\tTABLE_NAME,COLUMN_NAME,CODE_CATEGORY",
						"\tfrom CMM_USE a ",
						"\twhere 1=1",
						"\t<if test=\"search_tableName != null and search_tableName !='' \">",
						"\t\tand table_name = #{search_tableName}",
						"\t</if>",
						"\t<if test=\"search_columnName != null and search_columnName !='' \">",
						"\t\tand column_name = #{search_columnName}",
						"\t</if>",
						"\t<if test=\"search_codeCategory != null and search_codeCategory !='' \">",
						"\t\tand code_category = #{search_codeCategory}",
						"\t</if>",
						"\t<if test=\"cmmCdCodeCategorySearchMultiComboArr != null and cmmCdCodeCategorySearchMultiComboArr !='' \">",
						"\t\tand code_category in ",
						"\t\t\t<foreach collection=\"cmmCdCodeCategorySearchMultiComboArr\" item=\"item\" index=\"index\" open=\"(\" separator=\",\" close=\")\" >",
						"\t\t\t#{item}",
						"\t\t\t</foreach>",
						"\t</if>",
						"\n\t\t\n",
						"</select>",
						"<update id=\"cmmUse.cmmUse.insert\" parameterType=\"hashmap\" >",
						"\t\tinsert into CMM_USE(",
						"\t\t\ttable_name,column_name,code_category",
						"\t\t\t,INS_DT",
						"\t\t)",
						"\t\tvalues (",
						"\t\t\t#{TABLE_NAME}",
						"\t\t\t,",
						"\t\t\t#{COLUMN_NAME}",
						"\t\t\t,",
						"\t\t\t#{CODE_CATEGORY}",
						"\t\t\t,now()",
						"\t\t);",
						"</update>",
						"<update id=\"cmmUse.cmmUse.edit\" parameterType=\"hashmap\" >",
						"\tupdate CMM_USE set",
						"\t\tMOD_Dt = now(),  ",
						"\t\t\t ${fieldName} = #{fieldValue}",
						"\t\twhere 1=1",
						"\t\t<choose>",
						"\t\t\t<when test=\"searchJson != null and searchJson != '' and searchJson.origindatas.size() > 0 \" >",
						"\t\t\t\t<foreach collection=\"searchJson.origindatas\" item=\"item\" index=\"index\"  >",
						"\t\t\t\t and ${item.field} = #{item.value}",
						"\t\t\t\t</foreach>",
						"\t\t\t</when>",
						"\t\t\t<otherwise>",
						"\t\t\tand 1=2",
						"\t\t\t</otherwise>",
						"\t\t</choose>",
						"\t\t;",
						"</update>",
						"<update id=\"cmmUse.cmmUse.delete\" parameterType=\"hashmap\" >",
						"\t\t\tdelete from CMM_USE",
						"\t\t\twhere 1=1",
						"\t\t\tand table_name = #{detail.TABLE_NAME}",
						"\t\t\tand column_name = #{detail.COLUMN_NAME}",
						"\t\t\t;",
						"</update>",
						"<select id=\"cmmUse.datasrc.tabCols.tableName\" resultType=\"hashmap\" >",
						"\tselect distinct ",
						"\t\tTABLE_NAME",
						"\tfrom TAB_COLS",
						"\twhere 1=1",
						"\torder by 1",
						"</select>",
						"<select id=\"cmmUse.datasrc.dynamic.tabCols.tableName\" resultType=\"hashmap\" >",
						"\tselect distinct ",
						"\t\tTABLE_NAME",
						"\tfrom TAB_COLS",
						"\twhere 1=1",
						"\torder by 1",
						"</select>",
						"<select id=\"cmmUse.dictionary.cmmUse\" resultType=\"hashmap\" >",
						"\tselect  ",
						"\tb.TABLE_NAME",
						"\t, b.COLUMN_NAME",
						"\t, a.CODE_CATEGORY",
						"\t, a.CODE_ID",
						"\t, a.CODE_NM",
						"\tfrom CMM_CD a",
						"\tleft outer join  CMM_USE b",
						"\t on a.CODE_CATEGORY = b.CODE_CATEGORY",
						"\twhere b.TABLE_NAME is not null",
						"\torder by 1,2,3,4",
						"</select>",
						"<select id=\"cmmUse.datasrc.tabCols.columnName\" resultType=\"hashmap\" >",
						"\tselect distinct ",
						"\t\tCOLUMN_NAME",
						"\tfrom TAB_COLS",
						"\twhere 1=1",
						"\torder by 1",
						"</select>",
						"<select id=\"cmmUse.datasrc.dynamic.tabCols.columnName\" resultType=\"hashmap\" >",
						"\tselect distinct ",
						"\t\tCOLUMN_NAME",
						"\tfrom TAB_COLS",
						"\twhere 1=1",
						"\t<if test=\"search_tableName != null and search_tableName !='' \">",
						"\t\tand table_name = #{search_tableName}",
						"\t</if>",
						"\torder by 1",
						"</select>",
						"<select id=\"cmmUse.datasrc.cmmCd.codeCategory\" resultType=\"hashmap\" >",
						"\tselect distinct ",
						"\t\tCODE_CATEGORY",
						"\tfrom CMM_CD",
						"\twhere 1=1",
						"\torder by 1",
						"</select>",
						"<select id=\"cmmUse.datasrc.dynamic.cmmCd.codeCategory\" resultType=\"hashmap\" >",
						"\tselect distinct ",
						"\t\tCODE_CATEGORY",
						"\tfrom CMM_CD",
						"\twhere 1=1",
						"\torder by 1",
						"</select>",
						"</mapper>"
					],
					"fn_generate": function(){
					    var _this = this;
					    var src = '<?xml version="1.0" encoding="UTF-8"?>'; this.sources.push(src);
					    src = '<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">'; this.sources.push(src);
					    src = '<mapper namespace="">'; this.sources.push(src);
					    $.each(_this.sqls, function(i,sql){
					        if(sql.type == "select" ){
					            if(sql.jsp_type == "grid"){
					                var src = "";
					                //////////////////// page list
					                src = '<' + sql.type + ' id="'+ sql.id + '.page.list"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                
					                src = $("#pagelistHead"+ _.capitalize(_this.dbType)).text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                // jstree
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                //  include foot
					                src = $("#pagelistFooter" + _.capitalize(_this.dbType)).text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					                
					                
					                /////////////////// page total
					                src = '<' + sql.type + ' id="'+ sql.id + '.page.total"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                src = $("#pageTotalHead").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                // jstree
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                //  include foot
					                src = $("#pageTotalFooter").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					
					
					
					
					                ////////////////////// detail one select
					                src = '<' + sql.type + ' id="'+ sql.id + '.one"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                //  include foot
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					
					
					                ////////////////////// detail edit
					            } else {
					                src = '<' + sql.type + ' id="'+ sql.id + '" resultType="hashmap" >' ;
					                _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					            }
					        }else if (sql.type == 'insert'){
					            src = '<update id="'+ sql.id + '" parameterType="hashmap" >' ;            
					            _this.sources.push(src);
					            $.each(sql.contents, function(j,content){
					                src = "\	" + content ; _this.sources.push(src);
					            });
					            src = '</update>'; _this.sources.push(src);
					        }else if (sql.type == 'update'){
					            src = '<update id="'+ sql.id + '" parameterType="hashmap" >' ;
					            
					            _this.sources.push(src);
					            $.each(sql.contents, function(j,content){
					                src = "\	" + content ; _this.sources.push(src);
					            });
					            src = '</update>'; _this.sources.push(src);
					        }
					        
					    });
					    src = '</mapper>'; this.sources.push(src);
					
					}

				},
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page not use in general",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_use\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.dictionary.cmmUse\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"table_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"table_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"table_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.tableName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.tableName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"column_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"column_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"column_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.columnName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.columnName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"cmm_cd\",",
					"\t\t\t\t\"parentColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"code_category\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"cmm_cd\",",
					"\t\t\t\t\"topColumnName\": \"code_category\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"code_category\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.cmmCd.codeCategory\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.cmmCd.codeCategory\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar childReferences = [];",
					"\t\tvar jstreeInfo = {",
					"\t\t\t\"idList\": [",
					"\t\t\t\t\"table_name_column_name_jsTreeSearch\"",
					"\t\t\t],",
					"\t\t\t\"search\": function(){\n\t\t\t                var _this = this;\n\t\t\t                if (_this.idList.length == 0)\n\t\t\t                    return;\n\t\t\t                var selJsTree3 = [];\n\t\t\t                $.each(_this.idList, function(i,vJsTreeId){\n\t\t\t                    var vJsTree = $(\"#\" + vJsTreeId ).jstree(true);\n\t\t\t                    // var selJsTree = _.filter(vJsTree._model.data , {state : {selected: true } });\n\t\t\t                    var selJsTree = _.filter(vJsTree._model.data , function( data ){\n\t\t\t                        // if (data.id == \"#\")\n\t\t\t                        // \treturn false;\n\t\t\t                        if (data['original'] == null || data.original[\"field\"] == null)\n\t\t\t                            return false;\n\t\t\t                        if ( data.state.selected == null ) \n\t\t\t                            return false;\n\t\t\t                        var vSelected = data.state.selected;\n\t\t\t                        if ( vSelected)\n\t\t\t                            return true;\n\t\t\t                        $.each(vJsTree.get_node(data.id).children_d, function(i, nodeId){\n\t\t\t                            var vNode = vJsTree.get_node(nodeId);\n\t\t\t                            if ( vNode.state.selected) {\n\t\t\t                                vSelected = true;\n\t\t\t                                return false;\n\t\t\t                            }\n\t\t\t                        });\n\t\t\t                        // if ( vJsTree.get_bottom_checked(data.id).length > 0 )\n\t\t\t                        // \treturn true;\n\t\t\t\n\t\t\t                        return vSelected;\n\t\t\t\n\t\t\t                    });\n\t\t\t                    var selJsTree1 = _.map(selJsTree, function(data, i){\n\t\t\t                        var obj = {};\n\t\t\t\n\t\t\t                        // // Customize if field is different with Original field\n\t\t\t                        // var _datas = data.id.split(\";;;\");\n\t\t\t                        // var _col = _datas[1];\n\t\t\t                        // if ( _col != null && data.original.field != 'GUBUN' ){\n\t\t\t                        //     var _cols = _col.split(\"/\");\n\t\t\t                        //     var textIndex = _.findIndex(_datas.slice(2), function(o) { return o == data.text; });\n\t\t\t                        //     var keyIndex   = textIndex - 0;\n\t\t\t                        //     var _field = _cols[keyIndex];\n\t\t\t                        //     if ( _field == null) \n\t\t\t                        //         debugger;\n\t\t\t                        //     var _field1 = decamelize(_field,'_')\n\t\t\t                        //     obj[ _field1.toUpperCase() ] = data.text; \n\t\t\t                        // }else{\n\t\t\t                        //     // obj[_.camelCase(data.original.field)] = data.text;\n\t\t\t                        //     obj[ data.original.field] = data.text;\n\t\t\t                        // }\n\t\t\t                        obj[ data.original.field] = data.original.value;\n\t\t\t\n\t\t\t                        return obj;\n\t\t\t\n\t\t\t                    });\n\t\t\t                    var selJsTree2 = serializeArrayJSON(selJsTree1);\n\t\t\t                    \n\t\t\t                    $.each(selJsTree2, function(field, data){\n\t\t\t                        var obj = {\n\t\t\t                            field : field ,\n\t\t\t                            // value: [].concat(data)\n\t\t\t                            value: data , \n\t\t\t                            isArray : _.isArray(data)\n\t\t\t                        };\n\t\t\t                        selJsTree3.push( obj );\n\t\t\t                    });\n\t\t\t                    \n\t\t\t                });\n\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: selJsTree3}));\n\t\t\t                // var parameter = $(\"#form\").serializeFormJSON();\n\t\t\t                // var removedList = _.remove(selJsTree3,{field:'GUBUN'} );\n\t\t\t            }\n",
					"\t\t};",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvoDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRsvoTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv11-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv01-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv21-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvojRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRtWsDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv2V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRtWsTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv31-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar v_schema_search = {",
					"\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\"id\": \"searchConditionHorizontalLayout\",",
					"\t\t\t\"name\": \"searchConditionHorizontalLayout\",",
					"\t\t\t\"label\": \"\",",
					"\t\t\t\"controlCss\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"code\": \"min-height\",",
					"\t\t\t\t\t\"value\": \"30px\"",
					"\t\t\t\t}",
					"\t\t\t],",
					"\t\t\t\"elements\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\"cls\": \"\",",
					"\t\t\t\t\t\"containerCss\": [],",
					"\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"containerCss\": [],",
					"\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\"id\": \"searchVervical\",",
					"\t\t\t\t\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"id\": \"searchHorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"name\": \"searchHorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"code\": \"min-height\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"value\": \"25px\"",
					"\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"SearchHeader\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"id\": \"cmmCdCodeCategorySearchHeader\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"name\": \"cmmCdCodeCategorySearchHeader\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"text\": \"Codecategory\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"width\": \"100px\"",
					"\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"multiCombo\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"id\": \"cmmCdCodeCategorySearchMultiCombo\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"name\": \"cmmCdCodeCategorySearchMultiCombo\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"text\": \"Code_category\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"jpa_column\": {",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"parent_column\": \"code_category\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"child_column\": \"code_category\"",
					"\t\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t\t\"sqlId\": \"cmmUse.cmmCd.multicombo\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"entityId\": \"cmm_cd\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"multiselectOpt\": {",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"multiple\": true",
					"\t\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t\t\"width\": \"150px\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"options\": {",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"cd\": \"CODE_CATEGORY\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"CODE_CATEGORY\"",
					"\t\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t\t\"data\": function(){\n\t\t\t\t\t\t\t\t\t\t\t                var rtnList = [];\n\t\t\t\t\t\t\t\t\t\t\t                $.ajax({\n\t\t\t\t\t\t\t\t\t\t\t                    url: \"./genericlListJson.html\",\n\t\t\t\t\t\t\t\t\t\t\t                    data: {\"sqlid\": \"cmmUse.cmmCd.multicombo\"}, \n\t\t\t\t\t\t\t\t\t\t\t                    async: false,\n\t\t\t\t\t\t\t\t\t\t\t                    success:  function(response){\n\t\t\t\t\t\t\t\t\t\t\t                        // rtnList = response.dataList;\n\t\t\t\t\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t\t\t\t\t                        $.each(response.dataList,function(i,d){\n\t\t\t\t\t\t\t\t\t\t\t                            if(d != null){\n\t\t\t\t\t\t\t\t\t\t\t                                rtnList.push(d);\n\t\t\t\t\t\t\t\t\t\t\t                                if (response.dataList.length <= 100 )\n\t\t\t\t\t\t\t\t\t\t\t                                    d[\"selected\"] = \"selected\";\n\t\t\t\t\t\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\t\t\t\t\t                                \n\t\t\t\t\t\t\t\t\t\t\t                        });\n\t\t\t\t\t\t\t\t\t\t\t                    }\n\t\t\t\t\t\t\t\t\t\t\t                });\n\t\t\t\t\t\t\t\t\t\t\t                return rtnList;\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t            },\n",
					"\t\t\t\t\t\t\t\t\t\t\t\"events\": {",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"change\": function(e){\n\t\t\t\t\t\t\t\t\t\t\t\t                    fn_search();\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n",
					"\t\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"SearchHeader\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"id\": \"table_name_column_name_SearchHeader\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"name\": \"table_name_column_name_SearchHeader\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"text\": \"Table_name ...\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"width\": \"100px\"",
					"\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"type\": \"jsTreeSearch\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"id\": \"table_name_column_name_jsTreeSearch\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"name\": \"table_name_column_name_jsTreeSearch\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"label\": \"tabColsTree Search\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"text\": \" \",",
					"\t\t\t\t\t\t\t\t\t\t\t\"keys\": [",
					"\t\t\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\"codeColumn\": \"table_name\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\"nameColumn\": \"table_name\"",
					"\t\t\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\"codeColumn\": \"column_name\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\"nameColumn\": \"column_name\"",
					"\t\t\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\t\t\t\t\"rootText\": \"Select tableName/columnName\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"relation\": {",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"columns\": [",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"parentColumn\": \"table_name\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"childColumn\": \"table_name\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"index\": 0",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"parentColumn\": \"column_name\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"childColumn\": \"column_name\",",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"index\": 1",
					"\t\t\t\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t\t\t\t]",
					"\t\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t\t\"popValues\": [],",
					"\t\t\t\t\t\t\t\t\t\t\t\"events\": {",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"changed.jstree\": function (e, data) {\n\t\t\t\t\t\t\t\t\t\t\t\t                if (data.event != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    fn_search();\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t\t\t\t            },\n",
					"\t\t\t\t\t\t\t\t\t\t\t\t\"loaded.jstree\": function (e, data) {\n\t\t\t\t\t\t\t\t\t\t\t\t                // getGridData();\n\t\t\t\t\t\t\t\t\t\t\t\t            }\n",
					"\t\t\t\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t\t\t\t\"sqlId\": \"cmmUse.tabCols.jstreesearch\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"data\": function(){\n\t\t\t\t\t\t\t\t\t\t\t        var _this = this;\n\t\t\t\t\t\t\t\t\t\t\t        var rtnList = [];\n\t\t\t\t\t\t\t\t\t\t\t        $.ajax({\n\t\t\t\t\t\t\t\t\t\t\t            url: \"./genericlListJson.html\",\n\t\t\t\t\t\t\t\t\t\t\t            data: {\"sqlid\": _this.sqlId }, \n\t\t\t\t\t\t\t\t\t\t\t            async: false,\n\t\t\t\t\t\t\t\t\t\t\t            success:  function(response){\n\t\t\t\t\t\t\t\t\t\t\t                rtnList = response.dataList;\n\t\t\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t\t\t\t\t\t        });\n\t\t\t\t\t\t\t\t\t\t\t        return rtnList;\n\t\t\t\t\t\t\t\t\t\t\t    },\n",
					"\t\t\t\t\t\t\t\t\t\t\t\"entityId\": \"tab_cols\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"width\": \"150px\"",
					"\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t]",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t]",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\t\t\"cls\": \"btn_txt\",",
					"\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"code\": \"margin-left\",",
					"\t\t\t\t\t\t\t\t\t\"value\": \"10px\"",
					"\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"code\": \"float\",",
					"\t\t\t\t\t\t\t\t\t\"value\": \"right\"",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"type\": \"ButtonBootstrap\",",
					"\t\t\t\t\t\t\t\t\t\"id\": \"btnSearch\",",
					"\t\t\t\t\t\t\t\t\t\"name\": \"btnSearch\",",
					"\t\t\t\t\t\t\t\t\t\"label\": \"SEARCH\",",
					"\t\t\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"code\": \"margin-right\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"value\": \"3px\"",
					"\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\t\t\"events\": {",
					"\t\t\t\t\t\t\t\t\t\t\"click\": function(){\n\t\t\t\t\t\t\t\t\t\t                                                fn_search();\n\t\t\t\t\t\t\t\t\t\t                                            }\n",
					"\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t]",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t]",
					"\t\t\t\t}",
					"\t\t\t]",
					"\t\t};",
					"\t\tvar v_schema_content = {",
					"\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\"id\": \"contentVertical\",",
					"\t\t\t\"name\": \"contentVertical\",",
					"\t\t\t\"label\": \"\",",
					"\t\t\t\"elements\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"type\": \"grid\",",
					"\t\t\t\t\t\"id\": \"cmmUseGrid\",",
					"\t\t\t\t\t\"name\": \"cmmUseGrid\",",
					"\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\"text\": \"Cmm_use\",",
					"\t\t\t\t\t\"sqlId\": \"cmmUse.cmmUse\",",
					"\t\t\t\t\t\"entityId\": \"cmm_use\",",
					"\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"width\",",
					"\t\t\t\t\t\t\t\"value\": \"100%\"",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"margin-top\",",
					"\t\t\t\t\t\t\t\"value\": \"10px\"",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"background-color\",",
					"\t\t\t\t\t\t\t\"value\": \"#FFF\"",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t],",
					"\t\t\t\t\t\"gridOpt\": {",
					"\t\t\t\t\t\t\"datatype\": \"json\",",
					"\t\t\t\t\t\t\"pager\": \"#cmmUseGridPager\",",
					"\t\t\t\t\t\t\"sqlId\": \"cmmUse.cmmUse\",",
					"\t\t\t\t\t\t\"gridId\": \"cmmUseGrid\",",
					"\t\t\t\t\t\t\"modelVarName\": \"testEntityJpa\",",
					"\t\t\t\t\t\t\"url\": function(){ \n\t\t\t\t\t\t                    return\t\"./genericlListPageJson.do?\" + \n\t\t\t\t\t\t                        $(\"#form\").serialize() + \n\t\t\t\t\t\t                        \"&sqlid=cmmUse.cmmUse.page.list\" +  \n\t\t\t\t\t\t                        \"&paging_sqlid=cmmUse.cmmUse.page.total\" \n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"editurl\": \"./ssdCusDummySaveJson.html\",",
					"\t\t\t\t\t\t\"styleUI\": \"Bootstrap\",",
					"\t\t\t\t\t\t\"viewrecords\": true,",
					"\t\t\t\t\t\t\"width\": \"100%\",",
					"\t\t\t\t\t\t\"autowidth\": true,",
					"\t\t\t\t\t\t\"height\": 650,",
					"\t\t\t\t\t\t\"multiselect\": false,",
					"\t\t\t\t\t\t\"multiboxonly\": true,",
					"\t\t\t\t\t\t\"multiSort\": true,",
					"\t\t\t\t\t\t\"rowNum\": 20,",
					"\t\t\t\t\t\t\"rowList\": [",
					"\t\t\t\t\t\t\t5,",
					"\t\t\t\t\t\t\t10,",
					"\t\t\t\t\t\t\t15,",
					"\t\t\t\t\t\t\t20,",
					"\t\t\t\t\t\t\t30",
					"\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\"emptyrecords\": \"No records to view\",",
					"\t\t\t\t\t\t\"gridComplete\": function () {\n\t\t\t\t\t\t                    var grid = $(this).jqGrid();\n\t\t\t\t\t\t                    var gridParam = grid.getGridParam();\n\t\t\t\t\t\t                    var show_filter = true;\n\t\t\t\t\t\t                    if ( gridParam.filterToolbarShow != null \n\t\t\t\t\t\t                        && gridParam.filterToolbarShow == false )\n\t\t\t\t\t\t                        show_filter = false; \n\t\t\t\t\t\t                    if (show_filter){\n\t\t\t\t\t\t                        grid.jqGrid('filterToolbar',\n\t\t\t\t\t\t                        {\n\t\t\t\t\t\t                            defaultSearch:'cn'\n\t\t\t\t\t\t                            // JSON stringify all data from search, including search toolbar operators\n\t\t\t\t\t\t                            ,stringResult: true\n\t\t\t\t\t\t                            // instuct the grid toolbar to show the search options\n\t\t\t\t\t\t                            // ,searchOperators: true\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        );\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    grid.navGrid(gridParam.pager ,\n\t\t\t\t\t\t                        // the buttons to appear on the toolbar of the grid\n\t\t\t\t\t\t                        { edit: true, add: true, del: true, search: false,  refresh: true, view: true, position: \"left\", cloneToTop: false  \n\t\t\t\t\t\t                            ,addfunc: function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'add');\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                            , editfunc : function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'edit');\n\t\t\t\t\t\t                            }, viewfunc : function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'view');\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        // options for the Edit Dialog\n\t\t\t\t\t\t                        ,{  }\n\t\t\t\t\t\t                        // options for the Script Master Add Dialog\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        ,{\t\n\t\t\t\t\t\t                            addCaption: \"Add Script Master\",\n\t\t\t\t\t\t                            modal:true,\n\t\t\t\t\t\t                            recreateForm: true,\n\t\t\t\t\t\t                            closeAfterAdd: true,\n\t\t\t\t\t\t                            reloadAfterSubmit: true,\n\t\t\t\t\t\t                            //template: template,\n\t\t\t\t\t\t                            errorTextFormat: function (data) {\n\t\t\t\t\t\t                                return 'Error: ' + data.responseText\n\t\t\t\t\t\t                            },\n\t\t\t\t\t\t                            onInitializeForm : function(formid){\n\t\t\t\t\t\t                                $(formid).attr('method','POST');\n\t\t\t\t\t\t                                $(formid).attr('action','');\n\t\t\t\t\t\t                                $(formid).attr('enctype','multipart/form-data');\n\t\t\t\t\t\t                                $(formid).css(\"font-size\",\"14px\");\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                            },\n\t\t\t\t\t\t                            afterSubmit: function(response, postdata) \n\t\t\t\t\t\t                            { \n\t\t\t\t\t\t                                var grid = $(this).jqGrid();\n\t\t\t\t\t\t                                var gridParam = grid.getGridParam();\n\t\t\t\t\t\t                                var formdata = this.ownerDocument.FormPost;\n\t\t\t\t\t\t                                var fd = new FormData(formdata);  \t\n\t\t\t\t\t\t                                var response1 = {};\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                $.ajax({\n\t\t\t\t\t\t                                    url: \"./genericSaveJson.do?sqlid=\" + gridParam.sqlId + \".insert\",\n\t\t\t\t\t\t                                    type: \"POST\",\n\t\t\t\t\t\t                                    data: fd, \n\t\t\t\t\t\t                                    async: false,\n\t\t\t\t\t\t                                    cache: false,\n\t\t\t\t\t\t                                    contentType: false,\n\t\t\t\t\t\t                                    processData: false,\n\t\t\t\t\t\t                                    success:  function(data){\n\t\t\t\t\t\t                                        response1 = data;\n\t\t\t\t\t\t                                        if(response1.result == 'success'){\n\t\t\t\t\t\t                                            // Cumtomise...\n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    }\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //return [success,message,new_id] ;\n\t\t\t\t\t\t                                if(response1.result == 'success'){\n\t\t\t\t\t\t                                    //$(this).trigger('reloadGrid'); \n\t\t\t\t\t\t                                    return [true, response1.result, ''];\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                else\n\t\t\t\t\t\t                                    return [false, response1.result + \":<br/>\" + response1.message , ''];\n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                            }                         \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        // options for the Script Master Del Dialog \n\t\t\t\t\t\t                        ,{  \n\t\t\t\t\t\t                            reloadAfterSubmit: true,\n\t\t\t\t\t\t                            afterSubmit: function(response, postdata) { \n\t\t\t\t\t\t                                //$(\"#refresh_grid_script\").hide();\n\t\t\t\t\t\t                                var grid = $(this);\n\t\t\t\t\t\t                                var paramObj = {\n\t\t\t\t\t\t                                    delRows : []\n\t\t\t\t\t\t                                };\n\t\t\t\t\t\t                                $.each(postdata.id.split(\",\"),function(i,rowid){\n\t\t\t\t\t\t                                    var row = grid.getRowData(rowid);\n\t\t\t\t\t\t                                    paramObj.delRows.push(row);\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //  \n\t\t\t\t\t\t                                paramObj.loop_id = \"delRows\";\n\t\t\t\t\t\t                                $.ajax({\n\t\t\t\t\t\t                                    url: \"./genericSaveJson.html\",\n\t\t\t\t\t\t                                    type: \"POST\",\n\t\t\t\t\t\t                                    data: {\n\t\t\t\t\t\t                                        searchJson: JSON.stringify(paramObj),\n\t\t\t\t\t\t                                        sqlid: \"cmmUse.cmmUse.delete\"\n\t\t\t\t\t\t                                    }  , \n\t\t\t\t\t\t                                    async: false,\n\t\t\t\t\t\t                                    success:  function(data){\n\t\t\t\t\t\t                                        response1 = data;\n\t\t\t\t\t\t                                        if(response1.result == 'success'){\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                            msg = \"Del Success!\";\n\t\t\t\t\t\t                                            $(\"#dialog-confirm\").html(msg);\n\t\t\t\t\t\t                                            $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                                resizable: false,\n\t\t\t\t\t\t                                                modal: true,\n\t\t\t\t\t\t                                                title: \"Success\",\n\t\t\t\t\t\t                                                //height: 200,\n\t\t\t\t\t\t                                                width: 200,\n\t\t\t\t\t\t                                                dialogClass: 'no-close',\n\t\t\t\t\t\t                                                closeOnEscape: false,\n\t\t\t\t\t\t                                                buttons: [\n\t\t\t\t\t\t                                                    {\n\t\t\t\t\t\t                                                        text: \"OK\",\n\t\t\t\t\t\t                                                        click: function() {\n\t\t\t\t\t\t                                                            $( this ).dialog( \"close\" );\t\t\n\t\t\t\t\t\t                                                            // fn_search_script();\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                    }\n\t\t\t\t\t\t                                                ]\n\t\t\t\t\t\t                                            });\n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    }\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //return [success,message,new_id] ;\n\t\t\t\t\t\t                                if(response1.result == 'success'){\n\t\t\t\t\t\t                                    //$(this).trigger('reloadGrid'); \n\t\t\t\t\t\t                                    return [true, response1.result, ''];\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                else\n\t\t\t\t\t\t                                    return [false, response1.result + \":<br/>\" + response1.message , ''];\n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        ,{ \n\t\t\t\t\t\t                            multipleSearch: true,\n\t\t\t\t\t\t                            multipleGroup: true\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                    );\n\t\t\t\t\t\t                    if ($(gridParam.pager).find(\".ui-pg-button[title=Copy]\").length == 0 && true) {\n\t\t\t\t\t\t                        grid.navButtonAdd(gridParam.pager, {\n\t\t\t\t\t\t                            caption : \"\", \n\t\t\t\t\t\t                            title: \"Copy\",\n\t\t\t\t\t\t                            buttonicon : \"glyphicon-copy\",\n\t\t\t\t\t\t                            onClickButton: function(){ \n\t\t\t\t\t\t                                var theGrid = $(this).jqGrid();\n\t\t\t\t\t\t                                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');\n\t\t\t\t\t\t                                if ( parentRowKey == null )   {\n\t\t\t\t\t\t                                    $(\"#dialog-confirm\").html(\"Please, select row\");\n\t\t\t\t\t\t                                    $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                        resizable: false,\n\t\t\t\t\t\t                                        modal: true,\n\t\t\t\t\t\t                                        title: \"Error\",\n\t\t\t\t\t\t                                        //height: 200,\n\t\t\t\t\t\t                                        width: 300,\n\t\t\t\t\t\t                                        dialogClass: 'no-close',\n\t\t\t\t\t\t                                        closeOnEscape: false,\n\t\t\t\t\t\t                                        buttons: [\n\t\t\t\t\t\t                                            {\n\t\t\t\t\t\t                                                text: \"OK\",\n\t\t\t\t\t\t                                                click: function() {\n\t\t\t\t\t\t                                                    $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                            }\n\t\t\t\t\t\t                                        ]\n\t\t\t\t\t\t                                    });\n\t\t\t\t\t\t                                    return;\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'copy');\n\t\t\t\t\t\t                                // alert(\"Deleting Row\");\n\t\t\t\t\t\t                            }, \n\t\t\t\t\t\t                            position:\"last\"\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        var td_cp = $(gridParam.pager).find(\".ui-pg-table .ui-pg-button[title='Copy']\")\n\t\t\t\t\t\t                        var td_add = $(gridParam.pager).find(\".ui-pg-table .ui-pg-button[title='Add new row']\");\n\t\t\t\t\t\t                        td_add.after(td_cp);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"onCellSelect\": function (rowId, iCol, content, event) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var grid = $(this).jqGrid();\n\t\t\t\t\t\t                    var row = grid.jqGrid('getRowData',rowId);\n\t\t\t\t\t\t                    var cms = grid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\t\t\t                    var cm = cms[iCol];\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var oFrm = document.getElementById(\"form1\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var v_property = _.find(gridProperties, { _name : cm.name.toLowerCase() });\n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    //customize\n\t\t\t\t\t\t                    var somCondition = ( v_property != null && \n\t\t\t\t\t\t                        v_property._documentation != null &&\n\t\t\t\t\t\t                        v_property._documentation.file_info != null );\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    if ( somCondition ){\n\t\t\t\t\t\t                        var path_column = v_property._documentation.file_info.path_column ;\n\t\t\t\t\t\t                        var path = '.'+ row[path_column] ;\n\t\t\t\t\t\t                        if((/\\\\.(txt|config|pdf|jpg|jpeg|gif|png|log)$/i).test(path)){\n\t\t\t\t\t\t                            var newWin1 = window.open(\"\", \"filedownload\", \"width=1200,height=900, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            oFrm.action =  path;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = 'filedownload'; \n\t\t\t\t\t\t                            oFrm.submit();\t\t\n\t\t\t\t\t\t                            newWin1.focus();\n\t\t\t\t\t\t                        }else if(row[cm.name].match(/\\.([\\w]+)$/i) != null){\n\t\t\t\t\t\t                            //var src = \"/dashboard/filedownloadJson.do\";\n\t\t\t\t\t\t                            //src += \"?filename=\" + row.FILE_NAME;\n\t\t\t\t\t\t                            //src +=\"&path=\" + row.FILE_PATH;\n\t\t\t\t\t\t                            //document.getElementById('file_iframe').src =  src;\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6\n\t\t\t\t\t\t                            if (isIE){\n\t\t\t\t\t\t                                //var fileData = ['\\\\ufeff' + \".\" + row.FILE_PATH];\n\t\t\t\t\t\t                                //var blobObject = new Blob(fileData);\n\t\t\t\t\t\t                                //window.navigator.msSaveOrOpenBlob(blobObject, row.FILE_NAME);\n\t\t\t\t\t\t                                var link = document.createElement('a');\n\t\t\t\t\t\t                                // customize for same path and name ==> formalize \n\t\t\t\t\t\t                                var value_split = row[cm.name].split(\"/\");\n\t\t\t\t\t\t                                var return_text = value_split.pop();\n\t\t\t\t\t\t                                // link.download = row[cm.name];\n\t\t\t\t\t\t                                link.download = return_text;\n\t\t\t\t\t\t                                link.href = \".\" + row[path_column] ;\n\t\t\t\t\t\t                                //Firefox requires the link to be in the body\n\t\t\t\t\t\t                                document.body.appendChild(link);\n\t\t\t\t\t\t                                link.click();\n\t\t\t\t\t\t                                link.target = '_blank';\n\t\t\t\t\t\t                                document.body.removeChild(link);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            }else{\n\t\t\t\t\t\t                                var link = document.createElement('a');\n\t\t\t\t\t\t                                // customize for same path and name ==> formalize \n\t\t\t\t\t\t                                var value_split = row[cm.name].split(\"/\");\n\t\t\t\t\t\t                                var return_text = value_split.pop();\n\t\t\t\t\t\t                                // link.download = row[cm.name];\n\t\t\t\t\t\t                                link.download = return_text;\n\t\t\t\t\t\t                                link.href = \".\" + row[path_column] ;\n\t\t\t\t\t\t                                //Firefox requires the link to be in the body\n\t\t\t\t\t\t                                document.body.appendChild(link);\n\t\t\t\t\t\t                                link.click();\n\t\t\t\t\t\t                                document.body.removeChild(link);\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                                                                    \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"subGrid\": false,",
					"\t\t\t\t\t\t\"subgridtype\": \"json\",",
					"\t\t\t\t\t\t\"entityId\": \"cmm_use\",",
					"\t\t\t\t\t\t\"subGridRowExpanded\": function(parentRowID, parentRowKey){\n\t\t\t\t\t\t                        var theGrid = $(this).jqGrid();\n\t\t\t\t\t\t                        var row = theGrid.jqGrid('getRowData',parentRowKey);\n\t\t\t\t\t\t                        var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\t\t\t                        var searchRow = {};\n\t\t\t\t\t\t                        var vGridOpt  = theGrid.getGridParam();\n\t\t\t\t\t\t                        $.each(row,function(k,v){\n\t\t\t\t\t\t                            // searchRow['search_' + _.camelCase(k)] = v;\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        var vKeys = [];\n\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t                        $.each([].concat(gridProperties), function(i, prop){\n\t\t\t\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t\t\t\t                            if (vId != null){\n\t\t\t\t\t\t                                vKeys.push(prop._name.toUpperCase());\n\t\t\t\t\t\t                                searchRow['search_' + _.camelCase(prop._name)] = row[prop._name.toUpperCase()];\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        // ***  grid ***//\n\t\t\t\t\t\t                        var childDivId = parentRowID + \"_div_input\";\n\t\t\t\t\t\t                        var childDiv = $(document.createElement(\"div\"));\n\t\t\t\t\t\t                        childDiv.attr(\"id\",childDivId);\n\t\t\t\t\t\t                        // add a table and pager HTML elements to the parent grid row - we will render the child grid here\t\t\t    \t\t\t\n\t\t\t\t\t\t                        $('#' + parentRowID).append(childDiv);\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        var detailList = [];\n\t\t\t\t\t\t                        $.ajax({\n\t\t\t\t\t\t                            type: \"POST\",\n\t\t\t\t\t\t                            url: \"./genericlListJson.do?sqlid=cmmUse.cmmUse.one\" ,\n\t\t\t\t\t\t                            data: searchRow ,\n\t\t\t\t\t\t                            //data: $(\"#form\").serialize(), \n\t\t\t\t\t\t                            async: false,\n\t\t\t\t\t\t                            success:  function(response){\n\t\t\t\t\t\t                                detailList  = response.dataList;                            \n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        if (detailList.length == 0 ){\n\t\t\t\t\t\t                            childDiv.text(\"no data\");\n\t\t\t\t\t\t                            return;\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        var schema1 = {\n\t\t\t\t\t\t                            containerId: childDivId,\n\t\t\t\t\t\t                            type:'Vertical',\n\t\t\t\t\t\t                            label: '',\n\t\t\t\t\t\t                            elements: [\n\t\t\t\t\t\t                                {\n\t\t\t\t\t\t                                    label: \"\",\n\t\t\t\t\t\t                                    type: 'Group',\n\t\t\t\t\t\t                                    elements: [\n\t\t\t\t\t\t                                        {\n\t\t\t\t\t\t                                            type: \"inline_edit\",\n\t\t\t\t\t\t                                            cols: 1,\n\t\t\t\t\t\t                                            data: function(){ \n\t\t\t\t\t\t                                                return detailList[0];\n\t\t\t\t\t\t                                            },\n\t\t\t\t\t\t                                            options : {\n\t\t\t\t\t\t                                                keys : vKeys ,\n\t\t\t\t\t\t                                                fn_change: function( input ){\n\t\t\t\t\t\t                                                    //\n\t\t\t\t\t\t                                                    // if(this.props.options.name == 'SCRIPT_NAME'){\n\t\t\t\t\t\t                                                    // \tvar convert = this.reactObjects.find(function(td){\n\t\t\t\t\t\t                                                    // \t\treturn td.props.options.name == 'CONVERT_SCRIPT';\n\t\t\t\t\t\t                                                    // \t});\t\n\t\t\t\t\t\t                                                    // \t//convert digit\n\t\t\t\t\t\t                                                    // \t//var v_hax = this.state.value;\n\t\t\t\t\t\t                                                    // \tvar v_hax = input;\n\t\t\t\t\t\t                                                    // \tvar v_digit = [];\n\t\t\t\t\t\t                                                    // \t$.each(v_hax.split(\" \"), function(i,str){\n\t\t\t\t\t\t                                                    // \t\tvar d = \"\";\n\t\t\t\t\t\t                                                    // \t\tif(str.startsWith(\"0x\")){\n\t\t\t\t\t\t                                                    // \t\t\tv_digit.push(parseInt(str,16));\n\t\t\t\t\t\t                                                    // \t\t}else{\n\t\t\t\t\t\t                                                    // \t\t\tv_digit.push(str);\n\t\t\t\t\t\t                                                    // \t\t}\n\t\t\t\t\t\t                                                    // \t});\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                                                    // \tconvert.setState({value : v_digit.join(\" \")});\n\t\t\t\t\t\t                                                        \n\t\t\t\t\t\t                                                    // }\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                fn_submit: function(){\n\t\t\t\t\t\t                                                    //alert(\"submit function defined\");\n\t\t\t\t\t\t                                                    var state = true;\n\t\t\t\t\t\t                                                    var paramObj = {\n\t\t\t\t\t\t                                                        //origindatas: this.props.options.keys\n\t\t\t\t\t\t                                                        origindatas: this.state.keys\n\t\t\t\t\t\t                                                    };\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    if(this.props.options.value == this.state.value)\n\t\t\t\t\t\t                                                        return state;\n\t\t\t\t\t\t                                                    $.ajax({\n\t\t\t\t\t\t                                                        url: \"./genericSaveJson.html\",\n\t\t\t\t\t\t                                                        type: \"POST\",\n\t\t\t\t\t\t                                                        data: {\n\t\t\t\t\t\t                                                            searchJson: JSON.stringify(paramObj),\n\t\t\t\t\t\t                                                            fieldName: this.state.name,\n\t\t\t\t\t\t                                                            fieldValue: this.state.value,\n\t\t\t\t\t\t                                                            fieldValueOrigin: this.state.value_origin,\n\t\t\t\t\t\t                                                            userId: $(\"#userId\").val(),\n\t\t\t\t\t\t                                                            // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t\t\t\t                                                            sqlid: \"cmmUse.cmmUse.edit\"\n\t\t\t\t\t\t                                                        }, \n\t\t\t\t\t\t                                                        async: false,\t\t\t                    \t\t\n\t\t\t\t\t\t                                                        success:  function(data){\n\t\t\t\t\t\t                                                            response1 = data;\n\t\t\t\t\t\t                                                            if(response1.result != 'success'){\n\t\t\t\t\t\t                                                                state = false;\n\t\t\t\t\t\t                                                                msg = \"Save Success!\";\n\t\t\t\t\t\t                                                                $(\"#dialog-confirm\").html(response1.message);\n\t\t\t\t\t\t                                                                $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                                                    resizable: false,\n\t\t\t\t\t\t                                                                    modal: true,\n\t\t\t\t\t\t                                                                    title: \"Error\",\n\t\t\t\t\t\t                                                                    //height: 200,\n\t\t\t\t\t\t                                                                    width: 300,\n\t\t\t\t\t\t                                                                    dialogClass: 'no-close',\n\t\t\t\t\t\t                                                                    closeOnEscape: false,\n\t\t\t\t\t\t                                                                    buttons: [\n\t\t\t\t\t\t                                                                        {\n\t\t\t\t\t\t                                                                            text: \"OK\",\n\t\t\t\t\t\t                                                                            click: function() {\n\t\t\t\t\t\t                                                                            $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t\t\t\t                                                                            }\n\t\t\t\t\t\t                                                                        }\n\t\t\t\t\t\t                                                                    ]\n\t\t\t\t\t\t                                                                });\n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                            }\t\t\t\t\t\t                    \t\t\t\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    return state;\n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    $.each(this,function(i,react){\n\t\t\t\t\t\t                                                        if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t\t\t\t                                                            var vobject = {};\n\t\t\t\t\t\t                                                            vobject[react.state.name] = react.state.value;\n\t\t\t\t\t\t                                                            theGrid.setRowData(parentRowKey,vobject);\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                        \n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                progressObject: parent.$(\"#loader\")\n\t\t\t\t\t\t                                            },\n\t\t\t\t\t\t                                            items: _.map([].concat(gridProperties), function(prop){\n\t\t\t\t\t\t                                                var _cms = cms;\n\t\t\t\t\t\t                                                var rtnObj = {\n\t\t\t\t\t\t                                                    label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t\t\t\t                                                    col : prop._name.toUpperCase() \n\t\t\t\t\t\t                                                };\n\t\t\t\t\t\t                                                let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t\t\t\t                                                if (vId != null){\n\t\t\t\t\t\t                                                    rtnObj.editable = false;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                // list hiden columns\n\t\t\t\t\t\t                                                if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t\t\t\t                                                    rtnObj.isDateTime = true;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                                var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t\t\t\t                                                if(vEdit != null){\n\t\t\t\t\t\t                                                    rtnObj.edit_tag = vEdit._value;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t\t\t\t                                                if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                    // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t\t\t\t                                                    var options = [];\n\t\t\t\t\t\t                                                    $.each(cm.editoptions.value, function (k, v) {\n\t\t\t\t\t\t                                                        var opt = {value: k, label: v};\n\t\t\t\t\t\t                                                        options.push(opt);\n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    rtnObj.selectOptions = options;\n\t\t\t\t\t\t                                                    rtnObj.edit_tag = cm.edittype;\n\t\t\t\t\t\t                                                    if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t\t\t\t                                                        rtnObj.edit_tag = 'input';\n\t\t\t\t\t\t                                                        rtnObj.editable = false;\n\t\t\t\t\t\t                                                    }\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                                return rtnObj;\n\t\t\t\t\t\t                                            })\n\t\t\t\t\t\t                                            \n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                                    ]\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            ]\n\t\t\t\t\t\t                        };\n\t\t\t\t\t\t                        fn_makeHtml(childDiv,schema1);\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    \n\t\t\t\t\t\t    \n\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"items\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"Table name\",",
					"\t\t\t\t\t\t\t\"name\": \"TABLE_NAME\",",
					"\t\t\t\t\t\t\t\"id\": \"TABLE_NAME\",",
					"\t\t\t\t\t\t\t\"align\": \"center\",",
					"\t\t\t\t\t\t\t\"entityName\": \"cmm_use\",",
					"\t\t\t\t\t\t\t\"editable\": true,",
					"\t\t\t\t\t\t\t\"gridId\": \"cmmUseGrid\",",
					"\t\t\t\t\t\t\t\"editrules\": {",
					"\t\t\t\t\t\t\t\t\"edithidden\": true",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\t\t\t\"editoptions\": {",
					"\t\t\t\t\t\t\t\t\"dataEvents\": []",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"unformat\": function( cellval ,  opts , cell){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var originVal = $(cell).attr(\"cellValue\");\n\t\t\t\t\t\t\t                        //opts.colModel.editoptions.value[]\n\t\t\t\t\t\t\t                        return originVal;\n\t\t\t\t\t\t\t                    },\n",
					"\t\t\t\t\t\t\t\"cellattr\": function( rowId, cellValue, rawObject, cm, rdata ){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t\t                        var result = \" class='contextMenu contextMenu-parent'\";\n\t\t\t\t\t\t\t                        result += \" style='vertical-align: middle;\";\n\t\t\t\t\t\t\t                        // red\n\t\t\t\t\t\t\t                        // result += \"color: #d34b4b;font-weight: bolder;cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \"cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \" gridId='\" + vGridOpt.gridId + \"'\";\n\t\t\t\t\t\t\t                        result += \" entityId='\" + vGridOpt.entityId + \"'\";\n\t\t\t\t\t\t\t                        result += \" columnName='\" + cm.name + \"'\";\n\t\t\t\t\t\t\t                        result += \" cellValue='\" + rawObject[cm.name] + \"'\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        return result;\n\t\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"Column name\",",
					"\t\t\t\t\t\t\t\"name\": \"COLUMN_NAME\",",
					"\t\t\t\t\t\t\t\"id\": \"COLUMN_NAME\",",
					"\t\t\t\t\t\t\t\"align\": \"center\",",
					"\t\t\t\t\t\t\t\"entityName\": \"cmm_use\",",
					"\t\t\t\t\t\t\t\"editable\": true,",
					"\t\t\t\t\t\t\t\"gridId\": \"cmmUseGrid\",",
					"\t\t\t\t\t\t\t\"editrules\": {",
					"\t\t\t\t\t\t\t\t\"edithidden\": true",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\t\t\t\"editoptions\": {",
					"\t\t\t\t\t\t\t\t\"dataEvents\": []",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"unformat\": function( cellval ,  opts , cell){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var originVal = $(cell).attr(\"cellValue\");\n\t\t\t\t\t\t\t                        //opts.colModel.editoptions.value[]\n\t\t\t\t\t\t\t                        return originVal;\n\t\t\t\t\t\t\t                    },\n",
					"\t\t\t\t\t\t\t\"cellattr\": function( rowId, cellValue, rawObject, cm, rdata ){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t\t                        var result = \" class='contextMenu contextMenu-parent'\";\n\t\t\t\t\t\t\t                        result += \" style='vertical-align: middle;\";\n\t\t\t\t\t\t\t                        // red\n\t\t\t\t\t\t\t                        // result += \"color: #d34b4b;font-weight: bolder;cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \"cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \" gridId='\" + vGridOpt.gridId + \"'\";\n\t\t\t\t\t\t\t                        result += \" entityId='\" + vGridOpt.entityId + \"'\";\n\t\t\t\t\t\t\t                        result += \" columnName='\" + cm.name + \"'\";\n\t\t\t\t\t\t\t                        result += \" cellValue='\" + rawObject[cm.name] + \"'\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        return result;\n\t\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"Code category\",",
					"\t\t\t\t\t\t\t\"name\": \"CODE_CATEGORY\",",
					"\t\t\t\t\t\t\t\"id\": \"CODE_CATEGORY\",",
					"\t\t\t\t\t\t\t\"align\": \"center\",",
					"\t\t\t\t\t\t\t\"entityName\": \"cmm_use\",",
					"\t\t\t\t\t\t\t\"editable\": true,",
					"\t\t\t\t\t\t\t\"gridId\": \"cmmUseGrid\",",
					"\t\t\t\t\t\t\t\"editrules\": {",
					"\t\t\t\t\t\t\t\t\"edithidden\": true",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\t\t\t\"topRefrenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\t\t\t\"editoptions\": {",
					"\t\t\t\t\t\t\t\t\"dataEvents\": []",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"unformat\": function( cellval ,  opts , cell){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var originVal = $(cell).attr(\"cellValue\");\n\t\t\t\t\t\t\t                        //opts.colModel.editoptions.value[]\n\t\t\t\t\t\t\t                        return originVal;\n\t\t\t\t\t\t\t                    },\n",
					"\t\t\t\t\t\t\t\"cellattr\": function( rowId, cellValue, rawObject, cm, rdata ){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t\t                        var result = \" class='contextMenu contextMenu-parent'\";\n\t\t\t\t\t\t\t                        result += \" style='vertical-align: middle;\";\n\t\t\t\t\t\t\t                        // red\n\t\t\t\t\t\t\t                        // result += \"color: #d34b4b;font-weight: bolder;cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \"cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \" gridId='\" + vGridOpt.gridId + \"'\";\n\t\t\t\t\t\t\t                        result += \" entityId='\" + vGridOpt.entityId + \"'\";\n\t\t\t\t\t\t\t                        result += \" columnName='\" + cm.name + \"'\";\n\t\t\t\t\t\t\t                        result += \" cellValue='\" + rawObject[cm.name] + \"'\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        return result;\n\t\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t]",
					"\t\t\t\t}",
					"\t\t\t]",
					"\t\t};",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t                if($(\"#filterPop\").val() != \"\" ){\n\t\t\t                    v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t                    var v_filters = [];\n\t\t\t                    $.each(v_filterPop ,function(field, data){\n\t\t\t                        var obj = {\n\t\t\t                            field : field ,\n\t\t\t                            // value: [].concat(data)\n\t\t\t                            value: data , \n\t\t\t                            isArray : _.isArray(data)\n\t\t\t                        };\n\t\t\t                        v_filters.push( obj );\n\t\t\t                    });\n\t\t\t                    $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));\n\t\t\t                    if(false){\n\t\t\t                        //  tree deselect all\n\t\t\t                        var vJstreeList = [];\n\t\t\t                        $.each(v_filterPop ,function(k, v){\n\t\t\t                            var targetEl = findAllByElName( v_schema_search , function( _el){\n\t\t\t                                if ( _el.type == \"jsTreeSearch\"){\n\t\t\t                                    let _target = _.find(_el.relation.columns, function(col){\n\t\t\t                                        return col.childColumn.toUpperCase() ==  k.toUpperCase();\n\t\t\t                                    });\n\t\t\t                                    if( _target != null)\n\t\t\t                                        return true;\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t    \n\t\t\t                            if ( targetEl != null){\n\t\t\t                                if (targetEl.type == \"jsTreeSearch\"){\n\t\t\t                                    if( _.find(vJstreeList,{id : targetEl.id}) == null){\n\t\t\t                                        vJstreeList.push(targetEl);\n\t\t\t                                    }\n\t\t\t                                    targetEl.popValues.push(v);\n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        $.each(vJstreeList, function (i,tree) {  \n\t\t\t                            var vTree = $(\"#\" + tree.id ).jstree(true);\n\t\t\t                            vTree.deselect_all(true);\n\t\t\t                            vTree.select_node(tree.popValues.join(';;;'));\n\t\t\t                        });\n\t\t\t    \n\t\t\t                        $.each(v_filterPop ,function(k, v){\n\t\t\t                            var targetEl = findAllByElName( v_schema_search , function( _el){\n\t\t\t                                if( _el.type == \"multiCombo\"){\n\t\t\t                                    if( _el.jpa_column.child_column.toUpperCase() == k.toUpperCase())\n\t\t\t                                        return true;\n\t\t\t                                }else if ( _el.type == \"jsTreeSearch\"){\n\t\t\t                                    // let _target = _.find(_el.relation.columns, function(col){\n\t\t\t                                    //     return col.childColumn.toUpperCase() ==  k.toUpperCase();\n\t\t\t                                    // });\n\t\t\t                                    // if( _target != null)\n\t\t\t                                    //     return true;\n\t\t\t                                }else if ( _el.type == \"input\"){\n\t\t\t                                    if ( _el.columnName.toUpperCase() == k.toUpperCase() )\n\t\t\t                                        return true;\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t    \n\t\t\t                            if ( targetEl != null){\n\t\t\t                                if (targetEl.type == \"multiCombo\"){\n\t\t\t                                    // origin select\n\t\t\t                                    $(\"#\" + targetEl.id +\" option\").prop('selected',false);\n\t\t\t                                    $(\"#\" + targetEl.id +\" option[value='\"  + v + \"']\").prop('selected',true);\n\t\t\t                                    // // div view\n\t\t\t                                    // $(\"input[name=multiselect_\" + targetEl.name +\"]\").prop('checked',false);\n\t\t\t                                    // $(\"input[name=multiselect_\" + targetEl.name +\"] option[value=\"  + v + \"]\").prop('checked',true);\n\t\t\t                                    var mainControl = $(\"#\" + targetEl.id );\n\t\t\t                                    mainControl.multiselect('refresh');\n\t\t\t                                    mainControl.multiselect('widget').css(\"width\",\"400px\");\n\t\t\t                                    mainControl.multiselect('widget').find(\".ui-multiselect-filter input\").css(\"width\",\"150px\");\n\t\t\t    \n\t\t\t                                }else if (targetEl.type == \"jsTreeSearch\"){\n\t\t\t                                    // var vTree = $(\"#\" + targetEl.id ).jstree(true);\n\t\t\t                                    // // vTree.deselect_all(true);\n\t\t\t                                    // var seldata = _.find(vTree._model.data , function( data ){\n\t\t\t                                    //     if (data['original'] == null || data.original[\"field\"] == null)\n\t\t\t                                    //         return false;\n\t\t\t                                    //     var vOriginal = data['original'];\n\t\t\t                                    //     if ( vOriginal.field == k && vOriginal.value == v){\n\t\t\t                                    //         return true;\n\t\t\t                                    //     }\n\t\t\t                                    //     return false;\n\t\t\t    \n\t\t\t                                    // });\n\t\t\t                                    // if(seldata != null  && seldata.children != null && seldata.children.length == 0 )\n\t\t\t                                    //     vTree.select_node(seldata.id);\n\t\t\t    \n\t\t\t                                }else if (targetEl.type == \"input\"){\n\t\t\t                                    $(\"#\" + targetEl.id).val(v);\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            \n\t\t\t                            \n\t\t\t                        });\n\t\t\t                    }\n\t\t\t                    \n\t\t\t                }\n\t\t\t                \n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select_set\": function(){\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t                if($(\"#pop_select\").val() == \"\" )\n\t\t\t                    return;\n\t\t\t                var v_pop_select = JSON.parse($(\"#pop_select\").val());\n\t\t\t                if ( _.keys(v_pop_select).length == 0 )\n\t\t\t                    return;\n\t\t\t                if ( _.keys(v_pop_select.search_str_option).length == 0 )\n\t\t\t                    return;\n\t\t\t\n\t\t\t                // find grid\n\t\t\t                var v_grid_schema = findAllByElName(v_schema_content.elements , {type:\"grid\"});\n\t\t\t                if ( v_grid_schema  == null)\n\t\t\t                    return;\n\t\t\t                \n\t\t\t                // rules Array  2020.01.03\n\t\t\t                v_rules =[];\n\t\t\t                if (typeof v_pop_select.search_str_option.search_field == \"string\"){\n\t\t\t                    // find item\n\t\t\t                    var v_item = _.find(v_grid_schema.items , {name : v_pop_select.search_str_option.search_field});\n\t\t\t                    if (v_item == null)\n\t\t\t                        return;\n\t\t\t                    /**********************************************/\n\t\t\t                    /****  For Item setting filter initialtext ****/\n\t\t\t                    /**********************************************/\n\t\t\t                    // set searchoptions.defaultValue\n\t\t\t                    var v_item_to_merge = {\n\t\t\t                        searchoptions : {\n\t\t\t                            searchOperMenu: true,\n\t\t\t                            defaultValue: '' + v_pop_select.search_str_option.search_value\n\t\t\t                            //  defaultValue: '^' + v_pop_select.search_str_option.search_value\n\t\t\t                        }\t\t\t\t\t\t\t\t\n\t\t\t                    };\n\t\t\t                    _.merge(v_item, v_item_to_merge);\n\t\t\t                    /**********************************************/\n\t\t\t                    /****  For Grid Setting postData.filers *******/\n\t\t\t                    /**********************************************/\n\t\t\t                    v_rules.push(\n\t\t\t                        {\n\t\t\t                            field : v_pop_select.search_str_option.search_field,\n\t\t\t                            op: \"cn\",\n\t\t\t                            data : '^' + v_pop_select.search_str_option.search_value\n\t\t\t                        }\n\t\t\t                    );\n\t\t\t                }else if ( _.isArray(v_pop_select.search_str_option.search_field)){\n\t\t\t                    \n\t\t\t                    $.each(v_pop_select.search_str_option.search_field , function(i,search_field){\n\t\t\t                        \n\t\t\t                        if ( search_field.value != null && search_field.value.length > 0){\n\t\t\t                            /**********************************************/\n\t\t\t                            /****  For Item setting filter initialtext ****/\n\t\t\t                            /**********************************************/\n\t\t\t                            // set searchoptions.defaultValue\n\t\t\t                            var v_item = _.find(v_grid_schema.items , {name : search_field.target });\n\t\t\t                            if ( v_item == null )\n\t\t\t                                return true;\n\t\t\t                            var v_item_to_merge = {\n\t\t\t                                searchoptions : {\n\t\t\t                                    searchOperMenu: true,\n\t\t\t                                    defaultValue: '^' + search_field.value\n\t\t\t                                    //  defaultValue: '^' + v_pop_select.search_str_option.search_value\n\t\t\t                                }\t\t\t\t\t\t\t\t\n\t\t\t                            };\n\t\t\t                            _.merge(v_item, v_item_to_merge);\n\t\t\t\n\t\t\t                            /**********************************************/\n\t\t\t                            /****  For Grid Setting postData.filers *******/\n\t\t\t                            /**********************************************/\n\t\t\t                            \n\t\t\t                            v_rules.push(\n\t\t\t                                {\n\t\t\t                                    field : search_field.target,\n\t\t\t                                    op: \"cn\",\n\t\t\t                                    // data : '^' + v_pop_select.search_str_option.search_value\n\t\t\t                                    data : '^' + search_field.value\n\t\t\t                                }\n\t\t\t                            );\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    });\n\t\t\t                }else{\n\t\t\t                    return;\n\t\t\t                }\n\t\t\t                    \n\t\t\t                var v_filters = {\n\t\t\t                    groupOp : \"AND\",\n\t\t\t                    rules : v_rules\n\t\t\t                };\n\t\t\t                \n\t\t\t\n\t\t\t\n\t\t\t                var v_grid_to_merge = {\n\t\t\t                    postData : {\n\t\t\t                        filters : JSON.stringify(v_filters)\n\t\t\t                    }\n\t\t\t                };\n\t\t\t                _.merge(v_grid_schema.gridOpt, v_grid_to_merge);\n\t\t\t\n\t\t\t\n\t\t\t            }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmUse.cmmUse\",",
					"\t\t\t\"fn_view_detail\": function(_type){\n\t\t\t                var pageBody = parent.$(\"body\");\n\t\t\t                if (pageBody.length == 0)\n\t\t\t\t\t\t\t\tpageBody = parent.parent.$(\"body\");\n\t\t\t                // var modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t                // if (modalCommon.length == 0 ){\n\t\t\t                //     modalCommon = parent.parent.$(\"[name=infiniteLogModal]\");\n\t\t\t                // }\n\t\t\t                var parent_str = \"parent\";\n\t\t\t                var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t                while(modalCommon.length ==0){\n\t\t\t                    parent_str += \".parent\";\n\t\t\t                    modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t                    pageBody = eval(parent_str + \".$('body')\");\n\t\t\t                }\n\t\t\t                \n\t\t\t                var modalClone = modalCommon.clone();\n\t\t\t                pageBody.append(modalClone);\n\t\t\t                modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\n\t\t\t                var today = new Date();\n\t\t\t                var y = today.getFullYear();\n\t\t\t                var m = today.getMonth() + 1;\n\t\t\t                var d = today.getDate();\n\t\t\t                var h = today.getHours();\n\t\t\t                var mi = today.getMinutes();\n\t\t\t                var s = today.getSeconds();\n\t\t\t                var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t                var modalId = \"modal_\" + idPrefix;\n\t\t\t                var frameId = \"frame_\" + idPrefix;\n\t\t\t                modalClone.attr(\"id\",modalId);\n\t\t\t                modalClone.attr(\"name\",modalId);\n\t\t\t\n\t\t\t                var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t                frameDom.attr(\"id\", frameId);\n\t\t\t                frameDom.attr(\"name\", frameId);\n\t\t\t\n\t\t\t                var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t                container.append(frameDom);\n\t\t\t\n\t\t\t                // Form Submit\n\t\t\t                var oFrm = document.getElementById(\"form\");\n\t\t\t                var filter = {};\n\t\t\t                var theGrid = $(this).jqGrid();\n\t\t\t                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');\n\t\t\t                var row = theGrid.getRowData(parentRowKey);\n\t\t\t                var entityId = theGrid.jqGrid('getGridParam','entityId');\n\t\t\t                $.each(gridProperties , function(i,prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if(vId != null){\n\t\t\t                        filter[prop._name.toUpperCase()] = row[prop._name.toUpperCase()];\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\n\t\t\t                var viewName = $(\"#viewName\").val();\n\t\t\t                var viewPath = viewName.split(\"/\");\n\t\t\t                var itemName = viewPath.pop();\n\t\t\t                oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \".\" + _type + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t                // oFrm.action =  \"${pageContext.request.contextPath}/generic.do?viewName=common/commonDetail\";\n\t\t\t                $(\"#detailSqlId\").val(\"cmmUse.cmmUse.one\");\n\t\t\t                $(\"#detailSqlUpdateId\").val(\"cmmUse.cmmUse.edit\");\n\t\t\t                $(\"#detailType\").val(_type);\n\t\t\t                // $(\"#frameName\").val( 'frame_' +  _.camelCase( entityId ));\n\t\t\t                // $(\"#frameName\").val( window.frameElement.name );\n\t\t\t                var parentFrameName = \"${param.frameName}\";\n\t\t\t                if ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t                    $(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t                }else {\n\t\t\t                    $(\"#frameName\").val( window.frameElement.name );\n\t\t\t                }\n\t\t\t                oFrm.method = \"post\";\n\t\t\t                oFrm.target = frameId;\n\t\t\t                frameDom.show();\n\t\t\t                // Header\n\t\t\t                var filterStrs = [];\n\t\t\t                $.each(filter,function(k,v){\n\t\t\t                    var str = _.camelCase(k);\n\t\t\t                    str += \" : \" + v;\n\t\t\t                    filterStrs.push(str);\n\t\t\t                });\n\t\t\t                \n\t\t\t                var headStr = '[' + _.camelCase( entityId ) + ' ' +  _.upperCase(_type) + ' ]  '\n\t\t\t                if ( _type != \"add\" ) \n\t\t\t                    headStr += filterStrs.join(\" , \");\t\t\t\n\t\t\t\n\t\t\t                modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t                modalClone.modal();\n\t\t\t                // parent.$(\"#\"+modalId).modal();\n\t\t\t                modalClone.draggable({\n\t\t\t                    handle: \".modal-header\"\n\t\t\t                }); \n\t\t\t                oFrm.submit();\n\t\t\t            },\n",
					"\t\t\t\"fn_grid_option\": function(){\n\t\t\t                var is_pop_select = \"${param.is_pop_select}\";\n\t\t\t                var is_pop = \"${param.isPop}\";\n\t\t\t                var is_sub_frame = \"${param.isSubFrame}\";\n\t\t\t\n\t\t\t                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});\n\t\t\t                \n\t\t\t                if ( is_sub_frame ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 210;\n\t\t\t                    grid_shema.gridOpt.rowNum = 5;\n\t\t\t                }else if ( is_pop_select ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 420;\n\t\t\t                    grid_shema.gridOpt.rowNum = 15;\n\t\t\t                }else if ( is_pop ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 420;\n\t\t\t                    grid_shema.gridOpt.rowNum = 15;\n\t\t\t                }else {\n\t\t\t                    grid_shema.gridOpt.height = 650;\n\t\t\t                    grid_shema.gridOpt.rowNum = 20;\n\t\t\t                }\n\t\t\t            },\n",
					"\t\t\t\"fn_add_button_select_in_grid\": function(){\n\t\t\t                var is_pop_select = \"${param.is_pop_select}\";\n\t\t\t                if (is_pop_select != \"Y\")\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar item = {\n\t\t\t\t\t\t\t\t\"label\": \" \",\n\t\t\t\t\t\t\t\t\"name\": \"SELECT_BUTTON\",\n\t\t\t\t\t\t\t\t\"id\": \"SELECT_BUTTON\",\n\t\t\t\t\t\t\t\t\"align\": \"center\",\n\t\t\t\t\t\t\t\t\"width\": 45,\n\t\t\t\t\t\t\t\tsearch : false ,\n\t\t\t\t\t\t\t\t\"formatter\": function(cellValue, options, rowObject){\n\t\t\t\t\t\t\t\t\tvar btnHtml = '<button type=\"button\" class=\"btn btn-warning btn-xs\" style=\"line-height:1\" onclick=\"commonFunc.fn_select_for_parentframe(\\''+ options.rowId +'\\');\">Select</button>';\n\t\t\t\t\t\t\t\t\treturn btnHtml;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tvar grid_schema = findAllByElName(v_schema_content.elements , {type:'grid'});\n\t\t\t\t\t\t\tif (grid_schema != null){\n\t\t\t\t\t\t\t\tgrid_schema.items.push(item);\n\t\t\t\t\t\t\t}\n\t\t\t            },\n",
					"\t\t\t\"fn_select_for_parentframe\": function(_rowid){\n\t\t\t                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});\n\t\t\t                var theGrid = $(\"#\" + grid_shema.id).jqGrid();\n\t\t\t    \n\t\t\t                var row = theGrid.getRowData(_rowid);\n\t\t\t                var v_react_target = parentFrame.commonFunc.pop_select_react_object ;\n\t\t\t                var col = v_react_target.dataSrc.parentColumnName.toUpperCase() ;\n\t\t\t                \n\t\t\t                v_react_target.setState({value :row[col] });\n\t\t\t                \n\t\t\t                // search_str : expression\t\n\t\t\t                if($(\"#pop_select\").val() != \"\" ){\n\t\t\t                    var v_pop_select = JSON.parse($(\"#pop_select\").val());\n\t\t\t                    if ( _.keys(v_pop_select).length > 0 ){\n\t\t\t                        if ( _.keys(v_pop_select.search_str_option).length > 0 ){\n\t\t\t                            if (v_pop_select.search_str_option.expression != null){\n\t\t\t                                if (v_pop_select.search_str_option.expression != \"\"){\n\t\t\t                                    v_react_target.setState({search_str : eval(v_pop_select.search_str_option.expression) });\n\t\t\t                                    \n\t\t\t                                    // search_str : addtional field update\n\t\t\t                                    if (v_pop_select.search_str_option.additional_update_field != null){\n\t\t\t                                        $.each(v_pop_select.search_str_option.additional_update_field, function(k,v){\n\t\t\t                                            var v_addtional_target = _.find(v_react_target.reactObjects,{state: {name : k}});\n\t\t\t                                            if(v_addtional_target != null)\n\t\t\t                                                v_addtional_target.setState({value: row[v]});\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                    \n\t\t\t    \n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                    }\n\t\t\t                }\n\t\t\t                parentFrame.commonFunc.fn_pop_select_callback();\n\t\t\t                // parentFrame.commonFunc.fn_view_sub();\n\t\t\t    \n\t\t\t                // window close\n\t\t\t                setTimeout( function(){\n\t\t\t                    // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                    parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                },0);\n\t\t\t    \n\t\t\t            }\n",
					"\t\t};",
					"\t\tcommonFunc.fn_grid_option();",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\tcommonFunc.fn_add_button_select_in_grid();",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t$('#v_schema_searchContainer').html('')",
					"\t\t\t\tif($(\"#filterPop\").val() == \"\" ){",
					"\t\t\t\t\tfn_makeHtml('v_schema_searchContainer',v_schema_search);",
					"\t\t\t\t}",
					"\t\t\t\telse{",
					"\t\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t\tpopParemeters.fn_pop_select_set();",
					"\t\t\t\t\tfindAll(\"cmmUseGrid\",v_schema_content.elements)[0].label = \"\";",
					"\t\t\t\t}",
					"\t\t\t\t$('#v_schema_contentContainer').html('')",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema_content);",
					"\t\t\t\t$.contextMenu(",
					"\t\t\t\t\t{",
					"\t\t\t\t\t\t\"selector\": \".jqgrow td.contextMenu\",",
					"\t\t\t\t\t\t\"trigger\": \"left\",",
					"\t\t\t\t\t\t\"build\": function($trigger) {\n\t\t\t\t\t\t            var options = {\n\t\t\t\t\t\t                callback: function(key, options) {\n\t\t\t\t\t\t                    // var m = \"clicked: \" + key;\n\t\t\t\t\t\t                    // window.console && console.log(m) || alert(m);\n\t\t\t\t\t\t                    options.items[key].callback.call(this,key,options);\n\t\t\t\t\t\t                },\n\t\t\t\t\t\t                items: {}\n\t\t\t\t\t\t\n\t\t\t\t\t\t            };\n\t\t\t\t\t\t\n\t\t\t\t\t\t            // if ($trigger.hasClass('something')) {\n\t\t\t\t\t\t            // \toptions.items.foo = {name: \"foo\"};\n\t\t\t\t\t\t            // } else {\n\t\t\t\t\t\t            //     options.items.bar = {name: \"bar\"};\n\t\t\t\t\t\t            // }\n\t\t\t\t\t\t            var columnName = $trigger.attr(\"columnName\");\n\t\t\t\t\t\t            if (columnName == null)\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            var gridId = $trigger.attr(\"gridId\");\n\t\t\t\t\t\t            var grid = $(\"#\"+gridId).jqGrid();\n\t\t\t\t\t\t            var rowId = $trigger.parent().attr(\"id\");\n\t\t\t\t\t\t            var rowData = grid.getRowData(rowId);\n\t\t\t\t\t\t            var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t            var cms = vGridOpt.colModel;\n\t\t\t\t\t\t            var cm = _.find(cms, {name: $trigger.attr(\"columnName\")} );\n\t\t\t\t\t\t            // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t            // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t            \n\t\t\t\t\t\t            // parents\n\t\t\t\t\t\t            var hasParents = false;\n\t\t\t\t\t\t            var parents = [];\n\t\t\t\t\t\t            if ( cm.referenceId != null){\n\t\t\t\t\t\t                \n\t\t\t\t\t\t                var src = _.find(dataSrc, {\"referenceId\": cm.referenceId , \"topRefrenceId\" : cm.topRefrenceId  });\n\t\t\t\t\t\t                // if ( _.includes(_.map(src.childColumnNames, function( _name ){  return _name.toUpperCase(); } ), cm.name.toUpperCase()) ) {\n\t\t\t\t\t\t                var itemName = _.camelCase(src.parentEntity);\n\t\t\t\t\t\t                options.items[itemName] = {\n\t\t\t\t\t\t                    name: \"Parents: \" + itemName ,\n\t\t\t\t\t\t                    callback : function(key, options){\n\t\t\t\t\t\t                        var m = \"clicked: \" + key + \", data: \" + $(this).text();\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Modal Pop\n\t\t\t\t\t\t                        if(true){\n\t\t\t\t\t\t                            var pageBody = parent.$(\"body\");\n\t\t\t\t\t\t                            var modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t                            var parent_str = \"parent\";\n\t\t\t\t\t\t                            var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                            while(modalCommon.length ==0){\n\t\t\t\t\t\t                                parent_str += \".parent\";\n\t\t\t\t\t\t                                modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                                pageBody = eval(parent_str + \".$('body')\");\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                            // var modalClone = $(modalCommon.html());\n\t\t\t\t\t\t                            var modalClone = modalCommon.clone();\n\t\t\t\t\t\t                            pageBody.append(modalClone);\n\t\t\t\t\t\t                            modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var today = new Date();\n\t\t\t\t\t\t                            var y = today.getFullYear();\n\t\t\t\t\t\t                            var m = today.getMonth() + 1;\n\t\t\t\t\t\t                            var d = today.getDate();\n\t\t\t\t\t\t                            var h = today.getHours();\n\t\t\t\t\t\t                            var mi = today.getMinutes();\n\t\t\t\t\t\t                            var s = today.getSeconds();\n\t\t\t\t\t\t                            var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t                            var modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t                            var frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t                            modalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t                            modalClone.attr(\"name\",modalId);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t                            frameDom.attr(\"id\", frameId);\n\t\t\t\t\t\t                            frameDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t                            container.append(frameDom);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // Form Submit\n\t\t\t\t\t\t                            var oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t                            var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                            var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                            viewPath.pop();\n\t\t\t\t\t\t                            var filter = {};\n\t\t\t\t\t\t                            $.each(src.childColumnNames , function(i,column){\n\t\t\t\t\t\t                                var parentColumn = src.parentColumnNames[i];\n\t\t\t\t\t\t                                if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                    filter[parentColumn.toUpperCase()] = rowData[column.toUpperCase()];\n\t\t\t\t\t\t                                // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                            oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = frameId;\n\t\t\t\t\t\t                            frameDom.show();\n\t\t\t\t\t\t                            // Header\n\t\t\t\t\t\t                            var filterStrs = [];\n\t\t\t\t\t\t                            $.each(filter,function(k,v){\n\t\t\t\t\t\t                                var str = _.camelCase(k);\n\t\t\t\t\t\t                                str += \" : \" + v;\n\t\t\t\t\t\t                                filterStrs.push(str);\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            var headStr = '[' + itemName + ']  ' +  filterStrs.join(\" , \");\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.modal();\n\t\t\t\t\t\t                            // parent.$(\"#\"+modalId).modal();\n\t\t\t\t\t\t                            modalClone.draggable({\n\t\t\t\t\t\t                                handle: \".modal-header\"\n\t\t\t\t\t\t                            }); \n\t\t\t\t\t\t                            oFrm.submit();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        return; \n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Window Pop\n\t\t\t\t\t\t                        // console.log(m);\n\t\t\t\t\t\t                        var windowName = \"Parents: \" + itemName;\n\t\t\t\t\t\t                        var newWin1 = window.open(\"\", windowName , \"width=1000,height=750, screenY=\" + event.screenY + \", top=\" + event.screenY + \", screenX=\" + event.screenX + \",left=\" + (event.screenX + 0) + \", scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                        var oFrm = document.getElementById(\"form\");\t\n\t\t\t\t\t\t                        var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                        var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                        viewPath.pop();\n\t\t\t\t\t\t                        var filter = {};\n\t\t\t\t\t\t                        // // filter[cm.name] = $(this).text() ;\n\t\t\t\t\t\t                        // var referece = _.find([].concat(src.parentEntity.references ), {\"xmi:id\": cm.referenceId });\n\t\t\t\t\t\t                        // var child_columns_detail = _.find(reference.eAnnotations.details, { \"_key\": \"child_columns\" });\n\t\t\t\t\t\t                        // var child_columns = child_columns_detail._value.split(\",\");\n\t\t\t\t\t\t                        $.each(src.childColumnNames , function(i,column){\n\t\t\t\t\t\t                            var parentColumn = src.parentColumnNames[i];\n\t\t\t\t\t\t                            if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                filter[parentColumn.toUpperCase()] = rowData[column.toUpperCase()];\n\t\t\t\t\t\t                            // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                        oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";\n\t\t\t\t\t\t                        oFrm.method = \"post\";\n\t\t\t\t\t\t                        oFrm.target = windowName; \n\t\t\t\t\t\t                        oFrm.submit();\t\t\n\t\t\t\t\t\t                        newWin1.focus();\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                };\n\t\t\t\t\t\t                hasParents = true;\n\t\t\t\t\t\t                // }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            // children\n\t\t\t\t\t\t            var hasChildrens = false;\n\t\t\t\t\t\t            var childrens = childReferences;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            $.each(childrens , function(i,child){\n\t\t\t\t\t\t                var child_columns = child.child_columns;\n\t\t\t\t\t\t                var parent_columns = child.parent_columns;\n\t\t\t\t\t\t                var child_columns_index = _.indexOf(child.parent_columns, cm.name.toLowerCase());\n\t\t\t\t\t\t                if (child_columns_index == -1)\n\t\t\t\t\t\t                    return false;\n\t\t\t\t\t\t                var itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t                options.items[itemName] = {\n\t\t\t\t\t\t                    name: \"Child: \" + itemName ,\n\t\t\t\t\t\t                    callback : function(key, options){\n\t\t\t\t\t\t                        // var m = \"clicked: \" + key + \", data: \" + $(this).text();\n\t\t\t\t\t\t                        // console.log(m);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Modal Pop\n\t\t\t\t\t\t                        if(true){\n\t\t\t\t\t\t                            var pageBody = parent.$(\"body\");\n\t\t\t\t\t\t                            var modalCommon = parent.$(\"[name=infiniteLogModal]\");                            \n\t\t\t\t\t\t                            var parent_str = \"parent\";\n\t\t\t\t\t\t                            var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                            while(modalCommon.length ==0){\n\t\t\t\t\t\t                                parent_str += \".parent\";\n\t\t\t\t\t\t                                modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                                pageBody = eval(parent_str + \".$('body')\");\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // var modalClone = $(modalCommon.html());\n\t\t\t\t\t\t                            var modalClone = modalCommon.clone();\n\t\t\t\t\t\t                            pageBody.append(modalClone);\n\t\t\t\t\t\t                            modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var today = new Date();\n\t\t\t\t\t\t                            var y = today.getFullYear();\n\t\t\t\t\t\t                            var m = today.getMonth() + 1;\n\t\t\t\t\t\t                            var d = today.getDate();\n\t\t\t\t\t\t                            var h = today.getHours();\n\t\t\t\t\t\t                            var mi = today.getMinutes();\n\t\t\t\t\t\t                            var s = today.getSeconds();\n\t\t\t\t\t\t                            var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t                            var modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t                            var frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t                            modalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t                            modalClone.attr(\"name\",modalId);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t                            frameDom.attr(\"id\", frameId);\n\t\t\t\t\t\t                            frameDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t                            container.append(frameDom);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // Form Submit\n\t\t\t\t\t\t                            var oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t                            var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                            var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                            viewPath.pop();\n\t\t\t\t\t\t                            var filter = {};\n\t\t\t\t\t\t                            $.each(child_columns , function(i,column){\n\t\t\t\t\t\t                                var parentColumn = parent_columns[i];\n\t\t\t\t\t\t                                if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                    filter[column.toUpperCase()] = rowData[parentColumn.toUpperCase()];\n\t\t\t\t\t\t                                // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                            oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = frameId;\n\t\t\t\t\t\t                            frameDom.show();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            // Header\n\t\t\t\t\t\t                            var filterStrs = [];\n\t\t\t\t\t\t                            $.each(filter,function(k,v){\n\t\t\t\t\t\t                                var str = _.camelCase(k);\n\t\t\t\t\t\t                                str += \" : \" + v;\n\t\t\t\t\t\t                                filterStrs.push(str);\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            var headStr = '[' + itemName + ']  ' +  filterStrs.join(\" , \");\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.modal();\n\t\t\t\t\t\t                            // parent.$(\"#\"+modalId).modal();\n\t\t\t\t\t\t                            modalClone.draggable({\n\t\t\t\t\t\t                                handle: \".modal-header\"\n\t\t\t\t\t\t                            }); \n\t\t\t\t\t\t                            oFrm.submit();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        return ;\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Window Pop\n\t\t\t\t\t\t                        var windowName = \"Child: \" + itemName;\n\t\t\t\t\t\t                        var newWin1 = window.open(\"\", windowName , \"width=1000,height=750, screenY=\" + event.screenY + \", top=\" + event.screenY + \", screenX=\" + event.screenX + \",left=\" + (event.screenX + 0) + \", scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                        var oFrm = document.getElementById(\"form\");\t\n\t\t\t\t\t\t                        var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                        var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                        viewPath.pop();\n\t\t\t\t\t\t                        var filter = {};\n\t\t\t\t\t\t                        // filter[cm.name] = $(this).text() ;\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        $.each(child_columns , function(i,column){\n\t\t\t\t\t\t                            var parentColumn = parent_columns[i];\n\t\t\t\t\t\t                            if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                filter[column.toUpperCase()] = rowData[parentColumn.toUpperCase()];\n\t\t\t\t\t\t                            // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                        oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName;\n\t\t\t\t\t\t                        oFrm.method = \"post\";\n\t\t\t\t\t\t                        oFrm.target = windowName; \n\t\t\t\t\t\t                        oFrm.submit();\t\t\n\t\t\t\t\t\t                        newWin1.focus();\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                };\n\t\t\t\t\t\t                hasChildrens = true;\n\t\t\t\t\t\t                \n\t\t\t\t\t\t                \n\t\t\t\t\t\t            });\n\t\t\t\t\t\t            \n\t\t\t\t\t\t            if ( !hasParents && !hasChildrens )\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            if ( _.keys(options.items).length == 1 ){\n\t\t\t\t\t\t                options.items[_.keys(options.items)[0]].callback();\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            return options;\n\t\t\t\t\t\t            // return false; \n\t\t\t\t\t\t        }\n",
					"\t\t\t\t\t}",
					"\t\t\t\t);",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t\tfunction fn_search(){",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\tjstreeInfo.search();",
					"\t\t\t\tvar theGrid = $(\"#cmmUseGrid\").jqGrid();",
					"\t\t\t\ttheGrid.trigger('reloadGrid',[{page:1}]);",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t}",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailSqlId\" name=\"detailSqlId\" value=\"\"/>",
					"<input type=\"hidden\" id=\"detailSqlUpdateId\" name=\"detailSqlUpdateId\" value=\"\"/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value=\"\"/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value=\"${param.frameName}\"/>",
					"<input type=\"hidden\" id=\"isSubFrame\" name=\"isSubFrame\" value=\"${param.isSubFrame}\"/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"content_container srch_box2\" style=\"margin-top: 3px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"content_container\" style=\"margin-top: 3px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"dataSources": [
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "table_name",
						"childColumnName": "table_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "table_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "table_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "table_name",
						"sqlId": "cmmUse.datasrc.tabCols.tableName",
						"data": function ( _gridProperties ) {
											var _this = this;
											var vGridProperties = null;
											if( _gridProperties == null)
												vGridProperties = gridProperties;
											else 
												vGridProperties = _gridProperties;
						                    var prop = _.find( vGridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.tableName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "column_name",
						"childColumnName": "column_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "column_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "column_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "column_name",
						"sqlId": "cmmUse.datasrc.tabCols.columnName",
						"data": function (_gridProperties) {
											var _this = this;
											var vGridProperties = null;
											if( _gridProperties == null)
												vGridProperties = gridProperties;
											else 
												vGridProperties = _gridProperties;
						                    var prop = _.find(vGridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.columnName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"topRefrenceId": "reference::cmm_cd::cmm_use",
						"parentEntity": "cmm_cd",
						"parentColumnName": "code_category",
						"childColumnName": "code_category",
						"childColumnNames": [
							"code_category"
						],
						"parentNameColumn": "code_category",
						"parentColumnNames": [
							"code_category"
						],
						"topEntity": "cmm_cd",
						"topColumnName": "code_category",
						"topColumnNames": [
							"code_category"
						],
						"topNameColumn": "code_category",
						"sqlId": "cmmUse.datasrc.cmmCd.codeCategory",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.cmmCd.codeCategory",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					}
				],
				"childReferences": [],
				"dictionaries": [
					{
						"entityName": "cmm_use",
						"sqlId": "cmmUse.dictionary.cmmUse",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"jstreeInfo": {
					"idList": [
						"table_name_column_name_jsTreeSearch"
					],
					"search": function(){
					                var _this = this;
					                if (_this.idList.length == 0)
					                    return;
					                var selJsTree3 = [];
					                $.each(_this.idList, function(i,vJsTreeId){
					                    var vJsTree = $("#" + vJsTreeId ).jstree(true);
					                    // var selJsTree = _.filter(vJsTree._model.data , {state : {selected: true } });
					                    var selJsTree = _.filter(vJsTree._model.data , function( data ){
					                        // if (data.id == "#")
					                        // 	return false;
					                        if (data['original'] == null || data.original["field"] == null)
					                            return false;
					                        if ( data.state.selected == null ) 
					                            return false;
					                        var vSelected = data.state.selected;
					                        if ( vSelected)
					                            return true;
					                        $.each(vJsTree.get_node(data.id).children_d, function(i, nodeId){
					                            var vNode = vJsTree.get_node(nodeId);
					                            if ( vNode.state.selected) {
					                                vSelected = true;
					                                return false;
					                            }
					                        });
					                        // if ( vJsTree.get_bottom_checked(data.id).length > 0 )
					                        // 	return true;
					
					                        return vSelected;
					
					                    });
					                    var selJsTree1 = _.map(selJsTree, function(data, i){
					                        var obj = {};
					
					                        // // Customize if field is different with Original field
					                        // var _datas = data.id.split(";;;");
					                        // var _col = _datas[1];
					                        // if ( _col != null && data.original.field != 'GUBUN' ){
					                        //     var _cols = _col.split("/");
					                        //     var textIndex = _.findIndex(_datas.slice(2), function(o) { return o == data.text; });
					                        //     var keyIndex   = textIndex - 0;
					                        //     var _field = _cols[keyIndex];
					                        //     if ( _field == null) 
					                        //         debugger;
					                        //     var _field1 = decamelize(_field,'_')
					                        //     obj[ _field1.toUpperCase() ] = data.text; 
					                        // }else{
					                        //     // obj[_.camelCase(data.original.field)] = data.text;
					                        //     obj[ data.original.field] = data.text;
					                        // }
					                        obj[ data.original.field] = data.original.value;
					
					                        return obj;
					
					                    });
					                    var selJsTree2 = serializeArrayJSON(selJsTree1);
					                    
					                    $.each(selJsTree2, function(field, data){
					                        var obj = {
					                            field : field ,
					                            // value: [].concat(data)
					                            value: data , 
					                            isArray : _.isArray(data)
					                        };
					                        selJsTree3.push( obj );
					                    });
					                    
					                });
					                $("#searchJson").val(JSON.stringify({fields: selJsTree3}));
					                // var parameter = $("#form").serializeFormJSON();
					                // var removedList = _.remove(selJsTree3,{field:'GUBUN'} );
					            }

				},
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "cmmUse"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmUse.cmmUse",
					"fn_view_detail": function(_type){
					                var pageBody = parent.$("body");
					                if (pageBody.length == 0)
										pageBody = parent.parent.$("body");
					                // var modalCommon = parent.$("[name=infiniteLogModal]");
					                // if (modalCommon.length == 0 ){
					                //     modalCommon = parent.parent.$("[name=infiniteLogModal]");
					                // }
					                var parent_str = "parent";
					                var modalCommon = eval(parent_str + ".$('[name=infiniteLogModal]')");
					                while(modalCommon.length ==0){
					                    parent_str += ".parent";
					                    modalCommon = eval(parent_str + ".$('[name=infiniteLogModal]')");
					                    pageBody = eval(parent_str + ".$('body')");
					                }
					                
					                var modalClone = modalCommon.clone();
					                pageBody.append(modalClone);
					                modalClone.attr("isCloned","true");
					
					                var today = new Date();
					                var y = today.getFullYear();
					                var m = today.getMonth() + 1;
					                var d = today.getDate();
					                var h = today.getHours();
					                var mi = today.getMinutes();
					                var s = today.getSeconds();
					                var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
					                var modalId = "modal_" + idPrefix;
					                var frameId = "frame_" + idPrefix;
					                modalClone.attr("id",modalId);
					                modalClone.attr("name",modalId);
					
					                var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
					                frameDom.attr("id", frameId);
					                frameDom.attr("name", frameId);
					
					                var container = modalClone.find(".infiniteLogContainer");
					                container.append(frameDom);
					
					                // Form Submit
					                var oFrm = document.getElementById("form");
					                var filter = {};
					                var theGrid = $(this).jqGrid();
					                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');
					                var row = theGrid.getRowData(parentRowKey);
					                var entityId = theGrid.jqGrid('getGridParam','entityId');
					                $.each(gridProperties , function(i,prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if(vId != null){
					                        filter[prop._name.toUpperCase()] = row[prop._name.toUpperCase()];
					                    }
					                });
					                $("#filterPop").val(JSON.stringify(filter));
					
					                var viewName = $("#viewName").val();
					                var viewPath = viewName.split("/");
					                var itemName = viewPath.pop();
					                oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "." + _type + "&backgroundColor=FFF&isPop=Y";;
					                // oFrm.action =  "${pageContext.request.contextPath}/generic.do?viewName=common/commonDetail";
					                $("#detailSqlId").val("cmmUse.cmmUse.one");
					                $("#detailSqlUpdateId").val("cmmUse.cmmUse.edit");
					                $("#detailType").val(_type);
					                // $("#frameName").val( 'frame_' +  _.camelCase( entityId ));
					                // $("#frameName").val( window.frameElement.name );
					                var parentFrameName = "${param.frameName}";
					                if ( _.startsWith( parentFrameName,"frame") ){						
					                    $("#frameName").val( parentFrameName + "." + window.frameElement.name );
					                }else {
					                    $("#frameName").val( window.frameElement.name );
					                }
					                oFrm.method = "post";
					                oFrm.target = frameId;
					                frameDom.show();
					                // Header
					                var filterStrs = [];
					                $.each(filter,function(k,v){
					                    var str = _.camelCase(k);
					                    str += " : " + v;
					                    filterStrs.push(str);
					                });
					                
					                var headStr = '[' + _.camelCase( entityId ) + ' ' +  _.upperCase(_type) + ' ]  '
					                if ( _type != "add" ) 
					                    headStr += filterStrs.join(" , ");			
					
					                modalClone.find(".modal-header h6 span").text(headStr);
					                modalClone.modal();
					                // parent.$("#"+modalId).modal();
					                modalClone.draggable({
					                    handle: ".modal-header"
					                }); 
					                oFrm.submit();
					            },

					"fn_grid_option": function(){
					                var is_pop_select = "${param.is_pop_select}";
					                var is_pop = "${param.isPop}";
					                var is_sub_frame = "${param.isSubFrame}";
					
					                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});
					                
					                if ( is_sub_frame ==  "Y"){
					                    grid_shema.gridOpt.height = 210;
					                    grid_shema.gridOpt.rowNum = 5;
					                }else if ( is_pop_select ==  "Y"){
					                    grid_shema.gridOpt.height = 420;
					                    grid_shema.gridOpt.rowNum = 15;
					                }else if ( is_pop ==  "Y"){
					                    grid_shema.gridOpt.height = 420;
					                    grid_shema.gridOpt.rowNum = 15;
					                }else {
					                    grid_shema.gridOpt.height = 650;
					                    grid_shema.gridOpt.rowNum = 20;
					                }
					            },

					"fn_add_button_select_in_grid": function(){
					                var is_pop_select = "${param.is_pop_select}";
					                if (is_pop_select != "Y")
										return;
									
									var item = {
										"label": " ",
										"name": "SELECT_BUTTON",
										"id": "SELECT_BUTTON",
										"align": "center",
										"width": 45,
										search : false ,
										"formatter": function(cellValue, options, rowObject){
											var btnHtml = '<button type="button" class="btn btn-warning btn-xs" style="line-height:1" onclick="commonFunc.fn_select_for_parentframe(\''+ options.rowId +'\');">Select</button>';
											return btnHtml;
										}
									};
									var grid_schema = findAllByElName(v_schema_content.elements , {type:'grid'});
									if (grid_schema != null){
										grid_schema.items.push(item);
									}
					            },

					"fn_select_for_parentframe": function(_rowid){
					                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});
					                var theGrid = $("#" + grid_shema.id).jqGrid();
					    
					                var row = theGrid.getRowData(_rowid);
					                var v_react_target = parentFrame.commonFunc.pop_select_react_object ;
					                var col = v_react_target.dataSrc.parentColumnName.toUpperCase() ;
					                
					                v_react_target.setState({value :row[col] });
					                
					                // search_str : expression	
					                if($("#pop_select").val() != "" ){
					                    var v_pop_select = JSON.parse($("#pop_select").val());
					                    if ( _.keys(v_pop_select).length > 0 ){
					                        if ( _.keys(v_pop_select.search_str_option).length > 0 ){
					                            if (v_pop_select.search_str_option.expression != null){
					                                if (v_pop_select.search_str_option.expression != ""){
					                                    v_react_target.setState({search_str : eval(v_pop_select.search_str_option.expression) });
					                                    
					                                    // search_str : addtional field update
					                                    if (v_pop_select.search_str_option.additional_update_field != null){
					                                        $.each(v_pop_select.search_str_option.additional_update_field, function(k,v){
					                                            var v_addtional_target = _.find(v_react_target.reactObjects,{state: {name : k}});
					                                            if(v_addtional_target != null)
					                                                v_addtional_target.setState({value: row[v]});
					                                        });
					                                    }
					                                    
					    
					                                }
					                            }
					                        }
					                    }
					                }
					                parentFrame.commonFunc.fn_pop_select_callback();
					                // parentFrame.commonFunc.fn_view_sub();
					    
					                // window close
					                setTimeout( function(){
					                    // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                    parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                },0);
					    
					            }

				},
				"popParemeters": {
					"fn_set": function(){
					                if($("#filterPop").val() != "" ){
					                    v_filterPop = JSON.parse($("#filterPop").val());
					                    var v_filters = [];
					                    $.each(v_filterPop ,function(field, data){
					                        var obj = {
					                            field : field ,
					                            // value: [].concat(data)
					                            value: data , 
					                            isArray : _.isArray(data)
					                        };
					                        v_filters.push( obj );
					                    });
					                    $("#searchJson").val(JSON.stringify({fields: v_filters}));
					                    if(false){
					                        //  tree deselect all
					                        var vJstreeList = [];
					                        $.each(v_filterPop ,function(k, v){
					                            var targetEl = findAllByElName( v_schema_search , function( _el){
					                                if ( _el.type == "jsTreeSearch"){
					                                    let _target = _.find(_el.relation.columns, function(col){
					                                        return col.childColumn.toUpperCase() ==  k.toUpperCase();
					                                    });
					                                    if( _target != null)
					                                        return true;
					                                }
					                            });
					    
					                            if ( targetEl != null){
					                                if (targetEl.type == "jsTreeSearch"){
					                                    if( _.find(vJstreeList,{id : targetEl.id}) == null){
					                                        vJstreeList.push(targetEl);
					                                    }
					                                    targetEl.popValues.push(v);
					                                    
					                                }
					                            }
					                            
					                        });
					                        $.each(vJstreeList, function (i,tree) {  
					                            var vTree = $("#" + tree.id ).jstree(true);
					                            vTree.deselect_all(true);
					                            vTree.select_node(tree.popValues.join(';;;'));
					                        });
					    
					                        $.each(v_filterPop ,function(k, v){
					                            var targetEl = findAllByElName( v_schema_search , function( _el){
					                                if( _el.type == "multiCombo"){
					                                    if( _el.jpa_column.child_column.toUpperCase() == k.toUpperCase())
					                                        return true;
					                                }else if ( _el.type == "jsTreeSearch"){
					                                    // let _target = _.find(_el.relation.columns, function(col){
					                                    //     return col.childColumn.toUpperCase() ==  k.toUpperCase();
					                                    // });
					                                    // if( _target != null)
					                                    //     return true;
					                                }else if ( _el.type == "input"){
					                                    if ( _el.columnName.toUpperCase() == k.toUpperCase() )
					                                        return true;
					                                }
					                            });
					    
					                            if ( targetEl != null){
					                                if (targetEl.type == "multiCombo"){
					                                    // origin select
					                                    $("#" + targetEl.id +" option").prop('selected',false);
					                                    $("#" + targetEl.id +" option[value='"  + v + "']").prop('selected',true);
					                                    // // div view
					                                    // $("input[name=multiselect_" + targetEl.name +"]").prop('checked',false);
					                                    // $("input[name=multiselect_" + targetEl.name +"] option[value="  + v + "]").prop('checked',true);
					                                    var mainControl = $("#" + targetEl.id );
					                                    mainControl.multiselect('refresh');
					                                    mainControl.multiselect('widget').css("width","400px");
					                                    mainControl.multiselect('widget').find(".ui-multiselect-filter input").css("width","150px");
					    
					                                }else if (targetEl.type == "jsTreeSearch"){
					                                    // var vTree = $("#" + targetEl.id ).jstree(true);
					                                    // // vTree.deselect_all(true);
					                                    // var seldata = _.find(vTree._model.data , function( data ){
					                                    //     if (data['original'] == null || data.original["field"] == null)
					                                    //         return false;
					                                    //     var vOriginal = data['original'];
					                                    //     if ( vOriginal.field == k && vOriginal.value == v){
					                                    //         return true;
					                                    //     }
					                                    //     return false;
					    
					                                    // });
					                                    // if(seldata != null  && seldata.children != null && seldata.children.length == 0 )
					                                    //     vTree.select_node(seldata.id);
					    
					                                }else if (targetEl.type == "input"){
					                                    $("#" + targetEl.id).val(v);
					                                }
					                            }
					                            
					                            
					                            
					                        });
					                    }
					                    
					                }
					                
					            },

					"fn_pop_select_set": function(){
												
					                if($("#pop_select").val() == "" )
					                    return;
					                var v_pop_select = JSON.parse($("#pop_select").val());
					                if ( _.keys(v_pop_select).length == 0 )
					                    return;
					                if ( _.keys(v_pop_select.search_str_option).length == 0 )
					                    return;
					
					                // find grid
					                var v_grid_schema = findAllByElName(v_schema_content.elements , {type:"grid"});
					                if ( v_grid_schema  == null)
					                    return;
					                
					                // rules Array  2020.01.03
					                v_rules =[];
					                if (typeof v_pop_select.search_str_option.search_field == "string"){
					                    // find item
					                    var v_item = _.find(v_grid_schema.items , {name : v_pop_select.search_str_option.search_field});
					                    if (v_item == null)
					                        return;
					                    /**********************************************/
					                    /****  For Item setting filter initialtext ****/
					                    /**********************************************/
					                    // set searchoptions.defaultValue
					                    var v_item_to_merge = {
					                        searchoptions : {
					                            searchOperMenu: true,
					                            defaultValue: '' + v_pop_select.search_str_option.search_value
					                            //  defaultValue: '^' + v_pop_select.search_str_option.search_value
					                        }								
					                    };
					                    _.merge(v_item, v_item_to_merge);
					                    /**********************************************/
					                    /****  For Grid Setting postData.filers *******/
					                    /**********************************************/
					                    v_rules.push(
					                        {
					                            field : v_pop_select.search_str_option.search_field,
					                            op: "cn",
					                            data : '^' + v_pop_select.search_str_option.search_value
					                        }
					                    );
					                }else if ( _.isArray(v_pop_select.search_str_option.search_field)){
					                    
					                    $.each(v_pop_select.search_str_option.search_field , function(i,search_field){
					                        
					                        if ( search_field.value != null && search_field.value.length > 0){
					                            /**********************************************/
					                            /****  For Item setting filter initialtext ****/
					                            /**********************************************/
					                            // set searchoptions.defaultValue
					                            var v_item = _.find(v_grid_schema.items , {name : search_field.target });
					                            if ( v_item == null )
					                                return true;
					                            var v_item_to_merge = {
					                                searchoptions : {
					                                    searchOperMenu: true,
					                                    defaultValue: '^' + search_field.value
					                                    //  defaultValue: '^' + v_pop_select.search_str_option.search_value
					                                }								
					                            };
					                            _.merge(v_item, v_item_to_merge);
					
					                            /**********************************************/
					                            /****  For Grid Setting postData.filers *******/
					                            /**********************************************/
					                            
					                            v_rules.push(
					                                {
					                                    field : search_field.target,
					                                    op: "cn",
					                                    // data : '^' + v_pop_select.search_str_option.search_value
					                                    data : '^' + search_field.value
					                                }
					                            );
					                        }
					                        
					                    });
					                }else{
					                    return;
					                }
					                    
					                var v_filters = {
					                    groupOp : "AND",
					                    rules : v_rules
					                };
					                
					
					
					                var v_grid_to_merge = {
					                    postData : {
					                        filters : JSON.stringify(v_filters)
					                    }
					                };
					                _.merge(v_grid_schema.gridOpt, v_grid_to_merge);
					
					
					            }

				}
			},
			{
				"fileType": "jsp",
				"editType": "add",
				"fileName": "cmmUse.add",
				"entityId": "cmm_use",
				"dictionaries": [
					{
						"entityName": "cmm_use",
						"sqlId": "cmmUse.dictionary.cmmUse",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "table_name",
						"childColumnName": "table_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "table_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "table_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "table_name",
						"sqlId": "cmmUse.datasrc.tabCols.tableName",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.tableName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "column_name",
						"childColumnName": "column_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "column_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "column_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "column_name",
						"sqlId": "cmmUse.datasrc.tabCols.columnName",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.columnName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"topRefrenceId": "reference::cmm_cd::cmm_use",
						"parentEntity": "cmm_cd",
						"parentColumnName": "code_category",
						"childColumnName": "code_category",
						"childColumnNames": [
							"code_category"
						],
						"parentNameColumn": "code_category",
						"parentColumnNames": [
							"code_category"
						],
						"topEntity": "cmm_cd",
						"topColumnName": "code_category",
						"topColumnNames": [
							"code_category"
						],
						"topNameColumn": "code_category",
						"sqlId": "cmmUse.datasrc.cmmCd.codeCategory",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.cmmCd.codeCategory",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					}
				],
				"childReferences": [],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv1V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvoDRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv1F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv2F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRsvoTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv11-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv1l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv01-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv21-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvojRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv2l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv3l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRtWsDRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv3V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv3F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv2V-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv4V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRtWsTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv4F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv31-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_use\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.dictionary.cmmUse\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"table_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"table_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"table_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.tableName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.tableName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"column_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"column_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"column_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.columnName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.columnName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"cmm_cd\",",
					"\t\t\t\t\"parentColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"code_category\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"cmm_cd\",",
					"\t\t\t\t\"topColumnName\": \"code_category\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"code_category\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.cmmCd.codeCategory\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.cmmCd.codeCategory\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar childReferences = [];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvoDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRsvoTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv11-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv01-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv21-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvojRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRtWsDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv2V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRtWsTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv31-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmUse.cmmUse\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];\n\t\t\t                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=cmmUse.cmmUse.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                var properties = _.filter(gridProperties, function(prop){ \n\t\t\t                    return true;\n\t\t\t                });\n\t\t\t                $.each([].concat(properties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(properties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != \"\"){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t\n\t\t\t                            // if add_hidden , then edit_tage : hidden\n\t\t\t                            if (prop._documentation != null && prop._documentation.add_hidden ){\n\t\t\t                                rtnObj.edit_tag = \"hidden\";\n\t\t\t                            }\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                    \n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(properties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if add_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.add_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != \"\" ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"cmmUse.cmmUse.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t\n\t\t\t                            // fileupload\n\t\t\t                            var parameter = \"\";\n\t\t\t                            // if you want to upload options ....\n\t\t\t                            // parameter = \"uploadBoard=schema\";\n\t\t\t                            // parameter += \"&useRealFileName=Y\";\n\t\t\t                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){\n\t\t\t                                $('#form').ajaxForm({\n\t\t\t                                    url: \"./fileTestJson.do?\" + parameter \n\t\t\t                                    , type:\"POST\"\n\t\t\t                                    , dataType:\"json\"\n\t\t\t                                    , async: false\n\t\t\t                                    , success:function(json) {\n\t\t\t                                        fileInfo = json;\n\t\t\t                                    }\n\t\t\t                                    , error:function(e){\n\t\t\t                                        alert(e.responseText);\n\t\t\t                                    }\n\t\t\t                                });\n\t\t\t                                $('#form').submit();\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});\n\t\t\t                            if (edit_items.length > 0 ){\n\t\t\t                                $.each(edit_items, function(i,edit_item){\n\t\t\t                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });\n\t\t\t                                    if (item_fileinfo != null){\n\t\t\t                                        addRow[edit_item.col] = item_fileinfo.orgFileName;\n\t\t\t                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;\n\t\t\t                                        \n\t\t\t                                    }\t\t\n\t\t\t                                });\n\t\t\t                                \t\t\t\t\t\t\t\t\t\n\t\t\t                            }\n\t\t\t\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t                if (entityDoc.add_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.add_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };  \n\t\t\t                \n\t\t\t                \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t                    \n\t\t\t                    var parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t                                \n\t\t\t                                if (typeof option.search_field == \"string\"){\n\t\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t$.each( option.search_field , function(i,search_field){\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar target_react = _.find( \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_this.reactObjects ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: search_field.from\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tsearch_field.value = target_react.state.value;\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t                                }\n\t\t\t                                \n\t\t\t                                pop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do some customize ...\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t                \n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "cmmUse"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmUse.cmmUse",
					"fn_make_schema": function(){
					                var detailList = [];
					                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=cmmUse.cmmUse.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                var properties = _.filter(gridProperties, function(prop){ 
					                    return true;
					                });
					                $.each([].concat(properties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(properties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != ""){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					
					                            // if add_hidden , then edit_tage : hidden
					                            if (prop._documentation != null && prop._documentation.add_hidden ){
					                                rtnObj.edit_tag = "hidden";
					                            }
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					                        }
					                        
					
					                    });
					                    
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(properties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if add_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.add_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != "" ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "cmmUse.cmmUse.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					
					                            // fileupload
					                            var parameter = "";
					                            // if you want to upload options ....
					                            // parameter = "uploadBoard=schema";
					                            // parameter += "&useRealFileName=Y";
					                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){
					                                $('#form').ajaxForm({
					                                    url: "./fileTestJson.do?" + parameter 
					                                    , type:"POST"
					                                    , dataType:"json"
					                                    , async: false
					                                    , success:function(json) {
					                                        fileInfo = json;
					                                    }
					                                    , error:function(e){
					                                        alert(e.responseText);
					                                    }
					                                });
					                                $('#form').submit();
					                            }
					                            
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});
					                            if (edit_items.length > 0 ){
					                                $.each(edit_items, function(i,edit_item){
					                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });
					                                    if (item_fileinfo != null){
					                                        addRow[edit_item.col] = item_fileinfo.orgFileName;
					                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;
					                                        
					                                    }		
					                                });
					                                									
					                            }
					
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					                if (entityDoc.add_button_option != null){
					                    schema_options.button_option = entityDoc.add_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };  
					                
					                
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
										oFrm.target = frameId;
					                    
					                    var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
					                                
					                                if (typeof option.search_field == "string"){
														option.search_value = this.state.search_str;								
														
													}else{
														$.each( option.search_field , function(i,search_field){
															var target_react = _.find( 
																_this.reactObjects ,  
																{ 
																	props : {
																		options : {
																			name: search_field.from
																		} 
																	}															
																}
															);																		
															search_field.value = target_react.state.value;										
														});
					                                }
					                                
					                                pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do some customize ...
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					                
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "edit",
				"fileName": "cmmUse.edit",
				"entityId": "cmm_use",
				"dictionaries": [
					{
						"entityName": "cmm_use",
						"sqlId": "cmmUse.dictionary.cmmUse",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "table_name",
						"childColumnName": "table_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "table_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "table_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "table_name",
						"sqlId": "cmmUse.datasrc.tabCols.tableName",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.tableName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "column_name",
						"childColumnName": "column_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "column_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "column_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "column_name",
						"sqlId": "cmmUse.datasrc.tabCols.columnName",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.columnName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"topRefrenceId": "reference::cmm_cd::cmm_use",
						"parentEntity": "cmm_cd",
						"parentColumnName": "code_category",
						"childColumnName": "code_category",
						"childColumnNames": [
							"code_category"
						],
						"parentNameColumn": "code_category",
						"parentColumnNames": [
							"code_category"
						],
						"topEntity": "cmm_cd",
						"topColumnName": "code_category",
						"topColumnNames": [
							"code_category"
						],
						"topNameColumn": "code_category",
						"sqlId": "cmmUse.datasrc.cmmCd.codeCategory",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.cmmCd.codeCategory",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					}
				],
				"childReferences": [],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv1V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvoDRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv1F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv2F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRsvoTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv11-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv1l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv01-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv21-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvojRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv2l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv3l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRtWsDRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv3V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv3F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv2V-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv4V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRtWsTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv4F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv31-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_use\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.dictionary.cmmUse\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"table_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"table_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"table_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.tableName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.tableName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"column_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"column_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"column_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.columnName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.columnName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"cmm_cd\",",
					"\t\t\t\t\"parentColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"code_category\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"cmm_cd\",",
					"\t\t\t\t\"topColumnName\": \"code_category\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"code_category\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.cmmCd.codeCategory\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.cmmCd.codeCategory\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar childReferences = [];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvoDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRsvoTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv11-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv01-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv21-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvojRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRtWsDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv2V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRtWsTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv31-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmUse.cmmUse\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=cmmUse.cmmUse.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.edit_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"cmmUse.cmmUse.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.edit_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.edit_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };              \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do some customize ...\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "cmmUse"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmUse.cmmUse",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=cmmUse.cmmUse.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.edit_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "cmmUse.cmmUse.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.edit_button_option != null){
					                    schema_options.button_option = entityDoc.edit_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };              
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do some customize ...
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "copy",
				"fileName": "cmmUse.copy",
				"entityId": "cmm_use",
				"dictionaries": [
					{
						"entityName": "cmm_use",
						"sqlId": "cmmUse.dictionary.cmmUse",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "table_name",
						"childColumnName": "table_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "table_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "table_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "table_name",
						"sqlId": "cmmUse.datasrc.tabCols.tableName",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.tableName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "column_name",
						"childColumnName": "column_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "column_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "column_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "column_name",
						"sqlId": "cmmUse.datasrc.tabCols.columnName",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.columnName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"topRefrenceId": "reference::cmm_cd::cmm_use",
						"parentEntity": "cmm_cd",
						"parentColumnName": "code_category",
						"childColumnName": "code_category",
						"childColumnNames": [
							"code_category"
						],
						"parentNameColumn": "code_category",
						"parentColumnNames": [
							"code_category"
						],
						"topEntity": "cmm_cd",
						"topColumnName": "code_category",
						"topColumnNames": [
							"code_category"
						],
						"topNameColumn": "code_category",
						"sqlId": "cmmUse.datasrc.cmmCd.codeCategory",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.cmmCd.codeCategory",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					}
				],
				"childReferences": [],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv1V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvoDRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv1F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv2F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRsvoTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv11-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv1l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv01-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv21-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvojRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv2l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv3l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRtWsDRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv3V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv3F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv2V-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv4V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRtWsTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv4F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv31-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_use\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.dictionary.cmmUse\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"table_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"table_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"table_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.tableName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.tableName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"column_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"column_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"column_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.columnName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.columnName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"cmm_cd\",",
					"\t\t\t\t\"parentColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"code_category\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"cmm_cd\",",
					"\t\t\t\t\"topColumnName\": \"code_category\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"code_category\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.cmmCd.codeCategory\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.cmmCd.codeCategory\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar childReferences = [];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvoDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRsvoTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv11-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv01-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv21-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvojRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRtWsDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv2V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRtWsTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv31-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmUse.cmmUse\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=cmmUse.cmmUse.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.copy_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"cmmUse.cmmUse.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            // fileupload\n\t\t\t                            var parameter = \"\";\n\t\t\t                            // if you want to upload options ....\n\t\t\t                            // parameter = \"uploadBoard=schema\";\n\t\t\t\t\t\t\t\t\t\t// parameter += \"&useRealFileName=Y\";\n\t\t\t                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){\n\t\t\t                                $('#form').ajaxForm({\n\t\t\t                                    url: \"./fileTestJson.do?\" + parameter \n\t\t\t                                    , type:\"POST\"\n\t\t\t                                    , dataType:\"json\"\n\t\t\t                                    , async: false\n\t\t\t                                    , success:function(json) {\n\t\t\t                                        fileInfo = json;\n\t\t\t                                    }\n\t\t\t                                    , error:function(e){\n\t\t\t                                        \n\t\t\t                                        alert(e.responseText);\n\t\t\t                                    }\n\t\t\t                                });\n\t\t\t                                $('#form').submit();\n\t\t\t                            }\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});\n\t\t\t                            if (edit_items.length > 0 ){\n\t\t\t                                $.each(edit_items, function(i,edit_item){\n\t\t\t                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });\n\t\t\t                                    if (item_fileinfo != null){\n\t\t\t                                        addRow[edit_item.col] = item_fileinfo.orgFileName;\n\t\t\t                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;\n\t\t\t                                        \n\t\t\t                                    }\t\t\n\t\t\t                                });\n\t\t\t                                \t\t\t\t\t\t\t\t\t\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.copy_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.copy_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };            \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "cmmUse"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmUse.cmmUse",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=cmmUse.cmmUse.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.copy_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "cmmUse.cmmUse.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            // fileupload
					                            var parameter = "";
					                            // if you want to upload options ....
					                            // parameter = "uploadBoard=schema";
												// parameter += "&useRealFileName=Y";
					                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){
					                                $('#form').ajaxForm({
					                                    url: "./fileTestJson.do?" + parameter 
					                                    , type:"POST"
					                                    , dataType:"json"
					                                    , async: false
					                                    , success:function(json) {
					                                        fileInfo = json;
					                                    }
					                                    , error:function(e){
					                                        
					                                        alert(e.responseText);
					                                    }
					                                });
					                                $('#form').submit();
					                            }
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});
					                            if (edit_items.length > 0 ){
					                                $.each(edit_items, function(i,edit_item){
					                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });
					                                    if (item_fileinfo != null){
					                                        addRow[edit_item.col] = item_fileinfo.orgFileName;
					                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;
					                                        
					                                    }		
					                                });
					                                									
					                            }
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.copy_button_option != null){
					                    schema_options.button_option = entityDoc.copy_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };            
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "view",
				"fileName": "cmmUse.view",
				"entityId": "cmm_use",
				"dictionaries": [
					{
						"entityName": "cmm_use",
						"sqlId": "cmmUse.dictionary.cmmUse",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "table_name",
						"childColumnName": "table_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "table_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "table_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "table_name",
						"sqlId": "cmmUse.datasrc.tabCols.tableName",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.tableName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"topRefrenceId": "reference::tab_cols::cmm_use",
						"parentEntity": "tab_cols",
						"parentColumnName": "column_name",
						"childColumnName": "column_name",
						"childColumnNames": [
							"table_name",
							"column_name"
						],
						"parentNameColumn": "column_name",
						"parentColumnNames": [
							"table_name",
							"column_name"
						],
						"topEntity": "tab_cols",
						"topColumnName": "column_name",
						"topColumnNames": [
							"table_name",
							"column_name"
						],
						"topNameColumn": "column_name",
						"sqlId": "cmmUse.datasrc.tabCols.columnName",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.tabCols.columnName",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					},
					{
						"referenceId": "reference::cmm_cd::cmm_use",
						"topRefrenceId": "reference::cmm_cd::cmm_use",
						"parentEntity": "cmm_cd",
						"parentColumnName": "code_category",
						"childColumnName": "code_category",
						"childColumnNames": [
							"code_category"
						],
						"parentNameColumn": "code_category",
						"parentColumnNames": [
							"code_category"
						],
						"topEntity": "cmm_cd",
						"topColumnName": "code_category",
						"topColumnNames": [
							"code_category"
						],
						"topNameColumn": "code_category",
						"sqlId": "cmmUse.datasrc.cmmCd.codeCategory",
						"data": function () {
						                    var _this = this;
						                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );
						                    var dataSrcType = "select";
						                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)
						                        dataSrcType = prop._documentation.data_src_type;
						                    if (dataSrcType == "select")
						                        var dataSrcType = "select";
						                    if (dataSrcType != "select")
						                        return;
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlId,
						                        data: {},
						                        async: false,
						                        success: function (response) {
						                            var dataList = response.dataList;
						                            $.each(dataList, function (i, data) {
						                                if( data != null)
						                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];
						                            });
						                        }
						                    });
						                },

						"value": {},
						"sqlIdDynamic": "cmmUse.datasrc.dynamic.cmmCd.codeCategory",
						"dataDynamic": function ( param ) {
						                    var _this = this;
						                    var rtnList = [];
						                    $.ajax({
						                        type: "POST",
						                        url: "./genericlListJson.do?" +
						                            "&sqlid=" + _this.sqlIdDynamic,
						                        data: param,
						                        async: false,
						                        success: function (response) {
						                            rtnList = response.dataList;
						                        }
						                    });
						                    return rtnList;
						                }

					}
				],
				"childReferences": [],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv1V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvoDRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv1F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv2F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRsvoTRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv11-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv1l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv01-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv21-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRsvojRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv2l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv3l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_gRtWsDRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv3V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv3F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv2V-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv4V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_gRtWsTRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv4F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv31-9EeqK2M3E1LfZ7Q",
						"_name": "code_category",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\tvar parentFrame = parent.${param.frameName};",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"cmm_use\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.dictionary.cmmUse\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnName\": \"table_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"table_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"table_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"table_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.tableName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.tableName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"tab_cols\",",
					"\t\t\t\t\"parentColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnName\": \"column_name\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"column_name\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"tab_cols\",",
					"\t\t\t\t\"topColumnName\": \"column_name\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"column_name\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.tabCols.columnName\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.tabCols.columnName\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"topRefrenceId\": \"reference::cmm_cd::cmm_use\",",
					"\t\t\t\t\"parentEntity\": \"cmm_cd\",",
					"\t\t\t\t\"parentColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnName\": \"code_category\",",
					"\t\t\t\t\"childColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"parentNameColumn\": \"code_category\",",
					"\t\t\t\t\"parentColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topEntity\": \"cmm_cd\",",
					"\t\t\t\t\"topColumnName\": \"code_category\",",
					"\t\t\t\t\"topColumnNames\": [",
					"\t\t\t\t\t\"code_category\"",
					"\t\t\t\t],",
					"\t\t\t\t\"topNameColumn\": \"code_category\",",
					"\t\t\t\t\"sqlId\": \"cmmUse.datasrc.cmmCd.codeCategory\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var prop = _.find(gridProperties , { _name : _this.childColumnName } );\n\t\t\t\t                    var dataSrcType = \"select\";\n\t\t\t\t                    if ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)\n\t\t\t\t                        dataSrcType = prop._documentation.data_src_type;\n\t\t\t\t                    if (dataSrcType == \"select\")\n\t\t\t\t                        var dataSrcType = \"select\";\n\t\t\t\t                    if (dataSrcType != \"select\")\n\t\t\t\t                        return;\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                        data: {},\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            var dataList = response.dataList;\n\t\t\t\t                            $.each(dataList, function (i, data) {\n\t\t\t\t                                if( data != null)\n\t\t\t\t                                    _this.value[data[ _this.topColumnName.toUpperCase()]] = data[_this.topNameColumn.toUpperCase()];\n\t\t\t\t                            });\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                },\n",
					"\t\t\t\t\"value\": {},",
					"\t\t\t\t\"sqlIdDynamic\": \"cmmUse.datasrc.dynamic.cmmCd.codeCategory\",",
					"\t\t\t\t\"dataDynamic\": function ( param ) {\n\t\t\t\t                    var _this = this;\n\t\t\t\t                    var rtnList = [];\n\t\t\t\t                    $.ajax({\n\t\t\t\t                        type: \"POST\",\n\t\t\t\t                        url: \"./genericlListJson.do?\" +\n\t\t\t\t                            \"&sqlid=\" + _this.sqlIdDynamic,\n\t\t\t\t                        data: param,\n\t\t\t\t                        async: false,\n\t\t\t\t                        success: function (response) {\n\t\t\t\t                            rtnList = response.dataList;\n\t\t\t\t                        }\n\t\t\t\t                    });\n\t\t\t\t                    return rtnList;\n\t\t\t\t                }\n",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar childReferences = [];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvoDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRsvoTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv11-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv1l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv01-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv21-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRsvojRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv2l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_gRtWsDRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv3F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv2V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_gRtWsTRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv4F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv31-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"code_category\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"cmmUse.cmmUse\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=cmmUse.cmmUse.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.view_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"cmmUse.cmmUse.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.view_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.view_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };            \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do ...\n\t\t\t\n\t\t\t                // \n\t\t\t                commonFunc.fn_view_sub();\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"entityId": "cmmUse"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "cmmUse.cmmUse",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=cmmUse.cmmUse.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.view_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "cmmUse.cmmUse.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.view_button_option != null){
					                    schema_options.button_option = entityDoc.view_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };            
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do ...
					
					                // 
					                commonFunc.fn_view_sub();
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "general",
				"fileName": "tabCols",
				"entityId": "tab_cols",
				"foreignEntities": [],
				"childEntities": [],
				"schema": {
					"search": {
						"name": "v_schema_search",
						"containerId": "v_schema_searchContainer",
						"schema": {
							"type": "Vertical",
							"id": "searchConditionHorizontalLayout",
							"name": "searchConditionHorizontalLayout",
							"label": "",
							"controlCss": [
								{
									"code": "min-height",
									"value": "30px"
								}
							],
							"elements": [
								{
									"label": "",
									"type": "HorizontalLayout",
									"cls": "",
									"containerCss": [],
									"elements": [
										{
											"containerCss": [],
											"label": "",
											"id": "searchVervical",
											"type": "Vertical",
											"elements": [
												{
													"label": "",
													"type": "HorizontalLayout",
													"id": "searchHorizontalLayout",
													"name": "searchHorizontalLayout",
													"containerCss": [
														{
															"code": "min-height",
															"value": "25px"
														}
													],
													"elements": []
												}
											]
										},
										{
											"label": "",
											"type": "HorizontalLayout",
											"cls": "btn_txt",
											"containerCss": [
												{
													"code": "margin-left",
													"value": "10px"
												},
												{
													"code": "float",
													"value": "right"
												}
											],
											"elements": [
												{
													"type": "ButtonBootstrap",
													"id": "btnSearch",
													"name": "btnSearch",
													"label": "SEARCH",
													"containerCss": [
														{
															"code": "margin-right",
															"value": "3px"
														}
													],
													"events": {
														"click": function(){
														                                                fn_search();
														                                            }

													}
												}
											]
										}
									]
								}
							]
						}
					},
					"contents": {
						"name": "v_schema_content",
						"containerId": "v_schema_contentContainer",
						"schema": {
							"type": "Vertical",
							"id": "contentVertical",
							"name": "contentVertical",
							"label": "",
							"elements": [
								{
									"type": "grid",
									"id": "tabColsGrid",
									"name": "tabColsGrid",
									"label": "",
									"text": "Tab_cols",
									"sqlId": "tabCols.tabCols",
									"entityId": "tab_cols",
									"containerCss": [
										{
											"code": "width",
											"value": "100%"
										},
										{
											"code": "margin-top",
											"value": "10px"
										},
										{
											"code": "background-color",
											"value": "#FFF"
										}
									],
									"gridOpt": {
										"datatype": "json",
										"pager": "#tabColsGridPager",
										"sqlId": "tabCols.tabCols",
										"gridId": "tabColsGrid",
										"modelVarName": "testEntityJpa",
										"url": function(){ 
										                    return	"./genericlListPageJson.do?" + 
										                        $("#form").serialize() + 
										                        "&sqlid=tabCols.tabCols.page.list" +  
										                        "&paging_sqlid=tabCols.tabCols.page.total" 
										                },

										"editurl": "./ssdCusDummySaveJson.do",
										"styleUI": "Bootstrap",
										"viewrecords": true,
										"width": "100%",
										"autowidth": true,
										"height": 650,
										"multiselect": false,
										"multiboxonly": true,
										"multiSort": true,
										"rowNum": 20,
										"rowList": [
											5,
											10,
											15,
											20,
											30
										],
										"emptyrecords": "No records to view",
										"gridComplete": function () {
										                    var grid = $(this).jqGrid();
										                    var gridParam = grid.getGridParam();
										                    var show_filter = true;
										                    if ( gridParam.filterToolbarShow != null 
										                        && gridParam.filterToolbarShow == false )
										                        show_filter = false; 
										                    if (show_filter){
										                        grid.jqGrid('filterToolbar',
										                        {
										                            defaultSearch:'cn'
										                            // JSON stringify all data from search, including search toolbar operators
										                            ,stringResult: true
										                            // instuct the grid toolbar to show the search options
										                            // ,searchOperators: true
										                        }
										                        );
										                    }
										                    
										                    
										                    grid.navGrid(gridParam.pager ,
										                        // the buttons to appear on the toolbar of the grid
										                        { edit: true, add: true, del: true, search: false,  refresh: true, view: true, position: "left", cloneToTop: false  
										                            ,addfunc: function(){
										                                commonFunc.fn_view_detail.call(this,'add');
										                            }
										                            , editfunc : function(){
										                                commonFunc.fn_view_detail.call(this,'edit');
										                            }, viewfunc : function(){
										                                commonFunc.fn_view_detail.call(this,'view');
										                            }
										
										                        }
										                        // options for the Edit Dialog
										                        ,{  }
										                        // options for the Script Master Add Dialog
										                        
										                        ,{	
										                            addCaption: "Add Script Master",
										                            modal:true,
										                            recreateForm: true,
										                            closeAfterAdd: true,
										                            reloadAfterSubmit: true,
										                            //template: template,
										                            errorTextFormat: function (data) {
										                                return 'Error: ' + data.responseText
										                            },
										                            onInitializeForm : function(formid){
										                                $(formid).attr('method','POST');
										                                $(formid).attr('action','');
										                                $(formid).attr('enctype','multipart/form-data');
										                                $(formid).css("font-size","14px");
										                                
										                            },
										                            afterSubmit: function(response, postdata) 
										                            { 
										                                var grid = $(this).jqGrid();
										                                var gridParam = grid.getGridParam();
										                                var formdata = this.ownerDocument.FormPost;
										                                var fd = new FormData(formdata);  	
										                                var response1 = {};
										                                
										                                $.ajax({
										                                    url: "./genericSaveJson.do?sqlid=" + gridParam.sqlId + ".insert",
										                                    type: "POST",
										                                    data: fd, 
										                                    async: false,
										                                    cache: false,
										                                    contentType: false,
										                                    processData: false,
										                                    success:  function(data){
										                                        response1 = data;
										                                        if(response1.result == 'success'){
										                                            // Cumtomise...
										                                        }
										                                        
										                                    }
										                                });
										                                
										                                //return [success,message,new_id] ;
										                                if(response1.result == 'success'){
										                                    //$(this).trigger('reloadGrid'); 
										                                    return [true, response1.result, ''];
										                                }
										                                else
										                                    return [false, response1.result + ":<br/>" + response1.message , ''];
										                                    
										                            }                         
										                        }
										                        // options for the Script Master Del Dialog 
										                        ,{  
										                            reloadAfterSubmit: true,
										                            afterSubmit: function(response, postdata) { 
										                                //$("#refresh_grid_script").hide();
										                                var grid = $(this);
										                                var paramObj = {
										                                    delRows : []
										                                };
										                                $.each(postdata.id.split(","),function(i,rowid){
										                                    var row = grid.getRowData(rowid);
										                                    paramObj.delRows.push(row);
										                                });
										                                
										                                //  
										                                paramObj.loop_id = "delRows";
										                                $.ajax({
										                                    url: "./genericSaveJson.do",
										                                    type: "POST",
										                                    data: {
										                                        searchJson: JSON.stringify(paramObj),
										                                        sqlid: "tabCols.tabCols.delete"
										                                    }  , 
										                                    async: false,
										                                    success:  function(data){
										                                        response1 = data;
										                                        if(response1.result == 'success'){
										                                        
										                                            msg = "Del Success!";
										                                            $("#dialog-confirm").html(msg);
										                                            $("#dialog-confirm").dialog({
										                                                resizable: false,
										                                                modal: true,
										                                                title: "Success",
										                                                //height: 200,
										                                                width: 200,
										                                                dialogClass: 'no-close',
										                                                closeOnEscape: false,
										                                                buttons: [
										                                                    {
										                                                        text: "OK",
										                                                        click: function() {
										                                                            $( this ).dialog( "close" );		
										                                                            // fn_search_script();
										                                                        }
										                                                    }
										                                                ]
										                                            });
										                                        }
										                                        
										                                    }
										                                });
										                                
										                                //return [success,message,new_id] ;
										                                if(response1.result == 'success'){
										                                    //$(this).trigger('reloadGrid'); 
										                                    return [true, response1.result, ''];
										                                }
										                                else
										                                    return [false, response1.result + ":<br/>" + response1.message , ''];
										                                    
										                            }
										                        }
										                        ,{ 
										                            multipleSearch: true,
										                            multipleGroup: true
										                        }
										                        
										                    );
										                    if ($(gridParam.pager).find(".ui-pg-button[title=Copy]").length == 0 && true) {
										                        grid.navButtonAdd(gridParam.pager, {
										                            caption : "", 
										                            title: "Copy",
										                            buttonicon : "glyphicon-copy",
										                            onClickButton: function(){ 
										                                var theGrid = $(this).jqGrid();
										                                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');
										                                if ( parentRowKey == null )   {
										                                    $("#dialog-confirm").html("Please, select row");
										                                    $("#dialog-confirm").dialog({
										                                        resizable: false,
										                                        modal: true,
										                                        title: "Error",
										                                        //height: 200,
										                                        width: 300,
										                                        dialogClass: 'no-close',
										                                        closeOnEscape: false,
										                                        buttons: [
										                                            {
										                                                text: "OK",
										                                                click: function() {
										                                                    $( this ).dialog( "close" );											                    			                  
										                                                }
										                                            }
										                                        ]
										                                    });
										                                    return;
										                                }
										                                commonFunc.fn_view_detail.call(this,'copy');
										                                // alert("Deleting Row");
										                            }, 
										                            position:"last"
										                        });
										                        var td_cp = $(gridParam.pager).find(".ui-pg-table .ui-pg-button[title='Copy']")
										                        var td_add = $(gridParam.pager).find(".ui-pg-table .ui-pg-button[title='Add new row']");
										                        td_add.after(td_cp);
										
										
										                    }
										                },

										"onCellSelect": function (rowId, iCol, content, event) {
										
										                    var grid = $(this).jqGrid();
										                    var row = grid.jqGrid('getRowData',rowId);
										                    var cms = grid.jqGrid("getGridParam", "colModel");
										                    var cm = cms[iCol];
										
										                    var oFrm = document.getElementById("form1");
										
										                    var v_property = _.find(gridProperties, { _name : cm.name.toLowerCase() });
										                    
										                    //customize
										                    var somCondition = ( v_property != null && 
										                        v_property._documentation != null &&
										                        v_property._documentation.file_info != null );
										
										                    if ( somCondition ){
										                        var path_column = v_property._documentation.file_info.path_column ;
										                        var path = '.'+ row[path_column] ;
										                        if((/\\.(txt|config|pdf|jpg|jpeg|gif|png|log)$/i).test(path)){
										                            var newWin1 = window.open("", "filedownload", "width=1200,height=900, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes");
										                            
										                            oFrm.action =  path;
										                            oFrm.method = "post";
										                            oFrm.target = 'filedownload'; 
										                            oFrm.submit();		
										                            newWin1.focus();
										                        }else if(row[cm.name].match(/\\.([\undefined]+)$/i) != null){
										                            //var src = "/dashboard/filedownloadJson.do";
										                            //src += "?filename=" + row.FILE_NAME;
										                            //src +="&path=" + row.FILE_PATH;
										                            //document.getElementById('file_iframe').src =  src;
										                            
										                            var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6
										                            if (isIE){
										                                //var fileData = ['\undefinedfeff' + "." + row.FILE_PATH];
										                                //var blobObject = new Blob(fileData);
										                                //window.navigator.msSaveOrOpenBlob(blobObject, row.FILE_NAME);
										                                var link = document.createElement('a');
										                                // customize for same path and name ==> formalize 
										                                var value_split = row[cm.name].split("/");
										                                var return_text = value_split.pop();
										                                // link.download = row[cm.name];
										                                link.download = return_text;
										                                link.href = "." + row[path_column] ;
										                                //Firefox requires the link to be in the body
										                                document.body.appendChild(link);
										                                link.click();
										                                link.target = '_blank';
										                                document.body.removeChild(link);
										
										                            }else{
										                                var link = document.createElement('a');
										                                // customize for same path and name ==> formalize 
										                                var value_split = row[cm.name].split("/");
										                                var return_text = value_split.pop();
										                                // link.download = row[cm.name];
										                                link.download = return_text;
										                                link.href = "." + row[path_column] ;
										                                //Firefox requires the link to be in the body
										                                document.body.appendChild(link);
										                                link.click();
										                                document.body.removeChild(link);
										                            }
										                                                                    
										                        }
										                    }
										                },

										"subGrid": false,
										"subgridtype": "json",
										"entityId": "tab_cols",
										"subGridRowExpanded": function(parentRowID, parentRowKey){
										                        var theGrid = $(this).jqGrid();
										                        var row = theGrid.jqGrid('getRowData',parentRowKey);
										                        var cms = theGrid.jqGrid("getGridParam", "colModel");
										                        var searchRow = {};
										                        var vGridOpt  = theGrid.getGridParam();
										                        $.each(row,function(k,v){
										                            // searchRow['search_' + _.camelCase(k)] = v;
										                        });
										                        var vKeys = [];
										                        // var models = eval(vGridOpt.modelVarName);
										                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
										                        $.each([].concat(gridProperties), function(i, prop){
										                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
										                            if (vId != null){
										                                vKeys.push(prop._name.toUpperCase());
										                                searchRow['search_' + _.camelCase(prop._name)] = row[prop._name.toUpperCase()];
										                            }
										                        });
										    
										                        // ***  grid ***//
										                        var childDivId = parentRowID + "_div_input";
										                        var childDiv = $(document.createElement("div"));
										                        childDiv.attr("id",childDivId);
										                        // add a table and pager HTML elements to the parent grid row - we will render the child grid here			    			
										                        $('#' + parentRowID).append(childDiv);
										    
										                        var detailList = [];
										                        $.ajax({
										                            type: "POST",
										                            url: "./genericlListJson.do?sqlid=tabCols.tabCols.one" ,
										                            data: searchRow ,
										                            //data: $("#form").serialize(), 
										                            async: false,
										                            success:  function(response){
										                                detailList  = response.dataList;                            
										                            }
										                        });
										                        
										                        if (detailList.length == 0 ){
										                            childDiv.text("no data");
										                            return;
										                        }
										    
										                        var schema1 = {
										                            containerId: childDivId,
										                            type:'Vertical',
										                            label: '',
										                            elements: [
										                                {
										                                    label: "",
										                                    type: 'Group',
										                                    elements: [
										                                        {
										                                            type: "inline_edit",
										                                            cols: 1,
										                                            data: function(){ 
										                                                return detailList[0];
										                                            },
										                                            options : {
										                                                keys : vKeys ,
										                                                fn_change: function( input ){
										                                                    //
										                                                    // if(this.props.options.name == 'SCRIPT_NAME'){
										                                                    // 	var convert = this.reactObjects.find(function(td){
										                                                    // 		return td.props.options.name == 'CONVERT_SCRIPT';
										                                                    // 	});	
										                                                    // 	//convert digit
										                                                    // 	//var v_hax = this.state.value;
										                                                    // 	var v_hax = input;
										                                                    // 	var v_digit = [];
										                                                    // 	$.each(v_hax.split(" "), function(i,str){
										                                                    // 		var d = "";
										                                                    // 		if(str.startsWith("0x")){
										                                                    // 			v_digit.push(parseInt(str,16));
										                                                    // 		}else{
										                                                    // 			v_digit.push(str);
										                                                    // 		}
										                                                    // 	});																		
										                                                    // 	convert.setState({value : v_digit.join(" ")});
										                                                        
										                                                    // }
										                                                    
										                                                },
										                                                fn_submit: function(){
										                                                    //alert("submit function defined");
										                                                    var state = true;
										                                                    var paramObj = {
										                                                        //origindatas: this.props.options.keys
										                                                        origindatas: this.state.keys
										                                                    };
										                                                    
										                                                    if(this.props.options.value == this.state.value)
										                                                        return state;
										                                                    $.ajax({
										                                                        url: "./genericSaveJson.do",
										                                                        type: "POST",
										                                                        data: {
										                                                            searchJson: JSON.stringify(paramObj),
										                                                            fieldName: this.state.name,
										                                                            fieldValue: this.state.value,
										                                                            fieldValueOrigin: this.state.value_origin,
										                                                            userId: $("#userId").val(),
										                                                            // sqlid: "dashboard.ssd_sm.script_master.update"
										                                                            sqlid: "tabCols.tabCols.edit"
										                                                        }, 
										                                                        async: false,			                    		
										                                                        success:  function(data){
										                                                            response1 = data;
										                                                            if(response1.result != 'success'){
										                                                                state = false;
										                                                                msg = "Save Success!";
										                                                                $("#dialog-confirm").html(response1.message);
										                                                                $("#dialog-confirm").dialog({
										                                                                    resizable: false,
										                                                                    modal: true,
										                                                                    title: "Error",
										                                                                    //height: 200,
										                                                                    width: 300,
										                                                                    dialogClass: 'no-close',
										                                                                    closeOnEscape: false,
										                                                                    buttons: [
										                                                                        {
										                                                                            text: "OK",
										                                                                            click: function() {
										                                                                            $( this ).dialog( "close" );											                    			                  
										                                                                            }
										                                                                        }
										                                                                    ]
										                                                                });
										                                                                
										                                                                
										                                                                
										                                                            }						                    			
										                                                        }
										                                                    });
										                                                    
										                                                    return state;
										                                                },
										                                                fn_afterSubmit: function(keyUpdatedObjects){
										                                                    
										                                                    $.each(this,function(i,react){
										                                                        if(_.find(cms,function(cm){return cm.name == react.state.name})){
										                                                            var vobject = {};
										                                                            vobject[react.state.name] = react.state.value;
										                                                            theGrid.setRowData(parentRowKey,vobject);
										                                                        }
										                                                        
										                                                    });
										                                                    
										                                                },
										                                                progressObject: parent.$("#loader")
										                                            },
										                                            items: _.map([].concat(gridProperties), function(prop){
										                                                var _cms = cms;
										                                                var rtnObj = {
										                                                    label : _.capitalize(_.upperCase(prop._name)),
										                                                    col : prop._name.toUpperCase() 
										                                                };
										                                                let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
										                                                if (vId != null){
										                                                    rtnObj.editable = false;
										                                                }
										    
										                                                // list hiden columns
										                                                if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
										                                                    rtnObj.isDateTime = true;
										                                                }
										                                                var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
										                                                if(vEdit != null){
										                                                    rtnObj.edit_tag = vEdit._value;
										                                                }
										    
										                                                var cm = _.find(_cms , {id: rtnObj.col});
										                                                if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
										    
										                                                    // rtnObj.selectOptions = cm.editoptions.value;
										                                                    var options = [];
										                                                    $.each(cm.editoptions.value, function (k, v) {
										                                                        var opt = {value: k, label: v};
										                                                        options.push(opt);
										                                                    });
										                                                    rtnObj.selectOptions = options;
										                                                    rtnObj.edit_tag = cm.edittype;
										                                                    if (parentFrame.v_filterPop[rtnObj.col] != null ){
										                                                        rtnObj.edit_tag = 'input';
										                                                        rtnObj.editable = false;
										                                                    }
										                                                }
										                                                return rtnObj;
										                                            })
										                                            
										                                        }
										                                        
										                                    
										                                    ]
										                                }
										                                
										                            
										                            ]
										                        };
										                        fn_makeHtml(childDiv,schema1);
										    
										    
										    
										                    }

									},
									"items": [
										{
											"label": "Table name",
											"name": "TABLE_NAME",
											"id": "TABLE_NAME",
											"align": "center",
											"entityName": "tab_cols",
											"editable": true,
											"gridId": "tabColsGrid",
											"editrules": {
												"edithidden": true
											},
											"cellattr": function( rowId, cellValue, rawObject, cm, rdata ){
											                        var grid = $(this).jqGrid();
											                        var vGridOpt = grid.getGridParam();
											                        // var models = eval(vGridOpt.modelVarName);
											                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
											                        var result = " class='contextMenu contextMenu-child'";
											                        result += " style='vertical-align: middle;";
											                        // blue
											                        // result += "color: #009eff;font-weight: bolder;cursor:pointer;'";
											                        result += "cursor:pointer;'";
											                        result += " gridId='" + vGridOpt.gridId + "'";
											                        result += " entityId='" + vGridOpt.entityId + "'";
											                        result += " columnName='" + cm.name + "'";
											                        result += " cellValue='" + rawObject[cm.name] + "'";
											                        
											                        return result;
											                    }

										},
										{
											"label": "Column name",
											"name": "COLUMN_NAME",
											"id": "COLUMN_NAME",
											"align": "center",
											"entityName": "tab_cols",
											"editable": true,
											"gridId": "tabColsGrid",
											"editrules": {
												"edithidden": true
											},
											"cellattr": function( rowId, cellValue, rawObject, cm, rdata ){
											                        var grid = $(this).jqGrid();
											                        var vGridOpt = grid.getGridParam();
											                        // var models = eval(vGridOpt.modelVarName);
											                        // var vEntity = _.find([].concat(models.ownedEntities),{"_xmi:id": vGridOpt.entityId} );
											                        var result = " class='contextMenu contextMenu-child'";
											                        result += " style='vertical-align: middle;";
											                        // blue
											                        // result += "color: #009eff;font-weight: bolder;cursor:pointer;'";
											                        result += "cursor:pointer;'";
											                        result += " gridId='" + vGridOpt.gridId + "'";
											                        result += " entityId='" + vGridOpt.entityId + "'";
											                        result += " columnName='" + cm.name + "'";
											                        result += " cellValue='" + rawObject[cm.name] + "'";
											                        
											                        return result;
											                    }

										}
									]
								}
							]
						}
					}
				},
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv51-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98DRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv5l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv6l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98TRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv6V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv6F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv5V-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv7V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98jRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv7F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv8F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98zRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv71-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv7l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv61-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					}
				],
				"sqlGenerator": {
					"fileName": "tabColsSql.xml",
					"dbType": "mysql",
					"sqls": [
						{
							"id": "tabCols.tabCols",
							"type": "select",
							"contents": [
								"select ",
								"\tTABLE_NAME,COLUMN_NAME",
								"from TAB_COLS a ",
								"where 1=1"
							],
							"wheres": [
								"<if test=\"search_tableName != null and search_tableName !='' \">",
								"\tand table_name = #{search_tableName}",
								"</if>",
								"<if test=\"search_columnName != null and search_columnName !='' \">",
								"\tand column_name = #{search_columnName}",
								"</if>"
							],
							"jsp_type": "grid"
						},
						{
							"id": "tabCols.tabCols.insert",
							"type": "insert",
							"contents": [
								"\tinsert into TAB_COLS(",
								"\t\ttable_name,column_name",
								"\t\t,INS_DT",
								"\t)",
								"\tvalues (",
								"\t\t#{TABLE_NAME}",
								"\t\t,",
								"\t\t#{COLUMN_NAME}",
								"\t\t,now()",
								"\t);"
							],
							"wheres": [],
							"jsp_type": "grid"
						},
						{
							"id": "tabCols.tabCols.edit",
							"type": "update",
							"contents": [
								"update TAB_COLS set",
								"\tMOD_Dt = now(),  ",
								"\t\t ${fieldName} = #{fieldValue}",
								"\twhere 1=1",
								"\t<choose>",
								"\t\t<when test=\"searchJson != null and searchJson != '' and searchJson.origindatas.size() > 0 \" >",
								"\t\t\t<foreach collection=\"searchJson.origindatas\" item=\"item\" index=\"index\"  >",
								"\t\t\t and ${item.field} = #{item.value}",
								"\t\t\t</foreach>",
								"\t\t</when>",
								"\t\t<otherwise>",
								"\t\tand 1=2",
								"\t\t</otherwise>",
								"\t</choose>",
								"\t;"
							],
							"wheres": []
						},
						{
							"id": "tabCols.tabCols.delete",
							"type": "update",
							"contents": [
								"\t\tdelete from TAB_COLS",
								"\t\twhere 1=1",
								"\t\tand table_name = #{detail.TABLE_NAME}",
								"\t\tand column_name = #{detail.COLUMN_NAME}",
								"\t\t;"
							],
							"wheres": []
						},
						{
							"id": "tabCols.dictionary.tabCols",
							"type": "select",
							"contents": [
								"select  ",
								"b.TABLE_NAME",
								", b.COLUMN_NAME",
								", a.CODE_CATEGORY",
								", a.CODE_ID",
								", a.CODE_NM",
								"from CMM_CD a",
								"left outer join  CMM_USE b",
								" on a.CODE_CATEGORY = b.CODE_CATEGORY",
								"where b.TABLE_NAME is not null",
								"order by 1,2,3,4"
							],
							"wheres": []
						}
					],
					"sources": [
						"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
						"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">",
						"<mapper namespace=\"\">",
						"<select id=\"tabCols.tabCols.page.list\" resultType=\"hashmap\" >",
						"\tSelect \n\t\t\t*\t\t\n\t\tFrom \n\t\t(\n\t\t\tselect\n\t\t\t\tA.*\n\t\t\tfrom \n\t\t\t(",
						"\tselect ",
						"\t\tTABLE_NAME,COLUMN_NAME",
						"\tfrom TAB_COLS a ",
						"\twhere 1=1",
						"\t<if test=\"search_tableName != null and search_tableName !='' \">",
						"\t\tand table_name = #{search_tableName}",
						"\t</if>",
						"\t<if test=\"search_columnName != null and search_columnName !='' \">",
						"\t\tand column_name = #{search_columnName}",
						"\t</if>",
						"\n\t\t\n",
						"\t) A where 1=1 \n\t\t\t<choose>\n\t\t\t\t<when test=\"filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )\">\n\t\t\t\t\tand (\n\t\t\t\t\t<if test=\"filters.rules.size() > 0\" >\n\t\t\t       \t\t<foreach collection=\"filters.rules\" item=\"item\" index=\"index\"  open=\"(\" separator=\"\" close=\")\">\n\t\t\t           \t\t<if test=\"index > 0 \"> ${filters.groupOp} </if>\n\t\t\t\t\t\t\t<choose>\n\t\t\t\t\t\t\t\t<when test=\"item.data.equalsIgnoreCase('isnull')\">${item.field} is null</when>\n\t\t\t\t    \t\t\t<when test=\"item.op =='eq' \">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ne' \">${item.field} <![CDATA[ != ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='lt' \">${item.field} <![CDATA[ < ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='le' \">${item.field} <![CDATA[ <= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='gt' \">${item.field} <![CDATA[ > ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ge' \">${item.field} <![CDATA[ >= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bw' \">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bn' \"> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='in' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ni' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ew' \"> REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='en' \"> NOT REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='nc' \">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t</choose>\n\t\t\t       \t\t</foreach>\t\n\t\t\t       \t</if>\t\n\t\t\t       \t<if test=\"filters.groups != null and filters.groups.size() > 0\">\n\t\t       \t\t\t<foreach collection=\"filters.groups\" item=\"group\" index=\"group_index\"  open=\"\"  close=\"\">\n\t\t\t       \t\t\t<if test=\"group.rules.size() > 0\">\n\t\t\t       \t\t\t${filters.groupOp}\n\t\t\t\t           \t<foreach collection=\"group.rules\" item=\"rule\" index=\"rule_index\"  open=\"(\"   separator=\"\" close=\")\">\n\t\t\t\t\t        \t<if test=\"rule_index > 0 \"> ${group.groupOp} </if>\n\t           \t\t \t\t\t<choose>\n\t\t\t\t\t\t\t\t\t<when test=\"rule.data.equalsIgnoreCase('isnull')\">${rule.field} is null</when>\t\n\t\t\t\t\t           \t\t<when test=\"rule.op =='eq' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data}|| '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ne' \">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='lt' \">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='le' \">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='gt' \">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ge' \">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bw' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bn' \"> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='in' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ni' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ew' \"> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='en' \"> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='nc' \">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t</choose> \n\t\t\t\t\t       \t</foreach>\n\t\t\t\t\t       \t</if>\n\t\t\t\t       \t</foreach>\n\t\t       \t\t</if> \n\t\t       \t\t )\n\t\t   \t\t</when>\n\t   \t\t</choose>\n\t\t) A\n\t\tLIMIT #{int_limit} OFFSET #{int_offset}\n\t\t",
						"</select>",
						"<select id=\"tabCols.tabCols.page.total\" resultType=\"hashmap\" >",
						"\tselect \n\t\tceil(count(*)/ #{rows} ) as total,\n\t\t#{page} as page ,\n\t\tcount(*) records \n\tfrom \n\t(\n\t\tselect a.* from (\n",
						"\tselect ",
						"\t\tTABLE_NAME,COLUMN_NAME",
						"\tfrom TAB_COLS a ",
						"\twhere 1=1",
						"\t<if test=\"search_tableName != null and search_tableName !='' \">",
						"\t\tand table_name = #{search_tableName}",
						"\t</if>",
						"\t<if test=\"search_columnName != null and search_columnName !='' \">",
						"\t\tand column_name = #{search_columnName}",
						"\t</if>",
						"\n\t\t\n",
						"\t) a\n\twhere 1=1 \t\t\t\n\t<choose>\n\t\t<when test=\"filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )\">\n\t\t\tand (\n\t\t\t<if test=\"filters.rules.size() > 0\" >\n\t\t\t\t<foreach collection=\"filters.rules\" item=\"item\" index=\"index\"  open=\"(\" separator=\"\" close=\")\">\n\t\t\t\t\t<if test=\"index > 0 \"> ${filters.groupOp} </if>\n\t\t\t\t\t<choose>\n\t\t\t\t    <when test=\"item.op =='eq' \">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ne' \">${item.field} <![CDATA[ != ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='lt' \">${item.field} <![CDATA[ < ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='le' \">${item.field} <![CDATA[ <= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='gt' \">${item.field} <![CDATA[ > ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='ge' \">${item.field} <![CDATA[ >= ]]> #{item.data}</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bw' \">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='bn' \"> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='in' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ni' \"></when>\n\t\t\t\t           \t\t<when test=\"item.op =='ew' \"> REGEXP_LIKE(${item.field}, #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='en' \"> NOT REGEXP_LIKE(${item.field}, #{item.data} || '$','i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t<when test=\"item.op =='cn' \">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>\n\t\t\t\t           \t\t</choose>\n\t\t\t\t</foreach>\t\n\t\t\t</if>\t\n\t\t\t<if test=\"filters.groups != null and filters.groups.size() > 0\">\n\t\t\t\t<foreach collection=\"filters.groups\" item=\"group\" index=\"group_index\"  open=\"\"  close=\"\">\n\t\t\t\t\t<if test=\"group.rules.size() > 0\">\n\t\t\t\t\t${filters.groupOp}\n\t\t\t\t\t<foreach collection=\"group.rules\" item=\"rule\" index=\"rule_index\"  open=\"(\"   separator=\"\" close=\")\">\n\t\t\t\t\t\t<if test=\"rule_index > 0 \"> ${group.groupOp} </if>\n\t\t\t\t\t\t<choose>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='eq' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ne' \">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='lt' \">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='le' \">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='gt' \">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ge' \">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bw' \">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='bn' \"> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='in' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ni' \"></when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='ew' \"> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='en' \"> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t<when test=\"rule.op =='cn' \">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>\n\t\t\t\t\t           \t\t</choose>           \t\t \n\t\t\t\t\t</foreach>\n\t\t\t\t\t</if>\n\t\t\t\t</foreach>\n\t\t\t</if> \n\t\t\t\t)\n\t\t</when>\n\t</choose>\n\t) a",
						"</select>",
						"<select id=\"tabCols.tabCols.one\" resultType=\"hashmap\" >",
						"\tselect ",
						"\t\tTABLE_NAME,COLUMN_NAME",
						"\tfrom TAB_COLS a ",
						"\twhere 1=1",
						"\t<if test=\"search_tableName != null and search_tableName !='' \">",
						"\t\tand table_name = #{search_tableName}",
						"\t</if>",
						"\t<if test=\"search_columnName != null and search_columnName !='' \">",
						"\t\tand column_name = #{search_columnName}",
						"\t</if>",
						"\n\t\t\n",
						"</select>",
						"<update id=\"tabCols.tabCols.insert\" parameterType=\"hashmap\" >",
						"\t\tinsert into TAB_COLS(",
						"\t\t\ttable_name,column_name",
						"\t\t\t,INS_DT",
						"\t\t)",
						"\t\tvalues (",
						"\t\t\t#{TABLE_NAME}",
						"\t\t\t,",
						"\t\t\t#{COLUMN_NAME}",
						"\t\t\t,now()",
						"\t\t);",
						"</update>",
						"<update id=\"tabCols.tabCols.edit\" parameterType=\"hashmap\" >",
						"\tupdate TAB_COLS set",
						"\t\tMOD_Dt = now(),  ",
						"\t\t\t ${fieldName} = #{fieldValue}",
						"\t\twhere 1=1",
						"\t\t<choose>",
						"\t\t\t<when test=\"searchJson != null and searchJson != '' and searchJson.origindatas.size() > 0 \" >",
						"\t\t\t\t<foreach collection=\"searchJson.origindatas\" item=\"item\" index=\"index\"  >",
						"\t\t\t\t and ${item.field} = #{item.value}",
						"\t\t\t\t</foreach>",
						"\t\t\t</when>",
						"\t\t\t<otherwise>",
						"\t\t\tand 1=2",
						"\t\t\t</otherwise>",
						"\t\t</choose>",
						"\t\t;",
						"</update>",
						"<update id=\"tabCols.tabCols.delete\" parameterType=\"hashmap\" >",
						"\t\t\tdelete from TAB_COLS",
						"\t\t\twhere 1=1",
						"\t\t\tand table_name = #{detail.TABLE_NAME}",
						"\t\t\tand column_name = #{detail.COLUMN_NAME}",
						"\t\t\t;",
						"</update>",
						"<select id=\"tabCols.dictionary.tabCols\" resultType=\"hashmap\" >",
						"\tselect  ",
						"\tb.TABLE_NAME",
						"\t, b.COLUMN_NAME",
						"\t, a.CODE_CATEGORY",
						"\t, a.CODE_ID",
						"\t, a.CODE_NM",
						"\tfrom CMM_CD a",
						"\tleft outer join  CMM_USE b",
						"\t on a.CODE_CATEGORY = b.CODE_CATEGORY",
						"\twhere b.TABLE_NAME is not null",
						"\torder by 1,2,3,4",
						"</select>",
						"</mapper>"
					],
					"fn_generate": function(){
					    var _this = this;
					    var src = '<?xml version="1.0" encoding="UTF-8"?>'; this.sources.push(src);
					    src = '<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">'; this.sources.push(src);
					    src = '<mapper namespace="">'; this.sources.push(src);
					    $.each(_this.sqls, function(i,sql){
					        if(sql.type == "select" ){
					            if(sql.jsp_type == "grid"){
					                var src = "";
					                //////////////////// page list
					                src = '<' + sql.type + ' id="'+ sql.id + '.page.list"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                
					                src = $("#pagelistHead"+ _.capitalize(_this.dbType)).text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                // jstree
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                //  include foot
					                src = $("#pagelistFooter" + _.capitalize(_this.dbType)).text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					                
					                
					                /////////////////// page total
					                src = '<' + sql.type + ' id="'+ sql.id + '.page.total"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                src = $("#pageTotalHead").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                // jstree
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                //  include foot
					                src = $("#pageTotalFooter").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					                
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					
					
					
					
					                ////////////////////// detail one select
					                src = '<' + sql.type + ' id="'+ sql.id + '.one"' ;
					                if ( sql.type =="select")  
					                    src += ' resultType="hashmap" >';  
					                _this.sources.push(src);
					                // include head
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                //  include foot
					                src = $("#jstreeSearchJson").text().replace(/@{/g,"#{").replace(/!{/g,"${");   _this.sources.push(src);
					
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					
					
					                ////////////////////// detail edit
					            } else {
					                src = '<' + sql.type + ' id="'+ sql.id + '" resultType="hashmap" >' ;
					                _this.sources.push(src);
					                $.each(sql.contents, function(j,content){
					                    src = "\	" + content ; _this.sources.push(src);
					                });
					                $.each(sql.wheres, function(j,where){
					                    src = "\	" + where ; _this.sources.push(src);
					                });
					                src = '</' + sql.type + '>'; _this.sources.push(src);
					            }
					        }else if (sql.type == 'insert'){
					            src = '<update id="'+ sql.id + '" parameterType="hashmap" >' ;            
					            _this.sources.push(src);
					            $.each(sql.contents, function(j,content){
					                src = "\	" + content ; _this.sources.push(src);
					            });
					            src = '</update>'; _this.sources.push(src);
					        }else if (sql.type == 'update'){
					            src = '<update id="'+ sql.id + '" parameterType="hashmap" >' ;
					            
					            _this.sources.push(src);
					            $.each(sql.contents, function(j,content){
					                src = "\	" + content ; _this.sources.push(src);
					            });
					            src = '</update>'; _this.sources.push(src);
					        }
					        
					    });
					    src = '</mapper>'; this.sources.push(src);
					
					}

				},
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page not use in general",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"tab_cols\",",
					"\t\t\t\t\"sqlId\": \"tabCols.dictionary.tabCols\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::undefined\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar jstreeInfo = {",
					"\t\t\t\"idList\": [],",
					"\t\t\t\"search\": function(){\n\t\t\t                var _this = this;\n\t\t\t                if (_this.idList.length == 0)\n\t\t\t                    return;\n\t\t\t                var selJsTree3 = [];\n\t\t\t                $.each(_this.idList, function(i,vJsTreeId){\n\t\t\t                    var vJsTree = $(\"#\" + vJsTreeId ).jstree(true);\n\t\t\t                    // var selJsTree = _.filter(vJsTree._model.data , {state : {selected: true } });\n\t\t\t                    var selJsTree = _.filter(vJsTree._model.data , function( data ){\n\t\t\t                        // if (data.id == \"#\")\n\t\t\t                        // \treturn false;\n\t\t\t                        if (data['original'] == null || data.original[\"field\"] == null)\n\t\t\t                            return false;\n\t\t\t                        if ( data.state.selected == null ) \n\t\t\t                            return false;\n\t\t\t                        var vSelected = data.state.selected;\n\t\t\t                        if ( vSelected)\n\t\t\t                            return true;\n\t\t\t                        $.each(vJsTree.get_node(data.id).children_d, function(i, nodeId){\n\t\t\t                            var vNode = vJsTree.get_node(nodeId);\n\t\t\t                            if ( vNode.state.selected) {\n\t\t\t                                vSelected = true;\n\t\t\t                                return false;\n\t\t\t                            }\n\t\t\t                        });\n\t\t\t                        // if ( vJsTree.get_bottom_checked(data.id).length > 0 )\n\t\t\t                        // \treturn true;\n\t\t\t\n\t\t\t                        return vSelected;\n\t\t\t\n\t\t\t                    });\n\t\t\t                    var selJsTree1 = _.map(selJsTree, function(data, i){\n\t\t\t                        var obj = {};\n\t\t\t\n\t\t\t                        // // Customize if field is different with Original field\n\t\t\t                        // var _datas = data.id.split(\";;;\");\n\t\t\t                        // var _col = _datas[1];\n\t\t\t                        // if ( _col != null && data.original.field != 'GUBUN' ){\n\t\t\t                        //     var _cols = _col.split(\"/\");\n\t\t\t                        //     var textIndex = _.findIndex(_datas.slice(2), function(o) { return o == data.text; });\n\t\t\t                        //     var keyIndex   = textIndex - 0;\n\t\t\t                        //     var _field = _cols[keyIndex];\n\t\t\t                        //     if ( _field == null) \n\t\t\t                        //         debugger;\n\t\t\t                        //     var _field1 = decamelize(_field,'_')\n\t\t\t                        //     obj[ _field1.toUpperCase() ] = data.text; \n\t\t\t                        // }else{\n\t\t\t                        //     // obj[_.camelCase(data.original.field)] = data.text;\n\t\t\t                        //     obj[ data.original.field] = data.text;\n\t\t\t                        // }\n\t\t\t                        obj[ data.original.field] = data.original.value;\n\t\t\t\n\t\t\t                        return obj;\n\t\t\t\n\t\t\t                    });\n\t\t\t                    var selJsTree2 = serializeArrayJSON(selJsTree1);\n\t\t\t                    \n\t\t\t                    $.each(selJsTree2, function(field, data){\n\t\t\t                        var obj = {\n\t\t\t                            field : field ,\n\t\t\t                            // value: [].concat(data)\n\t\t\t                            value: data , \n\t\t\t                            isArray : _.isArray(data)\n\t\t\t                        };\n\t\t\t                        selJsTree3.push( obj );\n\t\t\t                    });\n\t\t\t                    \n\t\t\t                });\n\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: selJsTree3}));\n\t\t\t                // var parameter = $(\"#form\").serializeFormJSON();\n\t\t\t                // var removedList = _.remove(selJsTree3,{field:'GUBUN'} );\n\t\t\t            }\n",
					"\t\t};",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv51-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98DRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv5l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98TRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv5V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98jRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv8F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98zRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv71-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv61-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar v_schema_search = {",
					"\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\"id\": \"searchConditionHorizontalLayout\",",
					"\t\t\t\"name\": \"searchConditionHorizontalLayout\",",
					"\t\t\t\"label\": \"\",",
					"\t\t\t\"controlCss\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"code\": \"min-height\",",
					"\t\t\t\t\t\"value\": \"30px\"",
					"\t\t\t\t}",
					"\t\t\t],",
					"\t\t\t\"elements\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\"cls\": \"\",",
					"\t\t\t\t\t\"containerCss\": [],",
					"\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"containerCss\": [],",
					"\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\"id\": \"searchVervical\",",
					"\t\t\t\t\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"id\": \"searchHorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"name\": \"searchHorizontalLayout\",",
					"\t\t\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"code\": \"min-height\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"value\": \"25px\"",
					"\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\t\t\"elements\": []",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t]",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\t\t\"type\": \"HorizontalLayout\",",
					"\t\t\t\t\t\t\t\"cls\": \"btn_txt\",",
					"\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"code\": \"margin-left\",",
					"\t\t\t\t\t\t\t\t\t\"value\": \"10px\"",
					"\t\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"code\": \"float\",",
					"\t\t\t\t\t\t\t\t\t\"value\": \"right\"",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\"elements\": [",
					"\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\"type\": \"ButtonBootstrap\",",
					"\t\t\t\t\t\t\t\t\t\"id\": \"btnSearch\",",
					"\t\t\t\t\t\t\t\t\t\"name\": \"btnSearch\",",
					"\t\t\t\t\t\t\t\t\t\"label\": \"SEARCH\",",
					"\t\t\t\t\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\t\t\t\t\"code\": \"margin-right\",",
					"\t\t\t\t\t\t\t\t\t\t\t\"value\": \"3px\"",
					"\t\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\t\t\t\"events\": {",
					"\t\t\t\t\t\t\t\t\t\t\"click\": function(){\n\t\t\t\t\t\t\t\t\t\t                                                fn_search();\n\t\t\t\t\t\t\t\t\t\t                                            }\n",
					"\t\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t\t]",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t]",
					"\t\t\t\t}",
					"\t\t\t]",
					"\t\t};",
					"\t\tvar v_schema_content = {",
					"\t\t\t\"type\": \"Vertical\",",
					"\t\t\t\"id\": \"contentVertical\",",
					"\t\t\t\"name\": \"contentVertical\",",
					"\t\t\t\"label\": \"\",",
					"\t\t\t\"elements\": [",
					"\t\t\t\t{",
					"\t\t\t\t\t\"type\": \"grid\",",
					"\t\t\t\t\t\"id\": \"tabColsGrid\",",
					"\t\t\t\t\t\"name\": \"tabColsGrid\",",
					"\t\t\t\t\t\"label\": \"\",",
					"\t\t\t\t\t\"text\": \"Tab_cols\",",
					"\t\t\t\t\t\"sqlId\": \"tabCols.tabCols\",",
					"\t\t\t\t\t\"entityId\": \"tab_cols\",",
					"\t\t\t\t\t\"containerCss\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"width\",",
					"\t\t\t\t\t\t\t\"value\": \"100%\"",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"margin-top\",",
					"\t\t\t\t\t\t\t\"value\": \"10px\"",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"code\": \"background-color\",",
					"\t\t\t\t\t\t\t\"value\": \"#FFF\"",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t],",
					"\t\t\t\t\t\"gridOpt\": {",
					"\t\t\t\t\t\t\"datatype\": \"json\",",
					"\t\t\t\t\t\t\"pager\": \"#tabColsGridPager\",",
					"\t\t\t\t\t\t\"sqlId\": \"tabCols.tabCols\",",
					"\t\t\t\t\t\t\"gridId\": \"tabColsGrid\",",
					"\t\t\t\t\t\t\"modelVarName\": \"testEntityJpa\",",
					"\t\t\t\t\t\t\"url\": function(){ \n\t\t\t\t\t\t                    return\t\"./genericlListPageJson.do?\" + \n\t\t\t\t\t\t                        $(\"#form\").serialize() + \n\t\t\t\t\t\t                        \"&sqlid=tabCols.tabCols.page.list\" +  \n\t\t\t\t\t\t                        \"&paging_sqlid=tabCols.tabCols.page.total\" \n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"editurl\": \"./ssdCusDummySaveJson.html\",",
					"\t\t\t\t\t\t\"styleUI\": \"Bootstrap\",",
					"\t\t\t\t\t\t\"viewrecords\": true,",
					"\t\t\t\t\t\t\"width\": \"100%\",",
					"\t\t\t\t\t\t\"autowidth\": true,",
					"\t\t\t\t\t\t\"height\": 650,",
					"\t\t\t\t\t\t\"multiselect\": false,",
					"\t\t\t\t\t\t\"multiboxonly\": true,",
					"\t\t\t\t\t\t\"multiSort\": true,",
					"\t\t\t\t\t\t\"rowNum\": 20,",
					"\t\t\t\t\t\t\"rowList\": [",
					"\t\t\t\t\t\t\t5,",
					"\t\t\t\t\t\t\t10,",
					"\t\t\t\t\t\t\t15,",
					"\t\t\t\t\t\t\t20,",
					"\t\t\t\t\t\t\t30",
					"\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\"emptyrecords\": \"No records to view\",",
					"\t\t\t\t\t\t\"gridComplete\": function () {\n\t\t\t\t\t\t                    var grid = $(this).jqGrid();\n\t\t\t\t\t\t                    var gridParam = grid.getGridParam();\n\t\t\t\t\t\t                    var show_filter = true;\n\t\t\t\t\t\t                    if ( gridParam.filterToolbarShow != null \n\t\t\t\t\t\t                        && gridParam.filterToolbarShow == false )\n\t\t\t\t\t\t                        show_filter = false; \n\t\t\t\t\t\t                    if (show_filter){\n\t\t\t\t\t\t                        grid.jqGrid('filterToolbar',\n\t\t\t\t\t\t                        {\n\t\t\t\t\t\t                            defaultSearch:'cn'\n\t\t\t\t\t\t                            // JSON stringify all data from search, including search toolbar operators\n\t\t\t\t\t\t                            ,stringResult: true\n\t\t\t\t\t\t                            // instuct the grid toolbar to show the search options\n\t\t\t\t\t\t                            // ,searchOperators: true\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        );\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    grid.navGrid(gridParam.pager ,\n\t\t\t\t\t\t                        // the buttons to appear on the toolbar of the grid\n\t\t\t\t\t\t                        { edit: true, add: true, del: true, search: false,  refresh: true, view: true, position: \"left\", cloneToTop: false  \n\t\t\t\t\t\t                            ,addfunc: function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'add');\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                            , editfunc : function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'edit');\n\t\t\t\t\t\t                            }, viewfunc : function(){\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'view');\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        // options for the Edit Dialog\n\t\t\t\t\t\t                        ,{  }\n\t\t\t\t\t\t                        // options for the Script Master Add Dialog\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        ,{\t\n\t\t\t\t\t\t                            addCaption: \"Add Script Master\",\n\t\t\t\t\t\t                            modal:true,\n\t\t\t\t\t\t                            recreateForm: true,\n\t\t\t\t\t\t                            closeAfterAdd: true,\n\t\t\t\t\t\t                            reloadAfterSubmit: true,\n\t\t\t\t\t\t                            //template: template,\n\t\t\t\t\t\t                            errorTextFormat: function (data) {\n\t\t\t\t\t\t                                return 'Error: ' + data.responseText\n\t\t\t\t\t\t                            },\n\t\t\t\t\t\t                            onInitializeForm : function(formid){\n\t\t\t\t\t\t                                $(formid).attr('method','POST');\n\t\t\t\t\t\t                                $(formid).attr('action','');\n\t\t\t\t\t\t                                $(formid).attr('enctype','multipart/form-data');\n\t\t\t\t\t\t                                $(formid).css(\"font-size\",\"14px\");\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                            },\n\t\t\t\t\t\t                            afterSubmit: function(response, postdata) \n\t\t\t\t\t\t                            { \n\t\t\t\t\t\t                                var grid = $(this).jqGrid();\n\t\t\t\t\t\t                                var gridParam = grid.getGridParam();\n\t\t\t\t\t\t                                var formdata = this.ownerDocument.FormPost;\n\t\t\t\t\t\t                                var fd = new FormData(formdata);  \t\n\t\t\t\t\t\t                                var response1 = {};\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                $.ajax({\n\t\t\t\t\t\t                                    url: \"./genericSaveJson.do?sqlid=\" + gridParam.sqlId + \".insert\",\n\t\t\t\t\t\t                                    type: \"POST\",\n\t\t\t\t\t\t                                    data: fd, \n\t\t\t\t\t\t                                    async: false,\n\t\t\t\t\t\t                                    cache: false,\n\t\t\t\t\t\t                                    contentType: false,\n\t\t\t\t\t\t                                    processData: false,\n\t\t\t\t\t\t                                    success:  function(data){\n\t\t\t\t\t\t                                        response1 = data;\n\t\t\t\t\t\t                                        if(response1.result == 'success'){\n\t\t\t\t\t\t                                            // Cumtomise...\n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    }\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //return [success,message,new_id] ;\n\t\t\t\t\t\t                                if(response1.result == 'success'){\n\t\t\t\t\t\t                                    //$(this).trigger('reloadGrid'); \n\t\t\t\t\t\t                                    return [true, response1.result, ''];\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                else\n\t\t\t\t\t\t                                    return [false, response1.result + \":<br/>\" + response1.message , ''];\n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                            }                         \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        // options for the Script Master Del Dialog \n\t\t\t\t\t\t                        ,{  \n\t\t\t\t\t\t                            reloadAfterSubmit: true,\n\t\t\t\t\t\t                            afterSubmit: function(response, postdata) { \n\t\t\t\t\t\t                                //$(\"#refresh_grid_script\").hide();\n\t\t\t\t\t\t                                var grid = $(this);\n\t\t\t\t\t\t                                var paramObj = {\n\t\t\t\t\t\t                                    delRows : []\n\t\t\t\t\t\t                                };\n\t\t\t\t\t\t                                $.each(postdata.id.split(\",\"),function(i,rowid){\n\t\t\t\t\t\t                                    var row = grid.getRowData(rowid);\n\t\t\t\t\t\t                                    paramObj.delRows.push(row);\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //  \n\t\t\t\t\t\t                                paramObj.loop_id = \"delRows\";\n\t\t\t\t\t\t                                $.ajax({\n\t\t\t\t\t\t                                    url: \"./genericSaveJson.html\",\n\t\t\t\t\t\t                                    type: \"POST\",\n\t\t\t\t\t\t                                    data: {\n\t\t\t\t\t\t                                        searchJson: JSON.stringify(paramObj),\n\t\t\t\t\t\t                                        sqlid: \"tabCols.tabCols.delete\"\n\t\t\t\t\t\t                                    }  , \n\t\t\t\t\t\t                                    async: false,\n\t\t\t\t\t\t                                    success:  function(data){\n\t\t\t\t\t\t                                        response1 = data;\n\t\t\t\t\t\t                                        if(response1.result == 'success'){\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                            msg = \"Del Success!\";\n\t\t\t\t\t\t                                            $(\"#dialog-confirm\").html(msg);\n\t\t\t\t\t\t                                            $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                                resizable: false,\n\t\t\t\t\t\t                                                modal: true,\n\t\t\t\t\t\t                                                title: \"Success\",\n\t\t\t\t\t\t                                                //height: 200,\n\t\t\t\t\t\t                                                width: 200,\n\t\t\t\t\t\t                                                dialogClass: 'no-close',\n\t\t\t\t\t\t                                                closeOnEscape: false,\n\t\t\t\t\t\t                                                buttons: [\n\t\t\t\t\t\t                                                    {\n\t\t\t\t\t\t                                                        text: \"OK\",\n\t\t\t\t\t\t                                                        click: function() {\n\t\t\t\t\t\t                                                            $( this ).dialog( \"close\" );\t\t\n\t\t\t\t\t\t                                                            // fn_search_script();\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                    }\n\t\t\t\t\t\t                                                ]\n\t\t\t\t\t\t                                            });\n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    }\n\t\t\t\t\t\t                                });\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                                //return [success,message,new_id] ;\n\t\t\t\t\t\t                                if(response1.result == 'success'){\n\t\t\t\t\t\t                                    //$(this).trigger('reloadGrid'); \n\t\t\t\t\t\t                                    return [true, response1.result, ''];\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                else\n\t\t\t\t\t\t                                    return [false, response1.result + \":<br/>\" + response1.message , ''];\n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        ,{ \n\t\t\t\t\t\t                            multipleSearch: true,\n\t\t\t\t\t\t                            multipleGroup: true\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                    );\n\t\t\t\t\t\t                    if ($(gridParam.pager).find(\".ui-pg-button[title=Copy]\").length == 0 && true) {\n\t\t\t\t\t\t                        grid.navButtonAdd(gridParam.pager, {\n\t\t\t\t\t\t                            caption : \"\", \n\t\t\t\t\t\t                            title: \"Copy\",\n\t\t\t\t\t\t                            buttonicon : \"glyphicon-copy\",\n\t\t\t\t\t\t                            onClickButton: function(){ \n\t\t\t\t\t\t                                var theGrid = $(this).jqGrid();\n\t\t\t\t\t\t                                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');\n\t\t\t\t\t\t                                if ( parentRowKey == null )   {\n\t\t\t\t\t\t                                    $(\"#dialog-confirm\").html(\"Please, select row\");\n\t\t\t\t\t\t                                    $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                        resizable: false,\n\t\t\t\t\t\t                                        modal: true,\n\t\t\t\t\t\t                                        title: \"Error\",\n\t\t\t\t\t\t                                        //height: 200,\n\t\t\t\t\t\t                                        width: 300,\n\t\t\t\t\t\t                                        dialogClass: 'no-close',\n\t\t\t\t\t\t                                        closeOnEscape: false,\n\t\t\t\t\t\t                                        buttons: [\n\t\t\t\t\t\t                                            {\n\t\t\t\t\t\t                                                text: \"OK\",\n\t\t\t\t\t\t                                                click: function() {\n\t\t\t\t\t\t                                                    $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                            }\n\t\t\t\t\t\t                                        ]\n\t\t\t\t\t\t                                    });\n\t\t\t\t\t\t                                    return;\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                commonFunc.fn_view_detail.call(this,'copy');\n\t\t\t\t\t\t                                // alert(\"Deleting Row\");\n\t\t\t\t\t\t                            }, \n\t\t\t\t\t\t                            position:\"last\"\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        var td_cp = $(gridParam.pager).find(\".ui-pg-table .ui-pg-button[title='Copy']\")\n\t\t\t\t\t\t                        var td_add = $(gridParam.pager).find(\".ui-pg-table .ui-pg-button[title='Add new row']\");\n\t\t\t\t\t\t                        td_add.after(td_cp);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"onCellSelect\": function (rowId, iCol, content, event) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var grid = $(this).jqGrid();\n\t\t\t\t\t\t                    var row = grid.jqGrid('getRowData',rowId);\n\t\t\t\t\t\t                    var cms = grid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\t\t\t                    var cm = cms[iCol];\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var oFrm = document.getElementById(\"form1\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    var v_property = _.find(gridProperties, { _name : cm.name.toLowerCase() });\n\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    //customize\n\t\t\t\t\t\t                    var somCondition = ( v_property != null && \n\t\t\t\t\t\t                        v_property._documentation != null &&\n\t\t\t\t\t\t                        v_property._documentation.file_info != null );\n\t\t\t\t\t\t\n\t\t\t\t\t\t                    if ( somCondition ){\n\t\t\t\t\t\t                        var path_column = v_property._documentation.file_info.path_column ;\n\t\t\t\t\t\t                        var path = '.'+ row[path_column] ;\n\t\t\t\t\t\t                        if((/\\\\.(txt|config|pdf|jpg|jpeg|gif|png|log)$/i).test(path)){\n\t\t\t\t\t\t                            var newWin1 = window.open(\"\", \"filedownload\", \"width=1200,height=900, screenY=20, top=20, screenX=100,left=100, scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            oFrm.action =  path;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = 'filedownload'; \n\t\t\t\t\t\t                            oFrm.submit();\t\t\n\t\t\t\t\t\t                            newWin1.focus();\n\t\t\t\t\t\t                        }else if(row[cm.name].match(/\\.([\\w]+)$/i) != null){\n\t\t\t\t\t\t                            //var src = \"/dashboard/filedownloadJson.do\";\n\t\t\t\t\t\t                            //src += \"?filename=\" + row.FILE_NAME;\n\t\t\t\t\t\t                            //src +=\"&path=\" + row.FILE_PATH;\n\t\t\t\t\t\t                            //document.getElementById('file_iframe').src =  src;\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6\n\t\t\t\t\t\t                            if (isIE){\n\t\t\t\t\t\t                                //var fileData = ['\\\\ufeff' + \".\" + row.FILE_PATH];\n\t\t\t\t\t\t                                //var blobObject = new Blob(fileData);\n\t\t\t\t\t\t                                //window.navigator.msSaveOrOpenBlob(blobObject, row.FILE_NAME);\n\t\t\t\t\t\t                                var link = document.createElement('a');\n\t\t\t\t\t\t                                // customize for same path and name ==> formalize \n\t\t\t\t\t\t                                var value_split = row[cm.name].split(\"/\");\n\t\t\t\t\t\t                                var return_text = value_split.pop();\n\t\t\t\t\t\t                                // link.download = row[cm.name];\n\t\t\t\t\t\t                                link.download = return_text;\n\t\t\t\t\t\t                                link.href = \".\" + row[path_column] ;\n\t\t\t\t\t\t                                //Firefox requires the link to be in the body\n\t\t\t\t\t\t                                document.body.appendChild(link);\n\t\t\t\t\t\t                                link.click();\n\t\t\t\t\t\t                                link.target = '_blank';\n\t\t\t\t\t\t                                document.body.removeChild(link);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            }else{\n\t\t\t\t\t\t                                var link = document.createElement('a');\n\t\t\t\t\t\t                                // customize for same path and name ==> formalize \n\t\t\t\t\t\t                                var value_split = row[cm.name].split(\"/\");\n\t\t\t\t\t\t                                var return_text = value_split.pop();\n\t\t\t\t\t\t                                // link.download = row[cm.name];\n\t\t\t\t\t\t                                link.download = return_text;\n\t\t\t\t\t\t                                link.href = \".\" + row[path_column] ;\n\t\t\t\t\t\t                                //Firefox requires the link to be in the body\n\t\t\t\t\t\t                                document.body.appendChild(link);\n\t\t\t\t\t\t                                link.click();\n\t\t\t\t\t\t                                document.body.removeChild(link);\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                                                                    \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                },\n",
					"\t\t\t\t\t\t\"subGrid\": false,",
					"\t\t\t\t\t\t\"subgridtype\": \"json\",",
					"\t\t\t\t\t\t\"entityId\": \"tab_cols\",",
					"\t\t\t\t\t\t\"subGridRowExpanded\": function(parentRowID, parentRowKey){\n\t\t\t\t\t\t                        var theGrid = $(this).jqGrid();\n\t\t\t\t\t\t                        var row = theGrid.jqGrid('getRowData',parentRowKey);\n\t\t\t\t\t\t                        var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\t\t\t                        var searchRow = {};\n\t\t\t\t\t\t                        var vGridOpt  = theGrid.getGridParam();\n\t\t\t\t\t\t                        $.each(row,function(k,v){\n\t\t\t\t\t\t                            // searchRow['search_' + _.camelCase(k)] = v;\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        var vKeys = [];\n\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t                        $.each([].concat(gridProperties), function(i, prop){\n\t\t\t\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t\t\t\t                            if (vId != null){\n\t\t\t\t\t\t                                vKeys.push(prop._name.toUpperCase());\n\t\t\t\t\t\t                                searchRow['search_' + _.camelCase(prop._name)] = row[prop._name.toUpperCase()];\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        // ***  grid ***//\n\t\t\t\t\t\t                        var childDivId = parentRowID + \"_div_input\";\n\t\t\t\t\t\t                        var childDiv = $(document.createElement(\"div\"));\n\t\t\t\t\t\t                        childDiv.attr(\"id\",childDivId);\n\t\t\t\t\t\t                        // add a table and pager HTML elements to the parent grid row - we will render the child grid here\t\t\t    \t\t\t\n\t\t\t\t\t\t                        $('#' + parentRowID).append(childDiv);\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        var detailList = [];\n\t\t\t\t\t\t                        $.ajax({\n\t\t\t\t\t\t                            type: \"POST\",\n\t\t\t\t\t\t                            url: \"./genericlListJson.do?sqlid=tabCols.tabCols.one\" ,\n\t\t\t\t\t\t                            data: searchRow ,\n\t\t\t\t\t\t                            //data: $(\"#form\").serialize(), \n\t\t\t\t\t\t                            async: false,\n\t\t\t\t\t\t                            success:  function(response){\n\t\t\t\t\t\t                                detailList  = response.dataList;                            \n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        if (detailList.length == 0 ){\n\t\t\t\t\t\t                            childDiv.text(\"no data\");\n\t\t\t\t\t\t                            return;\n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                        var schema1 = {\n\t\t\t\t\t\t                            containerId: childDivId,\n\t\t\t\t\t\t                            type:'Vertical',\n\t\t\t\t\t\t                            label: '',\n\t\t\t\t\t\t                            elements: [\n\t\t\t\t\t\t                                {\n\t\t\t\t\t\t                                    label: \"\",\n\t\t\t\t\t\t                                    type: 'Group',\n\t\t\t\t\t\t                                    elements: [\n\t\t\t\t\t\t                                        {\n\t\t\t\t\t\t                                            type: \"inline_edit\",\n\t\t\t\t\t\t                                            cols: 1,\n\t\t\t\t\t\t                                            data: function(){ \n\t\t\t\t\t\t                                                return detailList[0];\n\t\t\t\t\t\t                                            },\n\t\t\t\t\t\t                                            options : {\n\t\t\t\t\t\t                                                keys : vKeys ,\n\t\t\t\t\t\t                                                fn_change: function( input ){\n\t\t\t\t\t\t                                                    //\n\t\t\t\t\t\t                                                    // if(this.props.options.name == 'SCRIPT_NAME'){\n\t\t\t\t\t\t                                                    // \tvar convert = this.reactObjects.find(function(td){\n\t\t\t\t\t\t                                                    // \t\treturn td.props.options.name == 'CONVERT_SCRIPT';\n\t\t\t\t\t\t                                                    // \t});\t\n\t\t\t\t\t\t                                                    // \t//convert digit\n\t\t\t\t\t\t                                                    // \t//var v_hax = this.state.value;\n\t\t\t\t\t\t                                                    // \tvar v_hax = input;\n\t\t\t\t\t\t                                                    // \tvar v_digit = [];\n\t\t\t\t\t\t                                                    // \t$.each(v_hax.split(\" \"), function(i,str){\n\t\t\t\t\t\t                                                    // \t\tvar d = \"\";\n\t\t\t\t\t\t                                                    // \t\tif(str.startsWith(\"0x\")){\n\t\t\t\t\t\t                                                    // \t\t\tv_digit.push(parseInt(str,16));\n\t\t\t\t\t\t                                                    // \t\t}else{\n\t\t\t\t\t\t                                                    // \t\t\tv_digit.push(str);\n\t\t\t\t\t\t                                                    // \t\t}\n\t\t\t\t\t\t                                                    // \t});\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                                                    // \tconvert.setState({value : v_digit.join(\" \")});\n\t\t\t\t\t\t                                                        \n\t\t\t\t\t\t                                                    // }\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                fn_submit: function(){\n\t\t\t\t\t\t                                                    //alert(\"submit function defined\");\n\t\t\t\t\t\t                                                    var state = true;\n\t\t\t\t\t\t                                                    var paramObj = {\n\t\t\t\t\t\t                                                        //origindatas: this.props.options.keys\n\t\t\t\t\t\t                                                        origindatas: this.state.keys\n\t\t\t\t\t\t                                                    };\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    if(this.props.options.value == this.state.value)\n\t\t\t\t\t\t                                                        return state;\n\t\t\t\t\t\t                                                    $.ajax({\n\t\t\t\t\t\t                                                        url: \"./genericSaveJson.html\",\n\t\t\t\t\t\t                                                        type: \"POST\",\n\t\t\t\t\t\t                                                        data: {\n\t\t\t\t\t\t                                                            searchJson: JSON.stringify(paramObj),\n\t\t\t\t\t\t                                                            fieldName: this.state.name,\n\t\t\t\t\t\t                                                            fieldValue: this.state.value,\n\t\t\t\t\t\t                                                            fieldValueOrigin: this.state.value_origin,\n\t\t\t\t\t\t                                                            userId: $(\"#userId\").val(),\n\t\t\t\t\t\t                                                            // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t\t\t\t                                                            sqlid: \"tabCols.tabCols.edit\"\n\t\t\t\t\t\t                                                        }, \n\t\t\t\t\t\t                                                        async: false,\t\t\t                    \t\t\n\t\t\t\t\t\t                                                        success:  function(data){\n\t\t\t\t\t\t                                                            response1 = data;\n\t\t\t\t\t\t                                                            if(response1.result != 'success'){\n\t\t\t\t\t\t                                                                state = false;\n\t\t\t\t\t\t                                                                msg = \"Save Success!\";\n\t\t\t\t\t\t                                                                $(\"#dialog-confirm\").html(response1.message);\n\t\t\t\t\t\t                                                                $(\"#dialog-confirm\").dialog({\n\t\t\t\t\t\t                                                                    resizable: false,\n\t\t\t\t\t\t                                                                    modal: true,\n\t\t\t\t\t\t                                                                    title: \"Error\",\n\t\t\t\t\t\t                                                                    //height: 200,\n\t\t\t\t\t\t                                                                    width: 300,\n\t\t\t\t\t\t                                                                    dialogClass: 'no-close',\n\t\t\t\t\t\t                                                                    closeOnEscape: false,\n\t\t\t\t\t\t                                                                    buttons: [\n\t\t\t\t\t\t                                                                        {\n\t\t\t\t\t\t                                                                            text: \"OK\",\n\t\t\t\t\t\t                                                                            click: function() {\n\t\t\t\t\t\t                                                                            $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t\t\t\t                                                                            }\n\t\t\t\t\t\t                                                                        }\n\t\t\t\t\t\t                                                                    ]\n\t\t\t\t\t\t                                                                });\n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                                \n\t\t\t\t\t\t                                                            }\t\t\t\t\t\t                    \t\t\t\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    return state;\n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                    $.each(this,function(i,react){\n\t\t\t\t\t\t                                                        if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t\t\t\t                                                            var vobject = {};\n\t\t\t\t\t\t                                                            vobject[react.state.name] = react.state.value;\n\t\t\t\t\t\t                                                            theGrid.setRowData(parentRowKey,vobject);\n\t\t\t\t\t\t                                                        }\n\t\t\t\t\t\t                                                        \n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    \n\t\t\t\t\t\t                                                },\n\t\t\t\t\t\t                                                progressObject: parent.$(\"#loader\")\n\t\t\t\t\t\t                                            },\n\t\t\t\t\t\t                                            items: _.map([].concat(gridProperties), function(prop){\n\t\t\t\t\t\t                                                var _cms = cms;\n\t\t\t\t\t\t                                                var rtnObj = {\n\t\t\t\t\t\t                                                    label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t\t\t\t                                                    col : prop._name.toUpperCase() \n\t\t\t\t\t\t                                                };\n\t\t\t\t\t\t                                                let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t\t\t\t                                                if (vId != null){\n\t\t\t\t\t\t                                                    rtnObj.editable = false;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                // list hiden columns\n\t\t\t\t\t\t                                                if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t\t\t\t                                                    rtnObj.isDateTime = true;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                                var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t\t\t\t                                                if(vEdit != null){\n\t\t\t\t\t\t                                                    rtnObj.edit_tag = vEdit._value;\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t\t\t\t                                                if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\t\t\t    \n\t\t\t\t\t\t                                                    // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t\t\t\t                                                    var options = [];\n\t\t\t\t\t\t                                                    $.each(cm.editoptions.value, function (k, v) {\n\t\t\t\t\t\t                                                        var opt = {value: k, label: v};\n\t\t\t\t\t\t                                                        options.push(opt);\n\t\t\t\t\t\t                                                    });\n\t\t\t\t\t\t                                                    rtnObj.selectOptions = options;\n\t\t\t\t\t\t                                                    rtnObj.edit_tag = cm.edittype;\n\t\t\t\t\t\t                                                    if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t\t\t\t                                                        rtnObj.edit_tag = 'input';\n\t\t\t\t\t\t                                                        rtnObj.editable = false;\n\t\t\t\t\t\t                                                    }\n\t\t\t\t\t\t                                                }\n\t\t\t\t\t\t                                                return rtnObj;\n\t\t\t\t\t\t                                            })\n\t\t\t\t\t\t                                            \n\t\t\t\t\t\t                                        }\n\t\t\t\t\t\t                                        \n\t\t\t\t\t\t                                    \n\t\t\t\t\t\t                                    ]\n\t\t\t\t\t\t                                }\n\t\t\t\t\t\t                                \n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            ]\n\t\t\t\t\t\t                        };\n\t\t\t\t\t\t                        fn_makeHtml(childDiv,schema1);\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    \n\t\t\t\t\t\t    \n\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"items\": [",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"Table name\",",
					"\t\t\t\t\t\t\t\"name\": \"TABLE_NAME\",",
					"\t\t\t\t\t\t\t\"id\": \"TABLE_NAME\",",
					"\t\t\t\t\t\t\t\"align\": \"center\",",
					"\t\t\t\t\t\t\t\"entityName\": \"tab_cols\",",
					"\t\t\t\t\t\t\t\"editable\": true,",
					"\t\t\t\t\t\t\t\"gridId\": \"tabColsGrid\",",
					"\t\t\t\t\t\t\t\"editrules\": {",
					"\t\t\t\t\t\t\t\t\"edithidden\": true",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"cellattr\": function( rowId, cellValue, rawObject, cm, rdata ){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t\t                        var result = \" class='contextMenu contextMenu-child'\";\n\t\t\t\t\t\t\t                        result += \" style='vertical-align: middle;\";\n\t\t\t\t\t\t\t                        // blue\n\t\t\t\t\t\t\t                        // result += \"color: #009eff;font-weight: bolder;cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \"cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \" gridId='\" + vGridOpt.gridId + \"'\";\n\t\t\t\t\t\t\t                        result += \" entityId='\" + vGridOpt.entityId + \"'\";\n\t\t\t\t\t\t\t                        result += \" columnName='\" + cm.name + \"'\";\n\t\t\t\t\t\t\t                        result += \" cellValue='\" + rawObject[cm.name] + \"'\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        return result;\n\t\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t{",
					"\t\t\t\t\t\t\t\"label\": \"Column name\",",
					"\t\t\t\t\t\t\t\"name\": \"COLUMN_NAME\",",
					"\t\t\t\t\t\t\t\"id\": \"COLUMN_NAME\",",
					"\t\t\t\t\t\t\t\"align\": \"center\",",
					"\t\t\t\t\t\t\t\"entityName\": \"tab_cols\",",
					"\t\t\t\t\t\t\t\"editable\": true,",
					"\t\t\t\t\t\t\t\"gridId\": \"tabColsGrid\",",
					"\t\t\t\t\t\t\t\"editrules\": {",
					"\t\t\t\t\t\t\t\t\"edithidden\": true",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"cellattr\": function( rowId, cellValue, rawObject, cm, rdata ){\n\t\t\t\t\t\t\t                        var grid = $(this).jqGrid();\n\t\t\t\t\t\t\t                        var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t\t                        // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t\t                        // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t\t                        var result = \" class='contextMenu contextMenu-child'\";\n\t\t\t\t\t\t\t                        result += \" style='vertical-align: middle;\";\n\t\t\t\t\t\t\t                        // blue\n\t\t\t\t\t\t\t                        // result += \"color: #009eff;font-weight: bolder;cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \"cursor:pointer;'\";\n\t\t\t\t\t\t\t                        result += \" gridId='\" + vGridOpt.gridId + \"'\";\n\t\t\t\t\t\t\t                        result += \" entityId='\" + vGridOpt.entityId + \"'\";\n\t\t\t\t\t\t\t                        result += \" columnName='\" + cm.name + \"'\";\n\t\t\t\t\t\t\t                        result += \" cellValue='\" + rawObject[cm.name] + \"'\";\n\t\t\t\t\t\t\t                        \n\t\t\t\t\t\t\t                        return result;\n\t\t\t\t\t\t\t                    }\n",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t]",
					"\t\t\t\t}",
					"\t\t\t]",
					"\t\t};",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t                if($(\"#filterPop\").val() != \"\" ){\n\t\t\t                    v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t                    var v_filters = [];\n\t\t\t                    $.each(v_filterPop ,function(field, data){\n\t\t\t                        var obj = {\n\t\t\t                            field : field ,\n\t\t\t                            // value: [].concat(data)\n\t\t\t                            value: data , \n\t\t\t                            isArray : _.isArray(data)\n\t\t\t                        };\n\t\t\t                        v_filters.push( obj );\n\t\t\t                    });\n\t\t\t                    $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));\n\t\t\t                    if(false){\n\t\t\t                        //  tree deselect all\n\t\t\t                        var vJstreeList = [];\n\t\t\t                        $.each(v_filterPop ,function(k, v){\n\t\t\t                            var targetEl = findAllByElName( v_schema_search , function( _el){\n\t\t\t                                if ( _el.type == \"jsTreeSearch\"){\n\t\t\t                                    let _target = _.find(_el.relation.columns, function(col){\n\t\t\t                                        return col.childColumn.toUpperCase() ==  k.toUpperCase();\n\t\t\t                                    });\n\t\t\t                                    if( _target != null)\n\t\t\t                                        return true;\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t    \n\t\t\t                            if ( targetEl != null){\n\t\t\t                                if (targetEl.type == \"jsTreeSearch\"){\n\t\t\t                                    if( _.find(vJstreeList,{id : targetEl.id}) == null){\n\t\t\t                                        vJstreeList.push(targetEl);\n\t\t\t                                    }\n\t\t\t                                    targetEl.popValues.push(v);\n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        $.each(vJstreeList, function (i,tree) {  \n\t\t\t                            var vTree = $(\"#\" + tree.id ).jstree(true);\n\t\t\t                            vTree.deselect_all(true);\n\t\t\t                            vTree.select_node(tree.popValues.join(';;;'));\n\t\t\t                        });\n\t\t\t    \n\t\t\t                        $.each(v_filterPop ,function(k, v){\n\t\t\t                            var targetEl = findAllByElName( v_schema_search , function( _el){\n\t\t\t                                if( _el.type == \"multiCombo\"){\n\t\t\t                                    if( _el.jpa_column.child_column.toUpperCase() == k.toUpperCase())\n\t\t\t                                        return true;\n\t\t\t                                }else if ( _el.type == \"jsTreeSearch\"){\n\t\t\t                                    // let _target = _.find(_el.relation.columns, function(col){\n\t\t\t                                    //     return col.childColumn.toUpperCase() ==  k.toUpperCase();\n\t\t\t                                    // });\n\t\t\t                                    // if( _target != null)\n\t\t\t                                    //     return true;\n\t\t\t                                }else if ( _el.type == \"input\"){\n\t\t\t                                    if ( _el.columnName.toUpperCase() == k.toUpperCase() )\n\t\t\t                                        return true;\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t    \n\t\t\t                            if ( targetEl != null){\n\t\t\t                                if (targetEl.type == \"multiCombo\"){\n\t\t\t                                    // origin select\n\t\t\t                                    $(\"#\" + targetEl.id +\" option\").prop('selected',false);\n\t\t\t                                    $(\"#\" + targetEl.id +\" option[value='\"  + v + \"']\").prop('selected',true);\n\t\t\t                                    // // div view\n\t\t\t                                    // $(\"input[name=multiselect_\" + targetEl.name +\"]\").prop('checked',false);\n\t\t\t                                    // $(\"input[name=multiselect_\" + targetEl.name +\"] option[value=\"  + v + \"]\").prop('checked',true);\n\t\t\t                                    var mainControl = $(\"#\" + targetEl.id );\n\t\t\t                                    mainControl.multiselect('refresh');\n\t\t\t                                    mainControl.multiselect('widget').css(\"width\",\"400px\");\n\t\t\t                                    mainControl.multiselect('widget').find(\".ui-multiselect-filter input\").css(\"width\",\"150px\");\n\t\t\t    \n\t\t\t                                }else if (targetEl.type == \"jsTreeSearch\"){\n\t\t\t                                    // var vTree = $(\"#\" + targetEl.id ).jstree(true);\n\t\t\t                                    // // vTree.deselect_all(true);\n\t\t\t                                    // var seldata = _.find(vTree._model.data , function( data ){\n\t\t\t                                    //     if (data['original'] == null || data.original[\"field\"] == null)\n\t\t\t                                    //         return false;\n\t\t\t                                    //     var vOriginal = data['original'];\n\t\t\t                                    //     if ( vOriginal.field == k && vOriginal.value == v){\n\t\t\t                                    //         return true;\n\t\t\t                                    //     }\n\t\t\t                                    //     return false;\n\t\t\t    \n\t\t\t                                    // });\n\t\t\t                                    // if(seldata != null  && seldata.children != null && seldata.children.length == 0 )\n\t\t\t                                    //     vTree.select_node(seldata.id);\n\t\t\t    \n\t\t\t                                }else if (targetEl.type == \"input\"){\n\t\t\t                                    $(\"#\" + targetEl.id).val(v);\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            \n\t\t\t                            \n\t\t\t                        });\n\t\t\t                    }\n\t\t\t                    \n\t\t\t                }\n\t\t\t                \n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select_set\": function(){\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t                if($(\"#pop_select\").val() == \"\" )\n\t\t\t                    return;\n\t\t\t                var v_pop_select = JSON.parse($(\"#pop_select\").val());\n\t\t\t                if ( _.keys(v_pop_select).length == 0 )\n\t\t\t                    return;\n\t\t\t                if ( _.keys(v_pop_select.search_str_option).length == 0 )\n\t\t\t                    return;\n\t\t\t\n\t\t\t                // find grid\n\t\t\t                var v_grid_schema = findAllByElName(v_schema_content.elements , {type:\"grid\"});\n\t\t\t                if ( v_grid_schema  == null)\n\t\t\t                    return;\n\t\t\t                \n\t\t\t                // rules Array  2020.01.03\n\t\t\t                v_rules =[];\n\t\t\t                if (typeof v_pop_select.search_str_option.search_field == \"string\"){\n\t\t\t                    // find item\n\t\t\t                    var v_item = _.find(v_grid_schema.items , {name : v_pop_select.search_str_option.search_field});\n\t\t\t                    if (v_item == null)\n\t\t\t                        return;\n\t\t\t                    /**********************************************/\n\t\t\t                    /****  For Item setting filter initialtext ****/\n\t\t\t                    /**********************************************/\n\t\t\t                    // set searchoptions.defaultValue\n\t\t\t                    var v_item_to_merge = {\n\t\t\t                        searchoptions : {\n\t\t\t                            searchOperMenu: true,\n\t\t\t                            defaultValue: '' + v_pop_select.search_str_option.search_value\n\t\t\t                            //  defaultValue: '^' + v_pop_select.search_str_option.search_value\n\t\t\t                        }\t\t\t\t\t\t\t\t\n\t\t\t                    };\n\t\t\t                    _.merge(v_item, v_item_to_merge);\n\t\t\t                    /**********************************************/\n\t\t\t                    /****  For Grid Setting postData.filers *******/\n\t\t\t                    /**********************************************/\n\t\t\t                    v_rules.push(\n\t\t\t                        {\n\t\t\t                            field : v_pop_select.search_str_option.search_field,\n\t\t\t                            op: \"cn\",\n\t\t\t                            data : '^' + v_pop_select.search_str_option.search_value\n\t\t\t                        }\n\t\t\t                    );\n\t\t\t                }else if ( _.isArray(v_pop_select.search_str_option.search_field)){\n\t\t\t                    \n\t\t\t                    $.each(v_pop_select.search_str_option.search_field , function(i,search_field){\n\t\t\t                        \n\t\t\t                        if ( search_field.value != null && search_field.value.length > 0){\n\t\t\t                            /**********************************************/\n\t\t\t                            /****  For Item setting filter initialtext ****/\n\t\t\t                            /**********************************************/\n\t\t\t                            // set searchoptions.defaultValue\n\t\t\t                            var v_item = _.find(v_grid_schema.items , {name : search_field.target });\n\t\t\t                            if ( v_item == null )\n\t\t\t                                return true;\n\t\t\t                            var v_item_to_merge = {\n\t\t\t                                searchoptions : {\n\t\t\t                                    searchOperMenu: true,\n\t\t\t                                    defaultValue: '^' + search_field.value\n\t\t\t                                    //  defaultValue: '^' + v_pop_select.search_str_option.search_value\n\t\t\t                                }\t\t\t\t\t\t\t\t\n\t\t\t                            };\n\t\t\t                            _.merge(v_item, v_item_to_merge);\n\t\t\t\n\t\t\t                            /**********************************************/\n\t\t\t                            /****  For Grid Setting postData.filers *******/\n\t\t\t                            /**********************************************/\n\t\t\t                            \n\t\t\t                            v_rules.push(\n\t\t\t                                {\n\t\t\t                                    field : search_field.target,\n\t\t\t                                    op: \"cn\",\n\t\t\t                                    // data : '^' + v_pop_select.search_str_option.search_value\n\t\t\t                                    data : '^' + search_field.value\n\t\t\t                                }\n\t\t\t                            );\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    });\n\t\t\t                }else{\n\t\t\t                    return;\n\t\t\t                }\n\t\t\t                    \n\t\t\t                var v_filters = {\n\t\t\t                    groupOp : \"AND\",\n\t\t\t                    rules : v_rules\n\t\t\t                };\n\t\t\t                \n\t\t\t\n\t\t\t\n\t\t\t                var v_grid_to_merge = {\n\t\t\t                    postData : {\n\t\t\t                        filters : JSON.stringify(v_filters)\n\t\t\t                    }\n\t\t\t                };\n\t\t\t                _.merge(v_grid_schema.gridOpt, v_grid_to_merge);\n\t\t\t\n\t\t\t\n\t\t\t            }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"tabCols.tabCols\",",
					"\t\t\t\"fn_view_detail\": function(_type){\n\t\t\t                var pageBody = parent.$(\"body\");\n\t\t\t                if (pageBody.length == 0)\n\t\t\t\t\t\t\t\tpageBody = parent.parent.$(\"body\");\n\t\t\t                // var modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t                // if (modalCommon.length == 0 ){\n\t\t\t                //     modalCommon = parent.parent.$(\"[name=infiniteLogModal]\");\n\t\t\t                // }\n\t\t\t                var parent_str = \"parent\";\n\t\t\t                var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t                while(modalCommon.length ==0){\n\t\t\t                    parent_str += \".parent\";\n\t\t\t                    modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t                    pageBody = eval(parent_str + \".$('body')\");\n\t\t\t                }\n\t\t\t                \n\t\t\t                var modalClone = modalCommon.clone();\n\t\t\t                pageBody.append(modalClone);\n\t\t\t                modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\n\t\t\t                var today = new Date();\n\t\t\t                var y = today.getFullYear();\n\t\t\t                var m = today.getMonth() + 1;\n\t\t\t                var d = today.getDate();\n\t\t\t                var h = today.getHours();\n\t\t\t                var mi = today.getMinutes();\n\t\t\t                var s = today.getSeconds();\n\t\t\t                var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t                var modalId = \"modal_\" + idPrefix;\n\t\t\t                var frameId = \"frame_\" + idPrefix;\n\t\t\t                modalClone.attr(\"id\",modalId);\n\t\t\t                modalClone.attr(\"name\",modalId);\n\t\t\t\n\t\t\t                var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t                frameDom.attr(\"id\", frameId);\n\t\t\t                frameDom.attr(\"name\", frameId);\n\t\t\t\n\t\t\t                var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t                container.append(frameDom);\n\t\t\t\n\t\t\t                // Form Submit\n\t\t\t                var oFrm = document.getElementById(\"form\");\n\t\t\t                var filter = {};\n\t\t\t                var theGrid = $(this).jqGrid();\n\t\t\t                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');\n\t\t\t                var row = theGrid.getRowData(parentRowKey);\n\t\t\t                var entityId = theGrid.jqGrid('getGridParam','entityId');\n\t\t\t                $.each(gridProperties , function(i,prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if(vId != null){\n\t\t\t                        filter[prop._name.toUpperCase()] = row[prop._name.toUpperCase()];\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\n\t\t\t                var viewName = $(\"#viewName\").val();\n\t\t\t                var viewPath = viewName.split(\"/\");\n\t\t\t                var itemName = viewPath.pop();\n\t\t\t                oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \".\" + _type + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t                // oFrm.action =  \"${pageContext.request.contextPath}/generic.do?viewName=common/commonDetail\";\n\t\t\t                $(\"#detailSqlId\").val(\"tabCols.tabCols.one\");\n\t\t\t                $(\"#detailSqlUpdateId\").val(\"tabCols.tabCols.edit\");\n\t\t\t                $(\"#detailType\").val(_type);\n\t\t\t                // $(\"#frameName\").val( 'frame_' +  _.camelCase( entityId ));\n\t\t\t                // $(\"#frameName\").val( window.frameElement.name );\n\t\t\t                var parentFrameName = \"${param.frameName}\";\n\t\t\t                if ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t                    $(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t                }else {\n\t\t\t                    $(\"#frameName\").val( window.frameElement.name );\n\t\t\t                }\n\t\t\t                oFrm.method = \"post\";\n\t\t\t                oFrm.target = frameId;\n\t\t\t                frameDom.show();\n\t\t\t                // Header\n\t\t\t                var filterStrs = [];\n\t\t\t                $.each(filter,function(k,v){\n\t\t\t                    var str = _.camelCase(k);\n\t\t\t                    str += \" : \" + v;\n\t\t\t                    filterStrs.push(str);\n\t\t\t                });\n\t\t\t                \n\t\t\t                var headStr = '[' + _.camelCase( entityId ) + ' ' +  _.upperCase(_type) + ' ]  '\n\t\t\t                if ( _type != \"add\" ) \n\t\t\t                    headStr += filterStrs.join(\" , \");\t\t\t\n\t\t\t\n\t\t\t                modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t                modalClone.modal();\n\t\t\t                // parent.$(\"#\"+modalId).modal();\n\t\t\t                modalClone.draggable({\n\t\t\t                    handle: \".modal-header\"\n\t\t\t                }); \n\t\t\t                oFrm.submit();\n\t\t\t            },\n",
					"\t\t\t\"fn_grid_option\": function(){\n\t\t\t                var is_pop_select = \"${param.is_pop_select}\";\n\t\t\t                var is_pop = \"${param.isPop}\";\n\t\t\t                var is_sub_frame = \"${param.isSubFrame}\";\n\t\t\t\n\t\t\t                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});\n\t\t\t                \n\t\t\t                if ( is_sub_frame ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 210;\n\t\t\t                    grid_shema.gridOpt.rowNum = 5;\n\t\t\t                }else if ( is_pop_select ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 420;\n\t\t\t                    grid_shema.gridOpt.rowNum = 15;\n\t\t\t                }else if ( is_pop ==  \"Y\"){\n\t\t\t                    grid_shema.gridOpt.height = 420;\n\t\t\t                    grid_shema.gridOpt.rowNum = 15;\n\t\t\t                }else {\n\t\t\t                    grid_shema.gridOpt.height = 650;\n\t\t\t                    grid_shema.gridOpt.rowNum = 20;\n\t\t\t                }\n\t\t\t            },\n",
					"\t\t\t\"fn_add_button_select_in_grid\": function(){\n\t\t\t                var is_pop_select = \"${param.is_pop_select}\";\n\t\t\t                if (is_pop_select != \"Y\")\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar item = {\n\t\t\t\t\t\t\t\t\"label\": \" \",\n\t\t\t\t\t\t\t\t\"name\": \"SELECT_BUTTON\",\n\t\t\t\t\t\t\t\t\"id\": \"SELECT_BUTTON\",\n\t\t\t\t\t\t\t\t\"align\": \"center\",\n\t\t\t\t\t\t\t\t\"width\": 45,\n\t\t\t\t\t\t\t\tsearch : false ,\n\t\t\t\t\t\t\t\t\"formatter\": function(cellValue, options, rowObject){\n\t\t\t\t\t\t\t\t\tvar btnHtml = '<button type=\"button\" class=\"btn btn-warning btn-xs\" style=\"line-height:1\" onclick=\"commonFunc.fn_select_for_parentframe(\\''+ options.rowId +'\\');\">Select</button>';\n\t\t\t\t\t\t\t\t\treturn btnHtml;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tvar grid_schema = findAllByElName(v_schema_content.elements , {type:'grid'});\n\t\t\t\t\t\t\tif (grid_schema != null){\n\t\t\t\t\t\t\t\tgrid_schema.items.push(item);\n\t\t\t\t\t\t\t}\n\t\t\t            },\n",
					"\t\t\t\"fn_select_for_parentframe\": function(_rowid){\n\t\t\t                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});\n\t\t\t                var theGrid = $(\"#\" + grid_shema.id).jqGrid();\n\t\t\t    \n\t\t\t                var row = theGrid.getRowData(_rowid);\n\t\t\t                var v_react_target = parentFrame.commonFunc.pop_select_react_object ;\n\t\t\t                var col = v_react_target.dataSrc.parentColumnName.toUpperCase() ;\n\t\t\t                \n\t\t\t                v_react_target.setState({value :row[col] });\n\t\t\t                \n\t\t\t                // search_str : expression\t\n\t\t\t                if($(\"#pop_select\").val() != \"\" ){\n\t\t\t                    var v_pop_select = JSON.parse($(\"#pop_select\").val());\n\t\t\t                    if ( _.keys(v_pop_select).length > 0 ){\n\t\t\t                        if ( _.keys(v_pop_select.search_str_option).length > 0 ){\n\t\t\t                            if (v_pop_select.search_str_option.expression != null){\n\t\t\t                                if (v_pop_select.search_str_option.expression != \"\"){\n\t\t\t                                    v_react_target.setState({search_str : eval(v_pop_select.search_str_option.expression) });\n\t\t\t                                    \n\t\t\t                                    // search_str : addtional field update\n\t\t\t                                    if (v_pop_select.search_str_option.additional_update_field != null){\n\t\t\t                                        $.each(v_pop_select.search_str_option.additional_update_field, function(k,v){\n\t\t\t                                            var v_addtional_target = _.find(v_react_target.reactObjects,{state: {name : k}});\n\t\t\t                                            if(v_addtional_target != null)\n\t\t\t                                                v_addtional_target.setState({value: row[v]});\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                    \n\t\t\t    \n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                    }\n\t\t\t                }\n\t\t\t                parentFrame.commonFunc.fn_pop_select_callback();\n\t\t\t                // parentFrame.commonFunc.fn_view_sub();\n\t\t\t    \n\t\t\t                // window close\n\t\t\t                setTimeout( function(){\n\t\t\t                    // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                    parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                },0);\n\t\t\t    \n\t\t\t            }\n",
					"\t\t};",
					"\t\tcommonFunc.fn_grid_option();",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\tcommonFunc.fn_add_button_select_in_grid();",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t$('#v_schema_searchContainer').html('')",
					"\t\t\t\tif($(\"#filterPop\").val() == \"\" ){",
					"\t\t\t\t\tfn_makeHtml('v_schema_searchContainer',v_schema_search);",
					"\t\t\t\t}",
					"\t\t\t\telse{",
					"\t\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t\tpopParemeters.fn_pop_select_set();",
					"\t\t\t\t\tfindAll(\"tabColsGrid\",v_schema_content.elements)[0].label = \"\";",
					"\t\t\t\t}",
					"\t\t\t\t$('#v_schema_contentContainer').html('')",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema_content);",
					"\t\t\t\t$.contextMenu(",
					"\t\t\t\t\t{",
					"\t\t\t\t\t\t\"selector\": \".jqgrow td.contextMenu\",",
					"\t\t\t\t\t\t\"trigger\": \"left\",",
					"\t\t\t\t\t\t\"build\": function($trigger) {\n\t\t\t\t\t\t            var options = {\n\t\t\t\t\t\t                callback: function(key, options) {\n\t\t\t\t\t\t                    // var m = \"clicked: \" + key;\n\t\t\t\t\t\t                    // window.console && console.log(m) || alert(m);\n\t\t\t\t\t\t                    options.items[key].callback.call(this,key,options);\n\t\t\t\t\t\t                },\n\t\t\t\t\t\t                items: {}\n\t\t\t\t\t\t\n\t\t\t\t\t\t            };\n\t\t\t\t\t\t\n\t\t\t\t\t\t            // if ($trigger.hasClass('something')) {\n\t\t\t\t\t\t            // \toptions.items.foo = {name: \"foo\"};\n\t\t\t\t\t\t            // } else {\n\t\t\t\t\t\t            //     options.items.bar = {name: \"bar\"};\n\t\t\t\t\t\t            // }\n\t\t\t\t\t\t            var columnName = $trigger.attr(\"columnName\");\n\t\t\t\t\t\t            if (columnName == null)\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            var gridId = $trigger.attr(\"gridId\");\n\t\t\t\t\t\t            var grid = $(\"#\"+gridId).jqGrid();\n\t\t\t\t\t\t            var rowId = $trigger.parent().attr(\"id\");\n\t\t\t\t\t\t            var rowData = grid.getRowData(rowId);\n\t\t\t\t\t\t            var vGridOpt = grid.getGridParam();\n\t\t\t\t\t\t            var cms = vGridOpt.colModel;\n\t\t\t\t\t\t            var cm = _.find(cms, {name: $trigger.attr(\"columnName\")} );\n\t\t\t\t\t\t            // var models = eval(vGridOpt.modelVarName);\n\t\t\t\t\t\t            // var vEntity = _.find([].concat(models.ownedEntities),{\"_xmi:id\": vGridOpt.entityId} );\n\t\t\t\t\t\t            \n\t\t\t\t\t\t            // parents\n\t\t\t\t\t\t            var hasParents = false;\n\t\t\t\t\t\t            var parents = [];\n\t\t\t\t\t\t            if ( cm.referenceId != null){\n\t\t\t\t\t\t                \n\t\t\t\t\t\t                var src = _.find(dataSrc, {\"referenceId\": cm.referenceId , \"topRefrenceId\" : cm.topRefrenceId  });\n\t\t\t\t\t\t                // if ( _.includes(_.map(src.childColumnNames, function( _name ){  return _name.toUpperCase(); } ), cm.name.toUpperCase()) ) {\n\t\t\t\t\t\t                var itemName = _.camelCase(src.parentEntity);\n\t\t\t\t\t\t                options.items[itemName] = {\n\t\t\t\t\t\t                    name: \"Parents: \" + itemName ,\n\t\t\t\t\t\t                    callback : function(key, options){\n\t\t\t\t\t\t                        var m = \"clicked: \" + key + \", data: \" + $(this).text();\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Modal Pop\n\t\t\t\t\t\t                        if(true){\n\t\t\t\t\t\t                            var pageBody = parent.$(\"body\");\n\t\t\t\t\t\t                            var modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t                            var parent_str = \"parent\";\n\t\t\t\t\t\t                            var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                            while(modalCommon.length ==0){\n\t\t\t\t\t\t                                parent_str += \".parent\";\n\t\t\t\t\t\t                                modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                                pageBody = eval(parent_str + \".$('body')\");\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t                            // var modalClone = $(modalCommon.html());\n\t\t\t\t\t\t                            var modalClone = modalCommon.clone();\n\t\t\t\t\t\t                            pageBody.append(modalClone);\n\t\t\t\t\t\t                            modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var today = new Date();\n\t\t\t\t\t\t                            var y = today.getFullYear();\n\t\t\t\t\t\t                            var m = today.getMonth() + 1;\n\t\t\t\t\t\t                            var d = today.getDate();\n\t\t\t\t\t\t                            var h = today.getHours();\n\t\t\t\t\t\t                            var mi = today.getMinutes();\n\t\t\t\t\t\t                            var s = today.getSeconds();\n\t\t\t\t\t\t                            var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t                            var modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t                            var frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t                            modalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t                            modalClone.attr(\"name\",modalId);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t                            frameDom.attr(\"id\", frameId);\n\t\t\t\t\t\t                            frameDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t                            container.append(frameDom);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // Form Submit\n\t\t\t\t\t\t                            var oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t                            var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                            var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                            viewPath.pop();\n\t\t\t\t\t\t                            var filter = {};\n\t\t\t\t\t\t                            $.each(src.childColumnNames , function(i,column){\n\t\t\t\t\t\t                                var parentColumn = src.parentColumnNames[i];\n\t\t\t\t\t\t                                if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                    filter[parentColumn.toUpperCase()] = rowData[column.toUpperCase()];\n\t\t\t\t\t\t                                // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                            oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = frameId;\n\t\t\t\t\t\t                            frameDom.show();\n\t\t\t\t\t\t                            // Header\n\t\t\t\t\t\t                            var filterStrs = [];\n\t\t\t\t\t\t                            $.each(filter,function(k,v){\n\t\t\t\t\t\t                                var str = _.camelCase(k);\n\t\t\t\t\t\t                                str += \" : \" + v;\n\t\t\t\t\t\t                                filterStrs.push(str);\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            var headStr = '[' + itemName + ']  ' +  filterStrs.join(\" , \");\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.modal();\n\t\t\t\t\t\t                            // parent.$(\"#\"+modalId).modal();\n\t\t\t\t\t\t                            modalClone.draggable({\n\t\t\t\t\t\t                                handle: \".modal-header\"\n\t\t\t\t\t\t                            }); \n\t\t\t\t\t\t                            oFrm.submit();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        return; \n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Window Pop\n\t\t\t\t\t\t                        // console.log(m);\n\t\t\t\t\t\t                        var windowName = \"Parents: \" + itemName;\n\t\t\t\t\t\t                        var newWin1 = window.open(\"\", windowName , \"width=1000,height=750, screenY=\" + event.screenY + \", top=\" + event.screenY + \", screenX=\" + event.screenX + \",left=\" + (event.screenX + 0) + \", scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                        var oFrm = document.getElementById(\"form\");\t\n\t\t\t\t\t\t                        var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                        var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                        viewPath.pop();\n\t\t\t\t\t\t                        var filter = {};\n\t\t\t\t\t\t                        // // filter[cm.name] = $(this).text() ;\n\t\t\t\t\t\t                        // var referece = _.find([].concat(src.parentEntity.references ), {\"xmi:id\": cm.referenceId });\n\t\t\t\t\t\t                        // var child_columns_detail = _.find(reference.eAnnotations.details, { \"_key\": \"child_columns\" });\n\t\t\t\t\t\t                        // var child_columns = child_columns_detail._value.split(\",\");\n\t\t\t\t\t\t                        $.each(src.childColumnNames , function(i,column){\n\t\t\t\t\t\t                            var parentColumn = src.parentColumnNames[i];\n\t\t\t\t\t\t                            if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                filter[parentColumn.toUpperCase()] = rowData[column.toUpperCase()];\n\t\t\t\t\t\t                            // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        \n\t\t\t\t\t\t                        $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                        oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";\n\t\t\t\t\t\t                        oFrm.method = \"post\";\n\t\t\t\t\t\t                        oFrm.target = windowName; \n\t\t\t\t\t\t                        oFrm.submit();\t\t\n\t\t\t\t\t\t                        newWin1.focus();\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                };\n\t\t\t\t\t\t                hasParents = true;\n\t\t\t\t\t\t                // }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            // children\n\t\t\t\t\t\t            var hasChildrens = false;\n\t\t\t\t\t\t            var childrens = childReferences;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            $.each(childrens , function(i,child){\n\t\t\t\t\t\t                var child_columns = child.child_columns;\n\t\t\t\t\t\t                var parent_columns = child.parent_columns;\n\t\t\t\t\t\t                var child_columns_index = _.indexOf(child.parent_columns, cm.name.toLowerCase());\n\t\t\t\t\t\t                if (child_columns_index == -1)\n\t\t\t\t\t\t                    return false;\n\t\t\t\t\t\t                var itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t                options.items[itemName] = {\n\t\t\t\t\t\t                    name: \"Child: \" + itemName ,\n\t\t\t\t\t\t                    callback : function(key, options){\n\t\t\t\t\t\t                        // var m = \"clicked: \" + key + \", data: \" + $(this).text();\n\t\t\t\t\t\t                        // console.log(m);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Modal Pop\n\t\t\t\t\t\t                        if(true){\n\t\t\t\t\t\t                            var pageBody = parent.$(\"body\");\n\t\t\t\t\t\t                            var modalCommon = parent.$(\"[name=infiniteLogModal]\");                            \n\t\t\t\t\t\t                            var parent_str = \"parent\";\n\t\t\t\t\t\t                            var modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                            while(modalCommon.length ==0){\n\t\t\t\t\t\t                                parent_str += \".parent\";\n\t\t\t\t\t\t                                modalCommon = eval(parent_str + \".$('[name=infiniteLogModal]')\");\n\t\t\t\t\t\t                                pageBody = eval(parent_str + \".$('body')\");\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // var modalClone = $(modalCommon.html());\n\t\t\t\t\t\t                            var modalClone = modalCommon.clone();\n\t\t\t\t\t\t                            pageBody.append(modalClone);\n\t\t\t\t\t\t                            modalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var today = new Date();\n\t\t\t\t\t\t                            var y = today.getFullYear();\n\t\t\t\t\t\t                            var m = today.getMonth() + 1;\n\t\t\t\t\t\t                            var d = today.getDate();\n\t\t\t\t\t\t                            var h = today.getHours();\n\t\t\t\t\t\t                            var mi = today.getMinutes();\n\t\t\t\t\t\t                            var s = today.getSeconds();\n\t\t\t\t\t\t                            var idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t                            var modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t                            var frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t                            modalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t                            modalClone.attr(\"name\",modalId);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t                            frameDom.attr(\"id\", frameId);\n\t\t\t\t\t\t                            frameDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            var container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t                            container.append(frameDom);\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t\n\t\t\t\t\t\t                            // Form Submit\n\t\t\t\t\t\t                            var oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t                            var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                            var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                            viewPath.pop();\n\t\t\t\t\t\t                            var filter = {};\n\t\t\t\t\t\t                            $.each(child_columns , function(i,column){\n\t\t\t\t\t\t                                var parentColumn = parent_columns[i];\n\t\t\t\t\t\t                                if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                    filter[column.toUpperCase()] = rowData[parentColumn.toUpperCase()];\n\t\t\t\t\t\t                                // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                            oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isPop=Y\";;\n\t\t\t\t\t\t                            oFrm.method = \"post\";\n\t\t\t\t\t\t                            oFrm.target = frameId;\n\t\t\t\t\t\t                            frameDom.show();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                            // Header\n\t\t\t\t\t\t                            var filterStrs = [];\n\t\t\t\t\t\t                            $.each(filter,function(k,v){\n\t\t\t\t\t\t                                var str = _.camelCase(k);\n\t\t\t\t\t\t                                str += \" : \" + v;\n\t\t\t\t\t\t                                filterStrs.push(str);\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                            var headStr = '[' + itemName + ']  ' +  filterStrs.join(\" , \");\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\t\t\t\n\t\t\t\t\t\t                            modalClone.modal();\n\t\t\t\t\t\t                            // parent.$(\"#\"+modalId).modal();\n\t\t\t\t\t\t                            modalClone.draggable({\n\t\t\t\t\t\t                                handle: \".modal-header\"\n\t\t\t\t\t\t                            }); \n\t\t\t\t\t\t                            oFrm.submit();\n\t\t\t\t\t\t                            \n\t\t\t\t\t\t                        }\n\t\t\t\t\t\t                        return ;\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        // Window Pop\n\t\t\t\t\t\t                        var windowName = \"Child: \" + itemName;\n\t\t\t\t\t\t                        var newWin1 = window.open(\"\", windowName , \"width=1000,height=750, screenY=\" + event.screenY + \", top=\" + event.screenY + \", screenX=\" + event.screenX + \",left=\" + (event.screenX + 0) + \", scrollbars=yes,resizable=yes\");\n\t\t\t\t\t\t                        var oFrm = document.getElementById(\"form\");\t\n\t\t\t\t\t\t                        var viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t                        var viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t                        viewPath.pop();\n\t\t\t\t\t\t                        var filter = {};\n\t\t\t\t\t\t                        // filter[cm.name] = $(this).text() ;\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        $.each(child_columns , function(i,column){\n\t\t\t\t\t\t                            var parentColumn = parent_columns[i];\n\t\t\t\t\t\t                            if(rowData[column.toUpperCase()] != null)\n\t\t\t\t\t\t                                filter[column.toUpperCase()] = rowData[parentColumn.toUpperCase()];\n\t\t\t\t\t\t                            // $(this).attr(\"cellValue\");\n\t\t\t\t\t\t                        });\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t                        $(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t                        oFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName;\n\t\t\t\t\t\t                        oFrm.method = \"post\";\n\t\t\t\t\t\t                        oFrm.target = windowName; \n\t\t\t\t\t\t                        oFrm.submit();\t\t\n\t\t\t\t\t\t                        newWin1.focus();\n\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                };\n\t\t\t\t\t\t                hasChildrens = true;\n\t\t\t\t\t\t                \n\t\t\t\t\t\t                \n\t\t\t\t\t\t            });\n\t\t\t\t\t\t            \n\t\t\t\t\t\t            if ( !hasParents && !hasChildrens )\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t            if ( _.keys(options.items).length == 1 ){\n\t\t\t\t\t\t                options.items[_.keys(options.items)[0]].callback();\n\t\t\t\t\t\t                return false;\n\t\t\t\t\t\t            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t            return options;\n\t\t\t\t\t\t            // return false; \n\t\t\t\t\t\t        }\n",
					"\t\t\t\t\t}",
					"\t\t\t\t);",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t\tfunction fn_search(){",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\tvar theGrid = $(\"#tabColsGrid\").jqGrid();",
					"\t\t\t\ttheGrid.trigger('reloadGrid',[{page:1}]);",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t}",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailSqlId\" name=\"detailSqlId\" value=\"\"/>",
					"<input type=\"hidden\" id=\"detailSqlUpdateId\" name=\"detailSqlUpdateId\" value=\"\"/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value=\"\"/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value=\"${param.frameName}\"/>",
					"<input type=\"hidden\" id=\"isSubFrame\" name=\"isSubFrame\" value=\"${param.isSubFrame}\"/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"content_container srch_box2\" style=\"margin-top: 3px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"content_container\" style=\"margin-top: 3px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::tab_cols::undefined",
						"parentEntityName": "tab_cols",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"parentEntityName": "tab_cols",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					}
				],
				"dictionaries": [
					{
						"entityName": "tab_cols",
						"sqlId": "tabCols.dictionary.tabCols",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"jstreeInfo": {
					"idList": [],
					"search": function(){
					                var _this = this;
					                if (_this.idList.length == 0)
					                    return;
					                var selJsTree3 = [];
					                $.each(_this.idList, function(i,vJsTreeId){
					                    var vJsTree = $("#" + vJsTreeId ).jstree(true);
					                    // var selJsTree = _.filter(vJsTree._model.data , {state : {selected: true } });
					                    var selJsTree = _.filter(vJsTree._model.data , function( data ){
					                        // if (data.id == "#")
					                        // 	return false;
					                        if (data['original'] == null || data.original["field"] == null)
					                            return false;
					                        if ( data.state.selected == null ) 
					                            return false;
					                        var vSelected = data.state.selected;
					                        if ( vSelected)
					                            return true;
					                        $.each(vJsTree.get_node(data.id).children_d, function(i, nodeId){
					                            var vNode = vJsTree.get_node(nodeId);
					                            if ( vNode.state.selected) {
					                                vSelected = true;
					                                return false;
					                            }
					                        });
					                        // if ( vJsTree.get_bottom_checked(data.id).length > 0 )
					                        // 	return true;
					
					                        return vSelected;
					
					                    });
					                    var selJsTree1 = _.map(selJsTree, function(data, i){
					                        var obj = {};
					
					                        // // Customize if field is different with Original field
					                        // var _datas = data.id.split(";;;");
					                        // var _col = _datas[1];
					                        // if ( _col != null && data.original.field != 'GUBUN' ){
					                        //     var _cols = _col.split("/");
					                        //     var textIndex = _.findIndex(_datas.slice(2), function(o) { return o == data.text; });
					                        //     var keyIndex   = textIndex - 0;
					                        //     var _field = _cols[keyIndex];
					                        //     if ( _field == null) 
					                        //         debugger;
					                        //     var _field1 = decamelize(_field,'_')
					                        //     obj[ _field1.toUpperCase() ] = data.text; 
					                        // }else{
					                        //     // obj[_.camelCase(data.original.field)] = data.text;
					                        //     obj[ data.original.field] = data.text;
					                        // }
					                        obj[ data.original.field] = data.original.value;
					
					                        return obj;
					
					                    });
					                    var selJsTree2 = serializeArrayJSON(selJsTree1);
					                    
					                    $.each(selJsTree2, function(field, data){
					                        var obj = {
					                            field : field ,
					                            // value: [].concat(data)
					                            value: data , 
					                            isArray : _.isArray(data)
					                        };
					                        selJsTree3.push( obj );
					                    });
					                    
					                });
					                $("#searchJson").val(JSON.stringify({fields: selJsTree3}));
					                // var parameter = $("#form").serializeFormJSON();
					                // var removedList = _.remove(selJsTree3,{field:'GUBUN'} );
					            }

				},
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "tabCols"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "tabCols.tabCols",
					"fn_view_detail": function(_type){
					                var pageBody = parent.$("body");
					                if (pageBody.length == 0)
										pageBody = parent.parent.$("body");
					                // var modalCommon = parent.$("[name=infiniteLogModal]");
					                // if (modalCommon.length == 0 ){
					                //     modalCommon = parent.parent.$("[name=infiniteLogModal]");
					                // }
					                var parent_str = "parent";
					                var modalCommon = eval(parent_str + ".$('[name=infiniteLogModal]')");
					                while(modalCommon.length ==0){
					                    parent_str += ".parent";
					                    modalCommon = eval(parent_str + ".$('[name=infiniteLogModal]')");
					                    pageBody = eval(parent_str + ".$('body')");
					                }
					                
					                var modalClone = modalCommon.clone();
					                pageBody.append(modalClone);
					                modalClone.attr("isCloned","true");
					
					                var today = new Date();
					                var y = today.getFullYear();
					                var m = today.getMonth() + 1;
					                var d = today.getDate();
					                var h = today.getHours();
					                var mi = today.getMinutes();
					                var s = today.getSeconds();
					                var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
					                var modalId = "modal_" + idPrefix;
					                var frameId = "frame_" + idPrefix;
					                modalClone.attr("id",modalId);
					                modalClone.attr("name",modalId);
					
					                var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
					                frameDom.attr("id", frameId);
					                frameDom.attr("name", frameId);
					
					                var container = modalClone.find(".infiniteLogContainer");
					                container.append(frameDom);
					
					                // Form Submit
					                var oFrm = document.getElementById("form");
					                var filter = {};
					                var theGrid = $(this).jqGrid();
					                var parentRowKey = theGrid.jqGrid('getGridParam','selrow');
					                var row = theGrid.getRowData(parentRowKey);
					                var entityId = theGrid.jqGrid('getGridParam','entityId');
					                $.each(gridProperties , function(i,prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if(vId != null){
					                        filter[prop._name.toUpperCase()] = row[prop._name.toUpperCase()];
					                    }
					                });
					                $("#filterPop").val(JSON.stringify(filter));
					
					                var viewName = $("#viewName").val();
					                var viewPath = viewName.split("/");
					                var itemName = viewPath.pop();
					                oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "." + _type + "&backgroundColor=FFF&isPop=Y";;
					                // oFrm.action =  "${pageContext.request.contextPath}/generic.do?viewName=common/commonDetail";
					                $("#detailSqlId").val("tabCols.tabCols.one");
					                $("#detailSqlUpdateId").val("tabCols.tabCols.edit");
					                $("#detailType").val(_type);
					                // $("#frameName").val( 'frame_' +  _.camelCase( entityId ));
					                // $("#frameName").val( window.frameElement.name );
					                var parentFrameName = "${param.frameName}";
					                if ( _.startsWith( parentFrameName,"frame") ){						
					                    $("#frameName").val( parentFrameName + "." + window.frameElement.name );
					                }else {
					                    $("#frameName").val( window.frameElement.name );
					                }
					                oFrm.method = "post";
					                oFrm.target = frameId;
					                frameDom.show();
					                // Header
					                var filterStrs = [];
					                $.each(filter,function(k,v){
					                    var str = _.camelCase(k);
					                    str += " : " + v;
					                    filterStrs.push(str);
					                });
					                
					                var headStr = '[' + _.camelCase( entityId ) + ' ' +  _.upperCase(_type) + ' ]  '
					                if ( _type != "add" ) 
					                    headStr += filterStrs.join(" , ");			
					
					                modalClone.find(".modal-header h6 span").text(headStr);
					                modalClone.modal();
					                // parent.$("#"+modalId).modal();
					                modalClone.draggable({
					                    handle: ".modal-header"
					                }); 
					                oFrm.submit();
					            },

					"fn_grid_option": function(){
					                var is_pop_select = "${param.is_pop_select}";
					                var is_pop = "${param.isPop}";
					                var is_sub_frame = "${param.isSubFrame}";
					
					                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});
					                
					                if ( is_sub_frame ==  "Y"){
					                    grid_shema.gridOpt.height = 210;
					                    grid_shema.gridOpt.rowNum = 5;
					                }else if ( is_pop_select ==  "Y"){
					                    grid_shema.gridOpt.height = 420;
					                    grid_shema.gridOpt.rowNum = 15;
					                }else if ( is_pop ==  "Y"){
					                    grid_shema.gridOpt.height = 420;
					                    grid_shema.gridOpt.rowNum = 15;
					                }else {
					                    grid_shema.gridOpt.height = 650;
					                    grid_shema.gridOpt.rowNum = 20;
					                }
					            },

					"fn_add_button_select_in_grid": function(){
					                var is_pop_select = "${param.is_pop_select}";
					                if (is_pop_select != "Y")
										return;
									
									var item = {
										"label": " ",
										"name": "SELECT_BUTTON",
										"id": "SELECT_BUTTON",
										"align": "center",
										"width": 45,
										search : false ,
										"formatter": function(cellValue, options, rowObject){
											var btnHtml = '<button type="button" class="btn btn-warning btn-xs" style="line-height:1" onclick="commonFunc.fn_select_for_parentframe(\''+ options.rowId +'\');">Select</button>';
											return btnHtml;
										}
									};
									var grid_schema = findAllByElName(v_schema_content.elements , {type:'grid'});
									if (grid_schema != null){
										grid_schema.items.push(item);
									}
					            },

					"fn_select_for_parentframe": function(_rowid){
					                var grid_shema = findAllByElName(v_schema_content.elements , {type: 'grid'});
					                var theGrid = $("#" + grid_shema.id).jqGrid();
					    
					                var row = theGrid.getRowData(_rowid);
					                var v_react_target = parentFrame.commonFunc.pop_select_react_object ;
					                var col = v_react_target.dataSrc.parentColumnName.toUpperCase() ;
					                
					                v_react_target.setState({value :row[col] });
					                
					                // search_str : expression	
					                if($("#pop_select").val() != "" ){
					                    var v_pop_select = JSON.parse($("#pop_select").val());
					                    if ( _.keys(v_pop_select).length > 0 ){
					                        if ( _.keys(v_pop_select.search_str_option).length > 0 ){
					                            if (v_pop_select.search_str_option.expression != null){
					                                if (v_pop_select.search_str_option.expression != ""){
					                                    v_react_target.setState({search_str : eval(v_pop_select.search_str_option.expression) });
					                                    
					                                    // search_str : addtional field update
					                                    if (v_pop_select.search_str_option.additional_update_field != null){
					                                        $.each(v_pop_select.search_str_option.additional_update_field, function(k,v){
					                                            var v_addtional_target = _.find(v_react_target.reactObjects,{state: {name : k}});
					                                            if(v_addtional_target != null)
					                                                v_addtional_target.setState({value: row[v]});
					                                        });
					                                    }
					                                    
					    
					                                }
					                            }
					                        }
					                    }
					                }
					                parentFrame.commonFunc.fn_pop_select_callback();
					                // parentFrame.commonFunc.fn_view_sub();
					    
					                // window close
					                setTimeout( function(){
					                    // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                    parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                },0);
					    
					            }

				},
				"popParemeters": {
					"fn_set": function(){
					                if($("#filterPop").val() != "" ){
					                    v_filterPop = JSON.parse($("#filterPop").val());
					                    var v_filters = [];
					                    $.each(v_filterPop ,function(field, data){
					                        var obj = {
					                            field : field ,
					                            // value: [].concat(data)
					                            value: data , 
					                            isArray : _.isArray(data)
					                        };
					                        v_filters.push( obj );
					                    });
					                    $("#searchJson").val(JSON.stringify({fields: v_filters}));
					                    if(false){
					                        //  tree deselect all
					                        var vJstreeList = [];
					                        $.each(v_filterPop ,function(k, v){
					                            var targetEl = findAllByElName( v_schema_search , function( _el){
					                                if ( _el.type == "jsTreeSearch"){
					                                    let _target = _.find(_el.relation.columns, function(col){
					                                        return col.childColumn.toUpperCase() ==  k.toUpperCase();
					                                    });
					                                    if( _target != null)
					                                        return true;
					                                }
					                            });
					    
					                            if ( targetEl != null){
					                                if (targetEl.type == "jsTreeSearch"){
					                                    if( _.find(vJstreeList,{id : targetEl.id}) == null){
					                                        vJstreeList.push(targetEl);
					                                    }
					                                    targetEl.popValues.push(v);
					                                    
					                                }
					                            }
					                            
					                        });
					                        $.each(vJstreeList, function (i,tree) {  
					                            var vTree = $("#" + tree.id ).jstree(true);
					                            vTree.deselect_all(true);
					                            vTree.select_node(tree.popValues.join(';;;'));
					                        });
					    
					                        $.each(v_filterPop ,function(k, v){
					                            var targetEl = findAllByElName( v_schema_search , function( _el){
					                                if( _el.type == "multiCombo"){
					                                    if( _el.jpa_column.child_column.toUpperCase() == k.toUpperCase())
					                                        return true;
					                                }else if ( _el.type == "jsTreeSearch"){
					                                    // let _target = _.find(_el.relation.columns, function(col){
					                                    //     return col.childColumn.toUpperCase() ==  k.toUpperCase();
					                                    // });
					                                    // if( _target != null)
					                                    //     return true;
					                                }else if ( _el.type == "input"){
					                                    if ( _el.columnName.toUpperCase() == k.toUpperCase() )
					                                        return true;
					                                }
					                            });
					    
					                            if ( targetEl != null){
					                                if (targetEl.type == "multiCombo"){
					                                    // origin select
					                                    $("#" + targetEl.id +" option").prop('selected',false);
					                                    $("#" + targetEl.id +" option[value='"  + v + "']").prop('selected',true);
					                                    // // div view
					                                    // $("input[name=multiselect_" + targetEl.name +"]").prop('checked',false);
					                                    // $("input[name=multiselect_" + targetEl.name +"] option[value="  + v + "]").prop('checked',true);
					                                    var mainControl = $("#" + targetEl.id );
					                                    mainControl.multiselect('refresh');
					                                    mainControl.multiselect('widget').css("width","400px");
					                                    mainControl.multiselect('widget').find(".ui-multiselect-filter input").css("width","150px");
					    
					                                }else if (targetEl.type == "jsTreeSearch"){
					                                    // var vTree = $("#" + targetEl.id ).jstree(true);
					                                    // // vTree.deselect_all(true);
					                                    // var seldata = _.find(vTree._model.data , function( data ){
					                                    //     if (data['original'] == null || data.original["field"] == null)
					                                    //         return false;
					                                    //     var vOriginal = data['original'];
					                                    //     if ( vOriginal.field == k && vOriginal.value == v){
					                                    //         return true;
					                                    //     }
					                                    //     return false;
					    
					                                    // });
					                                    // if(seldata != null  && seldata.children != null && seldata.children.length == 0 )
					                                    //     vTree.select_node(seldata.id);
					    
					                                }else if (targetEl.type == "input"){
					                                    $("#" + targetEl.id).val(v);
					                                }
					                            }
					                            
					                            
					                            
					                        });
					                    }
					                    
					                }
					                
					            },

					"fn_pop_select_set": function(){
												
					                if($("#pop_select").val() == "" )
					                    return;
					                var v_pop_select = JSON.parse($("#pop_select").val());
					                if ( _.keys(v_pop_select).length == 0 )
					                    return;
					                if ( _.keys(v_pop_select.search_str_option).length == 0 )
					                    return;
					
					                // find grid
					                var v_grid_schema = findAllByElName(v_schema_content.elements , {type:"grid"});
					                if ( v_grid_schema  == null)
					                    return;
					                
					                // rules Array  2020.01.03
					                v_rules =[];
					                if (typeof v_pop_select.search_str_option.search_field == "string"){
					                    // find item
					                    var v_item = _.find(v_grid_schema.items , {name : v_pop_select.search_str_option.search_field});
					                    if (v_item == null)
					                        return;
					                    /**********************************************/
					                    /****  For Item setting filter initialtext ****/
					                    /**********************************************/
					                    // set searchoptions.defaultValue
					                    var v_item_to_merge = {
					                        searchoptions : {
					                            searchOperMenu: true,
					                            defaultValue: '' + v_pop_select.search_str_option.search_value
					                            //  defaultValue: '^' + v_pop_select.search_str_option.search_value
					                        }								
					                    };
					                    _.merge(v_item, v_item_to_merge);
					                    /**********************************************/
					                    /****  For Grid Setting postData.filers *******/
					                    /**********************************************/
					                    v_rules.push(
					                        {
					                            field : v_pop_select.search_str_option.search_field,
					                            op: "cn",
					                            data : '^' + v_pop_select.search_str_option.search_value
					                        }
					                    );
					                }else if ( _.isArray(v_pop_select.search_str_option.search_field)){
					                    
					                    $.each(v_pop_select.search_str_option.search_field , function(i,search_field){
					                        
					                        if ( search_field.value != null && search_field.value.length > 0){
					                            /**********************************************/
					                            /****  For Item setting filter initialtext ****/
					                            /**********************************************/
					                            // set searchoptions.defaultValue
					                            var v_item = _.find(v_grid_schema.items , {name : search_field.target });
					                            if ( v_item == null )
					                                return true;
					                            var v_item_to_merge = {
					                                searchoptions : {
					                                    searchOperMenu: true,
					                                    defaultValue: '^' + search_field.value
					                                    //  defaultValue: '^' + v_pop_select.search_str_option.search_value
					                                }								
					                            };
					                            _.merge(v_item, v_item_to_merge);
					
					                            /**********************************************/
					                            /****  For Grid Setting postData.filers *******/
					                            /**********************************************/
					                            
					                            v_rules.push(
					                                {
					                                    field : search_field.target,
					                                    op: "cn",
					                                    // data : '^' + v_pop_select.search_str_option.search_value
					                                    data : '^' + search_field.value
					                                }
					                            );
					                        }
					                        
					                    });
					                }else{
					                    return;
					                }
					                    
					                var v_filters = {
					                    groupOp : "AND",
					                    rules : v_rules
					                };
					                
					
					
					                var v_grid_to_merge = {
					                    postData : {
					                        filters : JSON.stringify(v_filters)
					                    }
					                };
					                _.merge(v_grid_schema.gridOpt, v_grid_to_merge);
					
					
					            }

				}
			},
			{
				"fileType": "jsp",
				"editType": "add",
				"fileName": "tabCols.add",
				"entityId": "tab_cols",
				"dictionaries": [
					{
						"entityName": "tab_cols",
						"sqlId": "tabCols.dictionary.tabCols",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::tab_cols::undefined",
						"parentEntityName": "tab_cols",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"parentEntityName": "tab_cols",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					}
				],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv51-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98DRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv5l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv6l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98TRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv6V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv6F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv5V-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv7V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98jRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv7F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv8F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98zRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv71-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv7l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv61-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"tab_cols\",",
					"\t\t\t\t\"sqlId\": \"tabCols.dictionary.tabCols\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::undefined\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv51-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98DRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv5l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98TRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv5V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98jRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv8F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98zRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv71-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv61-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"tabCols.tabCols\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];\n\t\t\t                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=tabCols.tabCols.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                var properties = _.filter(gridProperties, function(prop){ \n\t\t\t                    return true;\n\t\t\t                });\n\t\t\t                $.each([].concat(properties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(properties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != \"\"){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t\n\t\t\t                            // if add_hidden , then edit_tage : hidden\n\t\t\t                            if (prop._documentation != null && prop._documentation.add_hidden ){\n\t\t\t                                rtnObj.edit_tag = \"hidden\";\n\t\t\t                            }\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                    \n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(properties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if add_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.add_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != \"\" ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"tabCols.tabCols.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t\n\t\t\t                            // fileupload\n\t\t\t                            var parameter = \"\";\n\t\t\t                            // if you want to upload options ....\n\t\t\t                            // parameter = \"uploadBoard=schema\";\n\t\t\t                            // parameter += \"&useRealFileName=Y\";\n\t\t\t                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){\n\t\t\t                                $('#form').ajaxForm({\n\t\t\t                                    url: \"./fileTestJson.do?\" + parameter \n\t\t\t                                    , type:\"POST\"\n\t\t\t                                    , dataType:\"json\"\n\t\t\t                                    , async: false\n\t\t\t                                    , success:function(json) {\n\t\t\t                                        fileInfo = json;\n\t\t\t                                    }\n\t\t\t                                    , error:function(e){\n\t\t\t                                        alert(e.responseText);\n\t\t\t                                    }\n\t\t\t                                });\n\t\t\t                                $('#form').submit();\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});\n\t\t\t                            if (edit_items.length > 0 ){\n\t\t\t                                $.each(edit_items, function(i,edit_item){\n\t\t\t                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });\n\t\t\t                                    if (item_fileinfo != null){\n\t\t\t                                        addRow[edit_item.col] = item_fileinfo.orgFileName;\n\t\t\t                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;\n\t\t\t                                        \n\t\t\t                                    }\t\t\n\t\t\t                                });\n\t\t\t                                \t\t\t\t\t\t\t\t\t\n\t\t\t                            }\n\t\t\t\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t                if (entityDoc.add_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.add_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };  \n\t\t\t                \n\t\t\t                \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t                    \n\t\t\t                    var parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t                                \n\t\t\t                                if (typeof option.search_field == \"string\"){\n\t\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t$.each( option.search_field , function(i,search_field){\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar target_react = _.find( \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_this.reactObjects ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: search_field.from\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tsearch_field.value = target_react.state.value;\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t                                }\n\t\t\t                                \n\t\t\t                                pop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do some customize ...\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t                \n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "tabCols"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "tabCols.tabCols",
					"fn_make_schema": function(){
					                var detailList = [];
					                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=tabCols.tabCols.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                var properties = _.filter(gridProperties, function(prop){ 
					                    return true;
					                });
					                $.each([].concat(properties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(properties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != ""){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					
					                            // if add_hidden , then edit_tage : hidden
					                            if (prop._documentation != null && prop._documentation.add_hidden ){
					                                rtnObj.edit_tag = "hidden";
					                            }
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					                        }
					                        
					
					                    });
					                    
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(properties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if add_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.add_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null && parentFrame.v_filterPop[rtnObj.col] != "" ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "tabCols.tabCols.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					
					                            // fileupload
					                            var parameter = "";
					                            // if you want to upload options ....
					                            // parameter = "uploadBoard=schema";
					                            // parameter += "&useRealFileName=Y";
					                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){
					                                $('#form').ajaxForm({
					                                    url: "./fileTestJson.do?" + parameter 
					                                    , type:"POST"
					                                    , dataType:"json"
					                                    , async: false
					                                    , success:function(json) {
					                                        fileInfo = json;
					                                    }
					                                    , error:function(e){
					                                        alert(e.responseText);
					                                    }
					                                });
					                                $('#form').submit();
					                            }
					                            
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});
					                            if (edit_items.length > 0 ){
					                                $.each(edit_items, function(i,edit_item){
					                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });
					                                    if (item_fileinfo != null){
					                                        addRow[edit_item.col] = item_fileinfo.orgFileName;
					                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;
					                                        
					                                    }		
					                                });
					                                									
					                            }
					
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					                if (entityDoc.add_button_option != null){
					                    schema_options.button_option = entityDoc.add_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };  
					                
					                
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
										oFrm.target = frameId;
					                    
					                    var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
					                                
					                                if (typeof option.search_field == "string"){
														option.search_value = this.state.search_str;								
														
													}else{
														$.each( option.search_field , function(i,search_field){
															var target_react = _.find( 
																_this.reactObjects ,  
																{ 
																	props : {
																		options : {
																			name: search_field.from
																		} 
																	}															
																}
															);																		
															search_field.value = target_react.state.value;										
														});
					                                }
					                                
					                                pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do some customize ...
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					                
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "edit",
				"fileName": "tabCols.edit",
				"entityId": "tab_cols",
				"dictionaries": [
					{
						"entityName": "tab_cols",
						"sqlId": "tabCols.dictionary.tabCols",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::tab_cols::undefined",
						"parentEntityName": "tab_cols",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"parentEntityName": "tab_cols",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					}
				],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv51-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98DRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv5l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv6l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98TRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv6V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv6F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv5V-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv7V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98jRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv7F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv8F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98zRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv71-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv7l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv61-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"tab_cols\",",
					"\t\t\t\t\"sqlId\": \"tabCols.dictionary.tabCols\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::undefined\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv51-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98DRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv5l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98TRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv5V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98jRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv8F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98zRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv71-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv61-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"tabCols.tabCols\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=tabCols.tabCols.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.edit_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"tabCols.tabCols.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.edit_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.edit_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };              \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do some customize ...\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "tabCols"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "tabCols.tabCols",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=tabCols.tabCols.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.edit_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "tabCols.tabCols.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.edit_button_option != null){
					                    schema_options.button_option = entityDoc.edit_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };              
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do some customize ...
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "copy",
				"fileName": "tabCols.copy",
				"entityId": "tab_cols",
				"dictionaries": [
					{
						"entityName": "tab_cols",
						"sqlId": "tabCols.dictionary.tabCols",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::tab_cols::undefined",
						"parentEntityName": "tab_cols",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"parentEntityName": "tab_cols",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					}
				],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv51-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98DRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv5l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv6l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98TRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv6V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv6F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv5V-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv7V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98jRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv7F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv8F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98zRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv71-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv7l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv61-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\t// to find origin list page",
					"\t\tvar parentFrame = \"${param.frameName}\";",
					"\t\tif (parentFrame != \"\"){",
					"\t\t\tparentFrame =  eval(\"parent.${param.frameName}\");",
					"\t\t}",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"tab_cols\",",
					"\t\t\t\t\"sqlId\": \"tabCols.dictionary.tabCols\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::undefined\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv51-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98DRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv5l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98TRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv5V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98jRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv8F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98zRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv71-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv61-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"tabCols.tabCols\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=tabCols.tabCols.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.copy_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"tabCols.tabCols.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            // fileupload\n\t\t\t                            var parameter = \"\";\n\t\t\t                            // if you want to upload options ....\n\t\t\t                            // parameter = \"uploadBoard=schema\";\n\t\t\t\t\t\t\t\t\t\t// parameter += \"&useRealFileName=Y\";\n\t\t\t                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){\n\t\t\t                                $('#form').ajaxForm({\n\t\t\t                                    url: \"./fileTestJson.do?\" + parameter \n\t\t\t                                    , type:\"POST\"\n\t\t\t                                    , dataType:\"json\"\n\t\t\t                                    , async: false\n\t\t\t                                    , success:function(json) {\n\t\t\t                                        fileInfo = json;\n\t\t\t                                    }\n\t\t\t                                    , error:function(e){\n\t\t\t                                        \n\t\t\t                                        alert(e.responseText);\n\t\t\t                                    }\n\t\t\t                                });\n\t\t\t                                $('#form').submit();\n\t\t\t                            }\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});\n\t\t\t                            if (edit_items.length > 0 ){\n\t\t\t                                $.each(edit_items, function(i,edit_item){\n\t\t\t                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });\n\t\t\t                                    if (item_fileinfo != null){\n\t\t\t                                        addRow[edit_item.col] = item_fileinfo.orgFileName;\n\t\t\t                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;\n\t\t\t                                        \n\t\t\t                                    }\t\t\n\t\t\t                                });\n\t\t\t                                \t\t\t\t\t\t\t\t\t\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.copy_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.copy_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };            \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){\n\t\t\t                    entityDoc.customFunc.fn_pop_select_callback.call(this);\n\t\t\t                }\n\t\t\t\n\t\t\t                if (entityDoc.show_sub_pages){\n\t\t\t                    commonFunc.fn_view_sub();\n\t\t\t                }\n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"dbType": "mysql",
					"entityId": "tabCols"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "tabCols.tabCols",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=tabCols.tabCols.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.copy_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "tabCols.tabCols.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            // fileupload
					                            var parameter = "";
					                            // if you want to upload options ....
					                            // parameter = "uploadBoard=schema";
												// parameter += "&useRealFileName=Y";
					                            if(_.find(reactObjects,{state : {edit_tag:'file'}}) != null){
					                                $('#form').ajaxForm({
					                                    url: "./fileTestJson.do?" + parameter 
					                                    , type:"POST"
					                                    , dataType:"json"
					                                    , async: false
					                                    , success:function(json) {
					                                        fileInfo = json;
					                                    }
					                                    , error:function(e){
					                                        
					                                        alert(e.responseText);
					                                    }
					                                });
					                                $('#form').submit();
					                            }
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            var edit_items = filterAllByElName(v_schema.elements , {edit_tag : 'file'});
					                            if (edit_items.length > 0 ){
					                                $.each(edit_items, function(i,edit_item){
					                                    var item_fileinfo = _.find( fileInfo.searchVO.fileInfoList , {fieldName : edit_item.col });
					                                    if (item_fileinfo != null){
					                                        addRow[edit_item.col] = item_fileinfo.orgFileName;
					                                        addRow[edit_item.file_info.path_column] = item_fileinfo.filePath;
					                                        
					                                    }		
					                                });
					                                									
					                            }
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.copy_button_option != null){
					                    schema_options.button_option = entityDoc.copy_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };            
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                if ( entityDoc.customFunc != null && entityDoc.customFunc.fn_pop_select_callback != null){
					                    entityDoc.customFunc.fn_pop_select_callback.call(this);
					                }
					
					                if (entityDoc.show_sub_pages){
					                    commonFunc.fn_view_sub();
					                }
					
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"editType": "view",
				"fileName": "tabCols.view",
				"entityId": "tab_cols",
				"dictionaries": [
					{
						"entityName": "tab_cols",
						"sqlId": "tabCols.dictionary.tabCols",
						"dictionaryDefTable": "cmm_cd",
						"dictionaryUseTable": "cmm_use",
						"categoryColumn": "code_category",
						"codeColumn": "code_id",
						"nameColumn": "code_nm",
						"data": function () {
						                var _this = this;
						                $.ajax({
						                    type: "POST",
						                    url: "./genericlListJson.do?" +
						                        "&sqlid=" + _this.sqlId,
						                    data: {},
						                    async: false,
						                    success: function (response) {
						                        var dataList = response.dataList;
						                        $.each(dataList, function (i, data) {
						                            if( data != null)
						                                _this.value.push(data);
						                        });
						                    }
						                });
						            },

						"value": []
					}
				],
				"dataSources": [],
				"childReferences": [
					{
						"referenceId": "reference::tab_cols::undefined",
						"parentEntityName": "tab_cols",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					},
					{
						"referenceId": "reference::tab_cols::cmm_use",
						"parentEntityName": "tab_cols",
						"childEntityName": "cmm_use",
						"childEntityId": "cmm_use",
						"parent_columns": [
							"table_name",
							"column_name"
						],
						"child_columns": [
							"table_name",
							"column_name"
						]
					}
				],
				"gridProperties": [
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv51-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98DRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv5l-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv6l-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98TRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv6V-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv6F-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv5V-9EeqK2M3E1LfZ7Q",
						"_name": "table_name",
						"__prefix": null
					},
					{
						"eAnnotations": {
							"details": {
								"_xmi:id": "_Q4Mv7V-9EeqK2M3E1LfZ7Q",
								"_key": "uuid",
								"_value": "_hVV98jRPEDih466MYOWd-w",
								"__prefix": null
							},
							"_xmi:id": "_Q4Mv7F-9EeqK2M3E1LfZ7Q",
							"_source": "genmymodel",
							"__prefix": null
						},
						"annotations": {
							"eAnnotations": {
								"details": {
									"_xmi:id": "_Q4Mv8F-9EeqK2M3E1LfZ7Q",
									"_key": "uuid",
									"_value": "_hVV98zRPEDih466MYOWd-w",
									"__prefix": null
								},
								"_xmi:id": "_Q4Mv71-9EeqK2M3E1LfZ7Q",
								"_source": "genmymodel",
								"__prefix": null
							},
							"_xsi:type": "gmmjpa:Id",
							"_xmi:id": "_Q4Mv7l-9EeqK2M3E1LfZ7Q",
							"__prefix": null
						},
						"type": {
							"_href": "http://www.eclipse.org/emf/2002/Ecore#//EString",
							"__prefix": null
						},
						"_xmi:id": "_Q4Mv61-9EeqK2M3E1LfZ7Q",
						"_name": "column_name",
						"__prefix": null
					}
				],
				"sources": [
					"<%@ page contentType=\"text/html;charset=utf-8\" %>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<%@ page session=\"false\" %>",
					"<!DOCTYPE html>",
					"<html>",
					"<head>",
					"<jsp:include page=\"/WEB-INF/views/include/include.toolbox.pmstable.jsp\"></jsp:include>",
					"\t<script>",
					"\t\t//localStorage.removeItem(\"jstree\");",
					"\t\tvar parentFrame = parent.${param.frameName};",
					"\t\tvar beforEditRow = {};",
					"\t\tvar EfContextPath = \"\";",
					"\t\tvar v_filterPop = {};",
					"\t\t// schema",
					"\t\tvar v_schema = {};",
					"\t\tvar dictionaries = [",
					"\t\t\t{",
					"\t\t\t\t\"entityName\": \"tab_cols\",",
					"\t\t\t\t\"sqlId\": \"tabCols.dictionary.tabCols\",",
					"\t\t\t\t\"dictionaryDefTable\": \"cmm_cd\",",
					"\t\t\t\t\"dictionaryUseTable\": \"cmm_use\",",
					"\t\t\t\t\"categoryColumn\": \"code_category\",",
					"\t\t\t\t\"codeColumn\": \"code_id\",",
					"\t\t\t\t\"nameColumn\": \"code_nm\",",
					"\t\t\t\t\"data\": function () {\n\t\t\t\t                var _this = this;\n\t\t\t\t                $.ajax({\n\t\t\t\t                    type: \"POST\",\n\t\t\t\t                    url: \"./genericlListJson.do?\" +\n\t\t\t\t                        \"&sqlid=\" + _this.sqlId,\n\t\t\t\t                    data: {},\n\t\t\t\t                    async: false,\n\t\t\t\t                    success: function (response) {\n\t\t\t\t                        var dataList = response.dataList;\n\t\t\t\t                        $.each(dataList, function (i, data) {\n\t\t\t\t                            if( data != null)\n\t\t\t\t                                _this.value.push(data);\n\t\t\t\t                        });\n\t\t\t\t                    }\n\t\t\t\t                });\n\t\t\t\t            },\n",
					"\t\t\t\t\"value\": []",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar dataSrc = [];",
					"\t\tvar childReferences = [",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::undefined\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"referenceId\": \"reference::tab_cols::cmm_use\",",
					"\t\t\t\t\"parentEntityName\": \"tab_cols\",",
					"\t\t\t\t\"childEntityName\": \"cmm_use\",",
					"\t\t\t\t\"childEntityId\": \"cmm_use\",",
					"\t\t\t\t\"parent_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t],",
					"\t\t\t\t\"child_columns\": [",
					"\t\t\t\t\t\"table_name\",",
					"\t\t\t\t\t\"column_name\"",
					"\t\t\t\t]",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar gridProperties = [",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv51-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98DRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv5l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98TRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv6F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv5V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"table_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t},",
					"\t\t\t{",
					"\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7V-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\"_value\": \"_hVV98jRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"annotations\": {",
					"\t\t\t\t\t\"eAnnotations\": {",
					"\t\t\t\t\t\t\"details\": {",
					"\t\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv8F-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\t\"_key\": \"uuid\",",
					"\t\t\t\t\t\t\t\"_value\": \"_hVV98zRPEDih466MYOWd-w\",",
					"\t\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\"_xmi:id\": \"_Q4Mv71-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\t\"_source\": \"genmymodel\",",
					"\t\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t\t},",
					"\t\t\t\t\t\"_xsi:type\": \"gmmjpa:Id\",",
					"\t\t\t\t\t\"_xmi:id\": \"_Q4Mv7l-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"type\": {",
					"\t\t\t\t\t\"_href\": \"http://www.eclipse.org/emf/2002/Ecore#//EString\",",
					"\t\t\t\t\t\"__prefix\": null",
					"\t\t\t\t},",
					"\t\t\t\t\"_xmi:id\": \"_Q4Mv61-9EeqK2M3E1LfZ7Q\",",
					"\t\t\t\t\"_name\": \"column_name\",",
					"\t\t\t\t\"__prefix\": null",
					"\t\t\t}",
					"\t\t];",
					"\t\tvar popParemeters = {",
					"\t\t\t\"fn_set\": function(){\n\t\t\t\t\t\t            if($(\"#filterPop\").val() != \"\" ){\n\t\t\t\t\t\t                v_filterPop = JSON.parse($(\"#filterPop\").val());\n\t\t\t\t\t\t                var v_filters = [];\n\t\t\t\t\t\t                $.each(v_filterPop ,function(field, data){\n\t\t\t\t\t\t                    var obj = {\n\t\t\t\t\t\t                        field : field ,\n\t\t\t\t\t\t                        // value: [].concat(data)\n\t\t\t\t\t\t                        value: data , \n\t\t\t\t\t\t                        isArray : _.isArray(data)\n\t\t\t\t\t\t                    };\n\t\t\t\t\t\t                    v_filters.push( obj );\n\t\t\t\t\t\t                });\n\t\t\t\t\t\t                $(\"#searchJson\").val(JSON.stringify({fields: v_filters}));                          \n\t\t\t\t\t\t            }            \n\t\t\t\t\t\t        }\n",
					"\t\t};",
					"\t\tvar entityDoc = {};",
					"\t\tvar commonFunc = {",
					"\t\t\t\"sqlId\": \"tabCols.tabCols\",",
					"\t\t\t\"fn_make_schema\": function(){\n\t\t\t                var detailList = [];                \n\t\t\t                var v_type = \"inline\";\n\t\t\t                if( _.includes(['edit','view', 'copy'],$(\"#detailType\").val()) ){\n\t\t\t                    $.ajax({\n\t\t\t                        type: \"POST\",\n\t\t\t                        url: \"./genericlListJson.do?sqlid=tabCols.tabCols.one\",\n\t\t\t                        // data: searchRow ,\n\t\t\t                        data: $(\"#form\").serialize(), \n\t\t\t                        async: false,\n\t\t\t                        success:  function(response){\n\t\t\t                            detailList  = response.dataList;     \n\t\t\t                            // commonFunc.data = detailList[0] ;\n\t\t\t                            commonFunc.data = _.merge(detailList[0], commonFunc.data);\n\t\t\t                        }\n\t\t\t                    });\n\t\t\t                }\n\t\t\t                var data = commonFunc.data;\n\t\t\t                if ( _.includes(['add'],$(\"#detailType\").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {\n\t\t\t                    commonFunc.data = parentFrame.v_filterPop;\n\t\t\t                }\n\t\t\t\n\t\t\t                if( _.includes(['edit','add','copy'],$(\"#detailType\").val()) ){\n\t\t\t                    v_type = \"inline_edit\";\n\t\t\t                }\n\t\t\t                var vKeys = [];\n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\n\t\t\t                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                    if (vId != null){\n\t\t\t                        vKeys.push(prop._name.toUpperCase());\n\t\t\t                    }\n\t\t\t                });\n\t\t\t                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"}).id;\n\t\t\t                var theGrid = parentFrame.$(\"#\"+gridid);\n\t\t\t                var cms = theGrid.jqGrid(\"getGridParam\", \"colModel\");\n\t\t\t\n\t\t\t                var v_items = [];\n\t\t\t                // custom order by\n\t\t\t                if (entityDoc.detail != null && entityDoc.detail.order_by != null){\n\t\t\t                    $.each(entityDoc.detail.order_by, function(i, _order){\t\t\t\t\t\t\t\t\t\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});\n\t\t\t                        var rtnObj = {};\n\t\t\t                        if (prop != null){\t\t\t\t\t\t\t\t\t\t\n\t\t\t                            rtnObj = {\n\t\t\t                                label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                                col : prop._name.toUpperCase() ,\n\t\t\t                                orderby : i\n\t\t\t                            };\n\t\t\t                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                            if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                            // list hiden columns\n\t\t\t                            if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                                rtnObj.isDateTime = true;\n\t\t\t                            }\n\t\t\t                            var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                            if(vEdit != null){\n\t\t\t                                rtnObj.edit_tag = vEdit._value;\n\t\t\t                            }\n\t\t\t                            var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                                // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                                var options = [];\n\t\t\t                                $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                    var opt = {value: k, label: v};\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                rtnObj.selectOptions = options;\n\t\t\t                                rtnObj.edit_tag = cm.edittype;\n\t\t\t                                if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                    rtnObj.edit_tag = 'input';\n\t\t\t                                    rtnObj.editable = false;\n\t\t\t                                }\n\t\t\t                            }\n\t\t\t                            if( cm.editable != null)\n\t\t\t\t\t\t                    rtnObj.editable = cm.editable;\n\t\t\t                            v_items.push(rtnObj);\n\t\t\t                        }else {\n\t\t\t                            rtnObj = _order;\n\t\t\t                            rtnObj.orderby = i;\n\t\t\t                            var prop1 = _.find(gridProperties,{\"_name\": _order.column_name});\n\t\t\t                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){\n\t\t\t\n\t\t\t                            }else{\n\t\t\t                                rtnObj.col = _order.column_name;\n\t\t\t                                v_items.push(rtnObj);\n\t\t\t                            }\n\t\t\t\n\t\t\t                        }\n\t\t\t                        \n\t\t\t\n\t\t\t                    });\n\t\t\t                }\n\t\t\t\n\t\t\t                // Process than not exists in orderby \n\t\t\t                $.each([].concat(gridProperties), function(i, prop){\t\t\t\t\t\t\t\t\t\n\t\t\t                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});\n\t\t\t                    if ( v_item == null){\n\t\t\t                        var _cms = cms;\t\t\t\t\t\t\t\t\t\n\t\t\t                        var rtnObj = {};\n\t\t\t                                                            \n\t\t\t                        rtnObj = {\n\t\t\t                            label : _.capitalize(_.upperCase(prop._name)),\n\t\t\t                            col : prop._name.toUpperCase() ,\n\t\t\t                            orderby : 100\n\t\t\t                        };\n\t\t\t                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{\"_xsi:type\" : \"gmmjpa:Id\"});\n\t\t\t                        if (vId != null &&  _.includes(['edit'], \"${param.detailType}\")){\n\t\t\t                            rtnObj.editable = false;\n\t\t\t                        }\n\t\t\t                        // list hiden columns\n\t\t\t                        if ( prop.type._href == \"http://www.eclipse.org/emf/2002/Ecore#//EDate\" ){\n\t\t\t                            rtnObj.isDateTime = true;\n\t\t\t                        }\n\t\t\t                        var vEdit = _.find(prop.eAnnotations.details,{\"_key\":\"edit_tag\"});\n\t\t\t                        if(vEdit != null){\n\t\t\t                            rtnObj.edit_tag = vEdit._value;\n\t\t\t                        }\n\t\t\t\n\t\t\t                        // if edit_hidden , then edit_tage : hidden\n\t\t\t                        if (prop._documentation != null && prop._documentation.view_hidden ){\n\t\t\t                            rtnObj.edit_tag = \"hidden\";\n\t\t\t                        }\n\t\t\t\n\t\t\t                        var cm = _.find(_cms , {id: rtnObj.col});\n\t\t\t                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {\n\t\t\t\n\t\t\t                            // rtnObj.selectOptions = cm.editoptions.value;\n\t\t\t                            var options = [];\n\t\t\t                            $.each(cm.editoptions.value, function (k, v) {\n\t\t\t                                var opt = {value: k, label: v};\n\t\t\t                                options.push(opt);\n\t\t\t                            });\n\t\t\t                            rtnObj.selectOptions = options;\n\t\t\t                            rtnObj.edit_tag = cm.edittype;\n\t\t\t                            if (parentFrame.v_filterPop[rtnObj.col] != null ){\n\t\t\t                                rtnObj.edit_tag = 'input';\n\t\t\t                                rtnObj.editable = false;\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        if( cm.editable != null)\n\t\t\t                            rtnObj.editable = cm.editable;\n\t\t\t                        \n\t\t\t                        v_items.push(rtnObj);\n\t\t\t                    }\n\t\t\t                });\n\t\t\t\n\t\t\t                // pop_select\n\t\t\t                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : \"pop_select\" } });\n\t\t\t                $.each(pop_props, function(i,pop_prop){\n\t\t\t                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});\n\t\t\t                    if (pop_item != null)\n\t\t\t                        pop_item.edit_tag = \"pop_select\";\n\t\t\t                });\n\t\t\t\n\t\t\t                // label merge\n\t\t\t                $.each(v_items , function(i, _item){\n\t\t\t                    if (_item.col == null)\n\t\t\t                        return true;\n\t\t\t                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });\n\t\t\t                    if ( v_property != null && v_property._documentation != null){\n\t\t\t                        _.merge(_item , v_property._documentation);\n\t\t\t                        // if (v_property._documentation.label != null){\n\t\t\t                        //     _.merge(_item , v_property._documentation);\n\t\t\t                        //     _item.label = v_property._documentation.label ;\n\t\t\t                        // }\n\t\t\t                    }\n\t\t\t\n\t\t\t                });\n\t\t\t\n\t\t\t                var schema_options = {\n\t\t\t                    keys : vKeys ,\n\t\t\t                    fn_change: function( input ){\t\t\t\t\t\t\t\t\t\n\t\t\t                        // cascade update\n\t\t\t                        var _this = this;\n\t\t\t                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                        var item = _.find(gridJson.items, {name : this.props.options.name});\n\t\t\t                        var src = {};\n\t\t\t                        if (item != null && item.referenceId != null && dataSrc != null){\n\t\t\t                            src = _.find(dataSrc, {\"referenceId\": item.referenceId, \"topRefrenceId\" : item.topRefrenceId , \"childColumnName\": item.name.toLowerCase()  });\n\t\t\t                        }\n\t\t\t                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){\n\t\t\t                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );\n\t\t\t                            if (index > -1 && index < (src.parentColumnNames.length -1 )){\n\t\t\t                                var nextColumn = src.childColumnNames[index+1];\n\t\t\t                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var wheres = src.childColumnNames.slice(0,index + 1);\n\t\t\t                                var frm = document.getElementById(\"form\");\n\t\t\t                                var param = {};\n\t\t\t                                $.each(wheres , function(i, where ){\n\t\t\t                                    var whereReact = _.find(_this.reactObjects , \n\t\t\t                                        { \n\t\t\t                                            props : {\n\t\t\t                                                options : {\n\t\t\t                                                    name: where.toUpperCase()\n\t\t\t                                                } \n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        }\n\t\t\t                                    );\n\t\t\t                                    if ( _this == whereReact )\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ] = input;\n\t\t\t                                    else\n\t\t\t                                        param[\"search_\" + _.camelCase(where) ]  =  whereReact.state.value;\n\t\t\t                                });\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                var nextSrc = _.find(dataSrc, {\"referenceId\": nextCm.referenceId, \"topRefrenceId\" : nextCm.topRefrenceId , \"childColumnName\": nextCm.name.toLowerCase()  });\n\t\t\t                                var list = nextSrc.dataDynamic(param);\n\t\t\t                                var nextReact = _.find(_this.reactObjects , \n\t\t\t                                    { \n\t\t\t                                        props : { \n\t\t\t                                            options : {\n\t\t\t                                                name: nextColumn.toUpperCase()\n\t\t\t                                            }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t                                        } \n\t\t\t                                    }\n\t\t\t                                );\n\t\t\t                                \n\t\t\t                                var options = [];\n\t\t\t                                $.each(list, function (i, obj) {\n\t\t\t                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };\n\t\t\t                                    options.push(opt);\n\t\t\t                                });\n\t\t\t                                // nextReact.state.selectOptions = options ;\n\t\t\t                                nextReact.setState({selectOptions : options });\n\t\t\t                                // setState()\n\t\t\t\n\t\t\t                            }\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_submit: function(_editType){\n\t\t\t                        if (_editType == \"edit\"){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var paramObj = {\n\t\t\t                                //origindatas: this.props.options.keys\n\t\t\t                                origindatas: this.state.keys\n\t\t\t                            };\n\t\t\t                            \n\t\t\t                            if(this.props.options.value == this.state.value)\n\t\t\t                                return state;\n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: {\n\t\t\t                                    searchJson: JSON.stringify(paramObj),\n\t\t\t                                    fieldName: this.state.name,\n\t\t\t                                    fieldValue: this.state.value,\n\t\t\t                                    fieldValueOrigin: this.state.value_origin,\n\t\t\t                                    userId: $(\"#userId\").val(),\n\t\t\t                                    // sqlid: \"dashboard.ssd_sm.script_master.update\"\n\t\t\t                                    sqlid: \"tabCols.tabCols.edit\"\n\t\t\t                                }, \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 300,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    }\n\t\t\t                                                                            \n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t                            return state;\n\t\t\t                        } \n\t\t\t                        else if ( _.includes(['add','copy'], _editType)){\n\t\t\t                            //alert(\"submit function defined\");\n\t\t\t                            var state = true;\n\t\t\t                            var reactObjects = this;\n\t\t\t                            var addRow = {};\n\t\t\t                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:\"grid\"});\n\t\t\t                            $.each(reactObjects,function(i,react){\n\t\t\t                                addRow[this.state.name] = this.state.value;\n\t\t\t                            });\n\t\t\t                            addRow['sqlid'] = gridJson.sqlId + \".insert\";\n\t\t\t\n\t\t\t                            var form1 = $(\"#form\");\n\t\t\t                            _.merge(addRow, form1.serializeFormJSON() );\n\t\t\t                            \n\t\t\t                            $.ajax({\n\t\t\t                                url: \"./genericSaveJson.html\",\n\t\t\t                                type: \"POST\",\n\t\t\t                                data: addRow , \n\t\t\t                                async: false,\t\t\t                    \t\t\n\t\t\t                                success:  function(data){\n\t\t\t                                    response1 = data;\n\t\t\t                                    if(response1.result != 'success'){\n\t\t\t                                        state = false;\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(response1.message);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        \n\t\t\t                                                        $( this ).dialog( \"close\" );\t\n\t\t\t\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                    } \n\t\t\t                                    // Success\n\t\t\t                                    else {\n\t\t\t                                        // To do \n\t\t\t                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit\n\t\t\t                                        parentFrame.fn_search();\n\t\t\t                                        var msg = \"Save Success!\";\n\t\t\t                                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                                        $(\"#dialog-confirm\").dialog({\n\t\t\t                                            resizable: false,\n\t\t\t                                            modal: true,\n\t\t\t                                            title: \"Error\",\n\t\t\t                                            //height: 200,\n\t\t\t                                            width: 500,\n\t\t\t                                            dialogClass: 'no-close',\n\t\t\t                                            closeOnEscape: false,\n\t\t\t                                            buttons: [\n\t\t\t                                                {\n\t\t\t                                                    text: \"OK\",\n\t\t\t                                                    click: function() {\n\t\t\t                                                        $( this ).dialog( \"close\" );\n\t\t\t                                                        setTimeout( function(){\n\t\t\t                                                            // parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).remove();\n\t\t\t                                                            parent.$(\"#\" + window.frameElement.name.replace(\"frame\",\"modal\")).modal('toggle');\n\t\t\t                                                        },0);\n\t\t\t                                                    }\n\t\t\t                                                }\n\t\t\t                                            ]\n\t\t\t                                        });\n\t\t\t                                        \n\t\t\t                                        // reload to edit mode;\n\t\t\t                                    }\t\t\t\t\t\t                    \t\t\t\n\t\t\t                                }\n\t\t\t                            });\n\t\t\t                            \n\t\t\t\n\t\t\t                            return state;\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    fn_afterSubmit: function(keyUpdatedObjects){\n\t\t\t                        // if only edit\n\t\t\t                        $.each(this,function(i,react){\n\t\t\t                            if(_.find(cms,function(cm){return cm.name == react.state.name})){\n\t\t\t                                var vobject = {}; \n\t\t\t                                var parentRowKey = theGrid.getGridParam('selrow');\n\t\t\t                                vobject[react.state.name] = react.state.value;\n\t\t\t                                theGrid.setRowData(parentRowKey,vobject);\n\t\t\t                            }\n\t\t\t                            \n\t\t\t                        });\n\t\t\t                        \n\t\t\t                        var msg = \"Save Success!\";\n\t\t\t                        $(\"#dialog-confirm\").html(msg);\n\t\t\t                        $(\"#dialog-confirm\").dialog({\n\t\t\t                            resizable: false,\n\t\t\t                            modal: true,\n\t\t\t                            title: \"Error\",\n\t\t\t                            //height: 200,\n\t\t\t                            width: 300,\n\t\t\t                            dialogClass: 'no-close',\n\t\t\t                            closeOnEscape: false,\n\t\t\t                            buttons: [\n\t\t\t                                {\n\t\t\t                                    text: \"OK\",\n\t\t\t                                    click: function() {\n\t\t\t                                        $( this ).dialog( \"close\" );\t\t\t\t\t\t\t\t\t\t\t                    \t\t\t                  \n\t\t\t                                    }\n\t\t\t                                }\n\t\t\t                            ]\n\t\t\t                        });\n\t\t\t                                                    \n\t\t\t                        \n\t\t\t                    },\n\t\t\t                    progressObject: $(\"#loader\"),\n\t\t\t                    fn_pop_select : commonFunc.fn_pop_select\n\t\t\t                };\n\t\t\t\n\t\t\t                if (entityDoc.view_button_option != null){\n\t\t\t                    schema_options.button_option = entityDoc.view_button_option ;\n\t\t\t                }\n\t\t\t\n\t\t\t                v_schema = {\n\t\t\t                    containerId: '',\n\t\t\t                    type:'Vertical',\n\t\t\t                    label: '',\n\t\t\t                    elements: [\n\t\t\t                        {\n\t\t\t                            label: \"\",\n\t\t\t                            type: 'Group',\n\t\t\t                            elements: [\n\t\t\t                                {\n\t\t\t                                    type: \"inline_edit\",\n\t\t\t                                    edit_type : \"${param.detailType}\",\n\t\t\t                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,\n\t\t\t                                    data: function(){ \n\t\t\t                                        return commonFunc.data;\n\t\t\t                                    },\n\t\t\t                                    options : schema_options,\n\t\t\t                                    items: v_items \n\t\t\t                                    \n\t\t\t                                }\n\t\t\t                                \n\t\t\t                            \n\t\t\t                            ]\n\t\t\t                        }\n\t\t\t                        \n\t\t\t                    \n\t\t\t                    ]\n\t\t\t                };            \n\t\t\t\n\t\t\t            },\n",
					"\t\t\t\"fn_pop_select\": function(e){\n\t\t\t\t\t\t\t// console.log(\"fn_pop_select\");\n\t\t\t\t\t\t\t// 01. find reference childColumnName\n\t\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t\tvar v_react_column_name = this.props.options.name.toLowerCase();\n\t\t\t\t\t\t\tvar v_value = this.state.value;\n\t\t\t\t\t\t\tvar v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( v_datasrc != null){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// frame dom copy\n\t\t\t\t\t\t\t\tif(true){\n\t\t\t\t\t\t\t\t\tvar pageBody = parent.$(\"body\");\n\t\t\t\t\t\t\t\t\tvar modalCommon = parent.$(\"[name=infiniteLogModal]\");\n\t\t\t\t\t\t\t\t\tvar modalClone = modalCommon.clone();\n\t\t\t\t\t\t\t\t\tpageBody.append(modalClone);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"isCloned\",\"true\");\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\t\t\tvar y = today.getFullYear();\n\t\t\t\t\t\t\t\t\tvar m = today.getMonth() + 1;\n\t\t\t\t\t\t\t\t\tvar d = today.getDate();\n\t\t\t\t\t\t\t\t\tvar h = today.getHours();\n\t\t\t\t\t\t\t\t\tvar mi = today.getMinutes();\n\t\t\t\t\t\t\t\t\tvar s = today.getSeconds();\n\t\t\t\t\t\t\t\t\tvar idPrefix =  y + \"_\" + m + \"_\" + d + \"_\" + h + \"_\" + mi + \"_\" + s;\n\t\t\t\t\t\t\t\t\tvar modalId = \"modal_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tvar frameId = \"frame_\" + idPrefix;\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"id\",modalId);\n\t\t\t\t\t\t\t\t\tmodalClone.attr(\"name\",modalId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:1000px;border: 0;height: 600px ; \" ></iframe>');\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar container = modalClone.find(\".infiniteLogContainer\");\n\t\t\t\t\t\t\t\t\tcontainer.append(frameDom);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = viewPath.pop();\n\t\t\t\t\t\t\t\tvar parentViewName = _.camelCase( v_datasrc.parentEntity);\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + parentViewName + \"&backgroundColor=FFF&isPop=Y&is_pop_select=Y\";\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t                    oFrm.target = frameId;\n\t\t\t                    \n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t                    }\n\t\t\t                    \n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\n\t\t\t\t\t\t\t\t// selectPop\n\t\t\t\t\t\t\t\tvar pop_select = {};\n\t\t\t\t\t\t\t\t$.each(_this.reactObjects , function(i,react){\n\t\t\t\t\t\t\t\t\tpop_select[this.state.name] = this.state.value;\n\t\t\t\t\t\t\t\t\tif( this.state.search_str != null ){\n\t\t\t\t\t\t\t\t\t\tvar prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : \"pop_select\"} });\n\t\t\t\t\t\t\t\t\t\tif (prop != null && prop._documentation.search_str_option != null){\n\t\t\t\t\t\t\t\t\t\t\tvar option = prop._documentation.search_str_option;\n\t\t\t\t\t\t\t\t\t\t\t// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;\n\t\t\t\t\t\t\t\t\t\t\toption.search_value = this.state.search_str;\n\t\t\t\t\t\t\t\t\t\t\tpop_select.search_str_option = option;\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#pop_select\").val(JSON.stringify(pop_select));\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(\"{}\");\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object = _this;\n\t\t\t\t\t\t\t\tcommonFunc.pop_select_react_object.dataSrc = v_datasrc;\n\t\t\t\n\t\t\t\t\t\t\t\t// header\n\t\t\t\t\t\t\t\tvar headerStrs = [];\n\t\t\t\t\t\t\t\t$.each(pop_select,function(k,v){\n\t\t\t\t\t\t\t\t\tvar str = _.camelCase(k);\n\t\t\t\t\t\t\t\t\tstr += \" : \" + v;\n\t\t\t\t\t\t\t\t\theaderStrs.push(str);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(\" , \");\n\t\t\t\t\t\t\t\tvar headStr = '[' + parentViewName + ']  ' +  'Search For Select';\n\t\t\t\t\t\t\t\tmodalClone.find(\".modal-header h6 span\").text(headStr);\n\t\t\t\n\t\t\t\t\t\t\t\tmodalClone.modal();\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t}\n\t\t\t            \n\t\t\t            },\n",
					"\t\t\t\"pop_select_react_object\": {},",
					"\t\t\t\"fn_pop_select_callback\": function(){\n\t\t\t                // to do ...\n\t\t\t\n\t\t\t                // \n\t\t\t                commonFunc.fn_view_sub();\n\t\t\t            },\n",
					"\t\t\t\"data\": {},",
					"\t\t\t\"fn_view_sub\": function(){\n\t\t\t\t\t\t\tif(entityDoc.show_sub_pages != true)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tvar sub_container = $(\"#v_sub_pages\");\t\t\t\t\n\t\t\t\t\t\t\tsub_container.html('');\n\t\t\t\n\t\t\t\t\t\t\t$.each(childReferences , function(i,child){\n\t\t\t                    // to do group label\n\t\t\t                    var h3 = $(document.createElement(\"h3\"));\n\t\t\t                    h3.css(\"margin-top\",\" 10px\");\n\t\t\t                    h3.css(\"padding-bottom\",\" 0px\");\n\t\t\t                    h3.addClass(\"cont_tit\");\n\t\t\t                    h3.text( _.camelCase(child.childEntityName));\n\t\t\t                    sub_container.append(h3);\n\t\t\t                    \n\t\t\t                    var frameId = \"frame_\" + child.childEntityId ;\n\t\t\t\t\t\t\t\tvar frameDom = $('<iframe name=\"\" id=\"\"  src=\"\" style=\"width:100%;border: 0;height: 370px ; \" ></iframe>');\n\t\t\t\t\t\t\t\tframeDom.attr(\"id\", frameId);\n\t\t\t\t\t\t\t\tframeDom.attr(\"name\", frameId);\n\t\t\t\t\t\t\t\tsub_container.append(frameDom);\n\t\t\t\n\t\t\t\t\t\t\t\t// Form Submit\n\t\t\t\t\t\t\t\tvar oFrm = document.getElementById(\"form\");\n\t\t\t\t\t\t\t\tvar filter = {};\n\t\t\t\t\t\t\t\t$.each(child.parent_columns,function(j,parent_column){\n\t\t\t\t\t\t\t\t\tvar child_column = child.child_columns[j];\n\t\t\t\t\t\t\t\t\tfilter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$(\"#filterPop\").val(JSON.stringify(filter));\n\t\t\t\t\t\t\t\tvar viewName = $(\"#viewName\").val();\n\t\t\t\t\t\t\t\tvar viewPath = viewName.split(\"/\");\n\t\t\t\t\t\t\t\tvar itemName = _.camelCase(child.childEntityName);\n\t\t\t\t\t\t\t\tviewPath.pop();\n\t\t\t\t\t\t\t\toFrm.action =  \"./generic.do?viewName=\" + viewPath.join(\"/\") + \"/\" + itemName + \"&backgroundColor=FFF&isSubFrame=Y\";;\n\t\t\t\t\t\t\t\toFrm.method = \"post\";\n\t\t\t\t\t\t\t\toFrm.target = frameId;\n\t\t\t\t\t\t\t\tframeDom.show();\n\t\t\t\t\t\t\t\tvar parentFrameName = \"${param.frameName}\";\n\t\t\t\t\t\t\t\tif ( _.startsWith( parentFrameName,\"frame\") ){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( parentFrameName + \".\" + window.frameElement.name );\n\t\t\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\t\t\t$(\"#frameName\").val( window.frameElement.name );\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\n\t\t\t\t\t\t\t\toFrm.submit();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n",
					"\t\t};",
					"\t</script>",
					"\t<script  id=\"script_main\">",
					"\t\t$(function () {",
					"\t\t\t$(\"#loader\").show();",
					"\t\t\tsetTimeout( function(){",
					"\t\t\t\t// dictionary",
					"\t\t\t\t$.each(dictionaries,function(i, src){",
					"\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\t// data scource",
					"\t\t\t\t$.each(dataSrc,function(i, src){",
					"\t\t\t\t\tvar prop = _.find(gridProperties , { _name : src.childColumnName } );",
					"\t\t\t\t\tvar dataSrcType = 'select';",
					"\t\t\t\t\tif ( prop != null && prop._documentation != null && prop._documentation.data_src_type != null)",
					"\t\t\t\t\t\tdataSrcType = prop._documentation.data_src_type;",
					"\t\t\t\t\tif (dataSrcType == 'select')",
					"\t\t\t\t\t\tsrc.data();",
					"\t\t\t\t});",
					"\t\t\t\tpopParemeters.fn_set();",
					"\t\t\t\t$('#v_schema_contentContainer').html('');",
					"\t\t\t\t// getID If show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['add','copy'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.getID();",
					"\t\t\t\t}",
					"\t\t\t\tcommonFunc.fn_make_schema();",
					"\t\t\t\tfn_makeHtml('v_schema_contentContainer',v_schema);",
					"\t\t\t\t// show show_sub_pages",
					"\t\t\t\tif( entityDoc.show_sub_pages && _.includes(['edit','view'],$('#detailType').val()) ){",
					"\t\t\t\t\tcommonFunc.fn_view_sub();",
					"\t\t\t\t}",
					"\t\t\t\t$(\"#loader\").hide();",
					"\t\t\t},50);",
					"\t\t});",
					"\t</script>",
					"</head>",
					"<body  style=\"min-width:920px\">",
					"<form name=\"form\" id=\"form\" class=\"\">",
					"<input type=\"hidden\" id=\"sender\" name=\"sender\" value=\"${param.sender}\"/>",
					" <input type=\"hidden\" name=\"cookieName\" value=\"${param.cookieName}\"/>",
					"<input type=\"hidden\" name=\"cookieToken\" value=\"${param.cookieToken}\"/>",
					"<input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${param.userId}\"/>",
					"<input type=\"hidden\" id=\"pjtId\" name=\"pjtId\" value=\"${param.pjtId}\"/>",
					"<input type=\"hidden\" id=\"filterPop\" name=\"filterPop\" value='${param.filterPop}'/>",
					"<input type=\"hidden\" id=\"pop_select\" name=\"pop_select\" value='${param.pop_select}'/>",
					"<input type=\"hidden\" id=\"viewName\" name=\"viewName\" value='${param.viewName}'/>",
					"<input type=\"hidden\" id=\"searchJson\" name=\"searchJson\" value='{}'/>",
					"<input type=\"hidden\" id=\"detailType\" name=\"detailType\" value='${param.detailType}'/>",
					"<input type=\"hidden\" id=\"frameName\" name=\"frameName\" value='${param.frameName}'/>",
					"\t<div id=\"v_schema_searchContainer\" class=\"srch_box2\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_schema_contentContainer\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"\t<div id=\"v_sub_pages\" class=\"\" style=\"margin-top: 3px;margin-left: 20px;margin-right: 20px;\"></div>",
					"</form>",
					"<div id=\"dialog-confirm\"></div>",
					"<div id=\"loader\" style='display:none'></div>",
					"</body>",
					"<jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>"
				],
				"entity_doc_obj": {
					"entityId": "tabCols"
				},
				"entity_sql_prefix": "",
				"commonFunc": {
					"sqlId": "tabCols.tabCols",
					"fn_make_schema": function(){
					                var detailList = [];                
					                var v_type = "inline";
					                if( _.includes(['edit','view', 'copy'],$("#detailType").val()) ){
					                    $.ajax({
					                        type: "POST",
					                        url: "./genericlListJson.do?sqlid=tabCols.tabCols.one",
					                        // data: searchRow ,
					                        data: $("#form").serialize(), 
					                        async: false,
					                        success:  function(response){
					                            detailList  = response.dataList;     
					                            // commonFunc.data = detailList[0] ;
					                            commonFunc.data = _.merge(detailList[0], commonFunc.data);
					                        }
					                    });
					                }
					                var data = commonFunc.data;
					                if ( _.includes(['add'],$("#detailType").val()) && parentFrame.v_filterPop != null && _.keys(parentFrame.v_filterPop).length > 0 ) {
					                    commonFunc.data = parentFrame.v_filterPop;
					                }
					
					                if( _.includes(['edit','add','copy'],$("#detailType").val()) ){
					                    v_type = "inline_edit";
					                }
					                var vKeys = [];
					                $.each([].concat(gridProperties), function(i, prop){
					                    let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                    if (vId != null){
					                        vKeys.push(prop._name.toUpperCase());
					                    }
					                });
					                var gridid = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"}).id;
					                var theGrid = parentFrame.$("#"+gridid);
					                var cms = theGrid.jqGrid("getGridParam", "colModel");
					
					                var v_items = [];
					                // custom order by
					                if (entityDoc.detail != null && entityDoc.detail.order_by != null){
					                    $.each(entityDoc.detail.order_by, function(i, _order){									
					                        var _cms = cms;									
					                        var prop = _.find([].concat(gridProperties), {_name : _order.column_name});
					                        var rtnObj = {};
					                        if (prop != null){										
					                            rtnObj = {
					                                label : _.capitalize(_.upperCase(prop._name)),
					                                col : prop._name.toUpperCase() ,
					                                orderby : i
					                            };
					                            let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                            if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                                rtnObj.editable = false;
					                            }
					                            // list hiden columns
					                            if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                                rtnObj.isDateTime = true;
					                            }
					                            var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                            if(vEdit != null){
					                                rtnObj.edit_tag = vEdit._value;
					                            }
					                            var cm = _.find(_cms , {id: rtnObj.col});
					                            if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                                // rtnObj.selectOptions = cm.editoptions.value;
					                                var options = [];
					                                $.each(cm.editoptions.value, function (k, v) {
					                                    var opt = {value: k, label: v};
					                                    options.push(opt);
					                                });
					                                rtnObj.selectOptions = options;
					                                rtnObj.edit_tag = cm.edittype;
					                                if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                    rtnObj.edit_tag = 'input';
					                                    rtnObj.editable = false;
					                                }
					                            }
					                            if( cm.editable != null)
								                    rtnObj.editable = cm.editable;
					                            v_items.push(rtnObj);
					                        }else {
					                            rtnObj = _order;
					                            rtnObj.orderby = i;
					                            var prop1 = _.find(gridProperties,{"_name": _order.column_name});
					                            if(prop1 != null && prop1._documentation != null && prop1._documentation.add_hidden ){
					
					                            }else{
					                                rtnObj.col = _order.column_name;
					                                v_items.push(rtnObj);
					                            }
					
					                        }
					                        
					
					                    });
					                }
					
					                // Process than not exists in orderby 
					                $.each([].concat(gridProperties), function(i, prop){									
					                    var v_item = _.find([].concat(v_items),{col : prop._name.toUpperCase()});
					                    if ( v_item == null){
					                        var _cms = cms;									
					                        var rtnObj = {};
					                                                            
					                        rtnObj = {
					                            label : _.capitalize(_.upperCase(prop._name)),
					                            col : prop._name.toUpperCase() ,
					                            orderby : 100
					                        };
					                        let vId = _.find( _.isArray(prop.annotations)?prop.annotations:[prop.annotations] ,{"_xsi:type" : "gmmjpa:Id"});
					                        if (vId != null &&  _.includes(['edit'], "${param.detailType}")){
					                            rtnObj.editable = false;
					                        }
					                        // list hiden columns
					                        if ( prop.type._href == "http://www.eclipse.org/emf/2002/Ecore#//EDate" ){
					                            rtnObj.isDateTime = true;
					                        }
					                        var vEdit = _.find(prop.eAnnotations.details,{"_key":"edit_tag"});
					                        if(vEdit != null){
					                            rtnObj.edit_tag = vEdit._value;
					                        }
					
					                        // if edit_hidden , then edit_tage : hidden
					                        if (prop._documentation != null && prop._documentation.view_hidden ){
					                            rtnObj.edit_tag = "hidden";
					                        }
					
					                        var cm = _.find(_cms , {id: rtnObj.col});
					                        if ( cm != null && cm.editoptions != undefined && cm.editoptions.value != undefined ) {
					
					                            // rtnObj.selectOptions = cm.editoptions.value;
					                            var options = [];
					                            $.each(cm.editoptions.value, function (k, v) {
					                                var opt = {value: k, label: v};
					                                options.push(opt);
					                            });
					                            rtnObj.selectOptions = options;
					                            rtnObj.edit_tag = cm.edittype;
					                            if (parentFrame.v_filterPop[rtnObj.col] != null ){
					                                rtnObj.edit_tag = 'input';
					                                rtnObj.editable = false;
					                            }
					                        }
					                        if( cm.editable != null)
					                            rtnObj.editable = cm.editable;
					                        
					                        v_items.push(rtnObj);
					                    }
					                });
					
					                // pop_select
					                var pop_props = _.filter(gridProperties, {_documentation: { data_src_type : "pop_select" } });
					                $.each(pop_props, function(i,pop_prop){
					                    var pop_item = _.find(v_items , {col : pop_prop._name.toUpperCase()});
					                    if (pop_item != null)
					                        pop_item.edit_tag = "pop_select";
					                });
					
					                // label merge
					                $.each(v_items , function(i, _item){
					                    if (_item.col == null)
					                        return true;
					                    var v_property = _.find(gridProperties, { _name : _item.col.toLowerCase() });
					                    if ( v_property != null && v_property._documentation != null){
					                        _.merge(_item , v_property._documentation);
					                        // if (v_property._documentation.label != null){
					                        //     _.merge(_item , v_property._documentation);
					                        //     _item.label = v_property._documentation.label ;
					                        // }
					                    }
					
					                });
					
					                var schema_options = {
					                    keys : vKeys ,
					                    fn_change: function( input ){									
					                        // cascade update
					                        var _this = this;
					                        var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                        var item = _.find(gridJson.items, {name : this.props.options.name});
					                        var src = {};
					                        if (item != null && item.referenceId != null && dataSrc != null){
					                            src = _.find(dataSrc, {"referenceId": item.referenceId, "topRefrenceId" : item.topRefrenceId , "childColumnName": item.name.toLowerCase()  });
					                        }
					                        if ( src.parentColumnNames != null && src.parentColumnNames.length > 1){
					                            var index = _.indexOf( _.map(src.childColumnNames,function(column){ return column.toUpperCase();  }) , item.name.toUpperCase() );
					                            if (index > -1 && index < (src.parentColumnNames.length -1 )){
					                                var nextColumn = src.childColumnNames[index+1];
					                                var nextCm = _.find( cms , {name: nextColumn.toUpperCase() });												
					                                var wheres = src.childColumnNames.slice(0,index + 1);
					                                var frm = document.getElementById("form");
					                                var param = {};
					                                $.each(wheres , function(i, where ){
					                                    var whereReact = _.find(_this.reactObjects , 
					                                        { 
					                                            props : {
					                                                options : {
					                                                    name: where.toUpperCase()
					                                                } 
					                                            }															
					                                        }
					                                    );
					                                    if ( _this == whereReact )
					                                        param["search_" + _.camelCase(where) ] = input;
					                                    else
					                                        param["search_" + _.camelCase(where) ]  =  whereReact.state.value;
					                                });												
					                                var nextSrc = _.find(dataSrc, {"referenceId": nextCm.referenceId, "topRefrenceId" : nextCm.topRefrenceId , "childColumnName": nextCm.name.toLowerCase()  });
					                                var list = nextSrc.dataDynamic(param);
					                                var nextReact = _.find(_this.reactObjects , 
					                                    { 
					                                        props : { 
					                                            options : {
					                                                name: nextColumn.toUpperCase()
					                                            }															
					                                        } 
					                                    }
					                                );
					                                
					                                var options = [];
					                                $.each(list, function (i, obj) {
					                                    var opt = { label : obj[nextSrc.parentNameColumn.toUpperCase()], value :obj[nextSrc.parentColumnName.toUpperCase()] };
					                                    options.push(opt);
					                                });
					                                // nextReact.state.selectOptions = options ;
					                                nextReact.setState({selectOptions : options });
					                                // setState()
					
					                            }
					                        }
					                        
					                    },
					                    fn_submit: function(_editType){
					                        if (_editType == "edit"){
					                            //alert("submit function defined");
					                            var state = true;
					                            var paramObj = {
					                                //origindatas: this.props.options.keys
					                                origindatas: this.state.keys
					                            };
					                            
					                            if(this.props.options.value == this.state.value)
					                                return state;
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: {
					                                    searchJson: JSON.stringify(paramObj),
					                                    fieldName: this.state.name,
					                                    fieldValue: this.state.value,
					                                    fieldValueOrigin: this.state.value_origin,
					                                    userId: $("#userId").val(),
					                                    // sqlid: "dashboard.ssd_sm.script_master.update"
					                                    sqlid: "tabCols.tabCols.edit"
					                                }, 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 300,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );											                    			                  
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    }
					                                                                            
					                                }
					                            });
					                            
					                            return state;
					                        } 
					                        else if ( _.includes(['add','copy'], _editType)){
					                            //alert("submit function defined");
					                            var state = true;
					                            var reactObjects = this;
					                            var addRow = {};
					                            var gridJson = findAllByElName(parentFrame.v_schema_content.elements , {type:"grid"});
					                            $.each(reactObjects,function(i,react){
					                                addRow[this.state.name] = this.state.value;
					                            });
					                            addRow['sqlid'] = gridJson.sqlId + ".insert";
					
					                            var form1 = $("#form");
					                            _.merge(addRow, form1.serializeFormJSON() );
					                            
					                            $.ajax({
					                                url: "./genericSaveJson.do",
					                                type: "POST",
					                                data: addRow , 
					                                async: false,			                    		
					                                success:  function(data){
					                                    response1 = data;
					                                    if(response1.result != 'success'){
					                                        state = false;
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(response1.message);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        
					                                                        $( this ).dialog( "close" );	
					
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                    } 
					                                    // Success
					                                    else {
					                                        // To do 
					                                        // Message ==> Click  ==> Parent Grid Refresh , Self Refresh Edit
					                                        parentFrame.fn_search();
					                                        var msg = "Save Success!";
					                                        $("#dialog-confirm").html(msg);
					                                        $("#dialog-confirm").dialog({
					                                            resizable: false,
					                                            modal: true,
					                                            title: "Error",
					                                            //height: 200,
					                                            width: 500,
					                                            dialogClass: 'no-close',
					                                            closeOnEscape: false,
					                                            buttons: [
					                                                {
					                                                    text: "OK",
					                                                    click: function() {
					                                                        $( this ).dialog( "close" );
					                                                        setTimeout( function(){
					                                                            // parent.$("#" + window.frameElement.name.replace("frame","modal")).remove();
					                                                            parent.$("#" + window.frameElement.name.replace("frame","modal")).modal('toggle');
					                                                        },0);
					                                                    }
					                                                }
					                                            ]
					                                        });
					                                        
					                                        // reload to edit mode;
					                                    }						                    			
					                                }
					                            });
					                            
					
					                            return state;
					                        }
					                        
					                    },
					                    fn_afterSubmit: function(keyUpdatedObjects){
					                        // if only edit
					                        $.each(this,function(i,react){
					                            if(_.find(cms,function(cm){return cm.name == react.state.name})){
					                                var vobject = {}; 
					                                var parentRowKey = theGrid.getGridParam('selrow');
					                                vobject[react.state.name] = react.state.value;
					                                theGrid.setRowData(parentRowKey,vobject);
					                            }
					                            
					                        });
					                        
					                        var msg = "Save Success!";
					                        $("#dialog-confirm").html(msg);
					                        $("#dialog-confirm").dialog({
					                            resizable: false,
					                            modal: true,
					                            title: "Error",
					                            //height: 200,
					                            width: 300,
					                            dialogClass: 'no-close',
					                            closeOnEscape: false,
					                            buttons: [
					                                {
					                                    text: "OK",
					                                    click: function() {
					                                        $( this ).dialog( "close" );											                    			                  
					                                    }
					                                }
					                            ]
					                        });
					                                                    
					                        
					                    },
					                    progressObject: $("#loader"),
					                    fn_pop_select : commonFunc.fn_pop_select
					                };
					
					                if (entityDoc.view_button_option != null){
					                    schema_options.button_option = entityDoc.view_button_option ;
					                }
					
					                v_schema = {
					                    containerId: '',
					                    type:'Vertical',
					                    label: '',
					                    elements: [
					                        {
					                            label: "",
					                            type: 'Group',
					                            elements: [
					                                {
					                                    type: "inline_edit",
					                                    edit_type : "${param.detailType}",
					                                    cols: entityDoc.detail_cols_add =! null  ? entityDoc.detail_cols_add : 1 ,
					                                    data: function(){ 
					                                        return commonFunc.data;
					                                    },
					                                    options : schema_options,
					                                    items: v_items 
					                                    
					                                }
					                                
					                            
					                            ]
					                        }
					                        
					                    
					                    ]
					                };            
					
					            },

					"fn_pop_select": function(e){
									// console.log("fn_pop_select");
									// 01. find reference childColumnName
									var _this = this;
									var v_react_column_name = this.props.options.name.toLowerCase();
									var v_value = this.state.value;
									var v_datasrc = _.find(dataSrc, {childColumnName : v_react_column_name} );
									
									if ( v_datasrc != null){
										
										// frame dom copy
										if(true){
											var pageBody = parent.$("body");
											var modalCommon = parent.$("[name=infiniteLogModal]");
											var modalClone = modalCommon.clone();
											pageBody.append(modalClone);
											modalClone.attr("isCloned","true");
							
											var today = new Date();
											var y = today.getFullYear();
											var m = today.getMonth() + 1;
											var d = today.getDate();
											var h = today.getHours();
											var mi = today.getMinutes();
											var s = today.getSeconds();
											var idPrefix =  y + "_" + m + "_" + d + "_" + h + "_" + mi + "_" + s;
											var modalId = "modal_" + idPrefix;
											var frameId = "frame_" + idPrefix;
											modalClone.attr("id",modalId);
											modalClone.attr("name",modalId);
							
											var frameDom = $('<iframe name="" id=""  src="" style="width:1000px;border: 0;height: 600px ; " ></iframe>');
											frameDom.attr("id", frameId);
											frameDom.attr("name", frameId);
							
											var container = modalClone.find(".infiniteLogContainer");
											container.append(frameDom);
										}
										
										var oFrm = document.getElementById("form");					
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = viewPath.pop();
										var parentViewName = _.camelCase( v_datasrc.parentEntity);
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + parentViewName + "&backgroundColor=FFF&isPop=Y&is_pop_select=Y";
										oFrm.method = "post";
					                    oFrm.target = frameId;
					                    
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
					                    }
					                    
										frameDom.show();
					
										// selectPop
										var pop_select = {};
										$.each(_this.reactObjects , function(i,react){
											pop_select[this.state.name] = this.state.value;
											if( this.state.search_str != null ){
												var prop = _.find(gridProperties, { _name : react.state.name.toLowerCase() , _documentation : { data_src_type : "pop_select"} });
												if (prop != null && prop._documentation.search_str_option != null){
													var option = prop._documentation.search_str_option;
													// pop_select[option.search_field.toUpperCase()] = this.state.search_str ;
													option.search_value = this.state.search_str;
													pop_select.search_str_option = option;
					
												}
											}
												
										});
										$("#pop_select").val(JSON.stringify(pop_select));
										$("#filterPop").val("{}");
										commonFunc.pop_select_react_object = _this;
										commonFunc.pop_select_react_object.dataSrc = v_datasrc;
					
										// header
										var headerStrs = [];
										$.each(pop_select,function(k,v){
											var str = _.camelCase(k);
											str += " : " + v;
											headerStrs.push(str);
										});
										// var headStr = '[' + parentViewName + ']  ' +  headerStrs.join(" , ");
										var headStr = '[' + parentViewName + ']  ' +  'Search For Select';
										modalClone.find(".modal-header h6 span").text(headStr);
					
										modalClone.modal();
										oFrm.submit();
									}
					            
					            },

					"pop_select_react_object": {},
					"fn_pop_select_callback": function(){
					                // to do ...
					
					                // 
					                commonFunc.fn_view_sub();
					            },

					"data": {},
					"fn_view_sub": function(){
									if(entityDoc.show_sub_pages != true)
										return;
									var sub_container = $("#v_sub_pages");				
									sub_container.html('');
					
									$.each(childReferences , function(i,child){
					                    // to do group label
					                    var h3 = $(document.createElement("h3"));
					                    h3.css("margin-top"," 10px");
					                    h3.css("padding-bottom"," 0px");
					                    h3.addClass("cont_tit");
					                    h3.text( _.camelCase(child.childEntityName));
					                    sub_container.append(h3);
					                    
					                    var frameId = "frame_" + child.childEntityId ;
										var frameDom = $('<iframe name="" id=""  src="" style="width:100%;border: 0;height: 370px ; " ></iframe>');
										frameDom.attr("id", frameId);
										frameDom.attr("name", frameId);
										sub_container.append(frameDom);
					
										// Form Submit
										var oFrm = document.getElementById("form");
										var filter = {};
										$.each(child.parent_columns,function(j,parent_column){
											var child_column = child.child_columns[j];
											filter[child_column.toUpperCase()] = commonFunc.data[parent_column.toUpperCase()];
										});
										$("#filterPop").val(JSON.stringify(filter));
										var viewName = $("#viewName").val();
										var viewPath = viewName.split("/");
										var itemName = _.camelCase(child.childEntityName);
										viewPath.pop();
										oFrm.action =  "./generic.do?viewName=" + viewPath.join("/") + "/" + itemName + "&backgroundColor=FFF&isSubFrame=Y";;
										oFrm.method = "post";
										oFrm.target = frameId;
										frameDom.show();
										var parentFrameName = "${param.frameName}";
										if ( _.startsWith( parentFrameName,"frame") ){						
											$("#frameName").val( parentFrameName + "." + window.frameElement.name );
										}else {
											$("#frameName").val( window.frameElement.name );
										}	
					
										oFrm.submit();
										
									});
								}

				},
				"popParemeters": {
					"fn_set": function(){
								            if($("#filterPop").val() != "" ){
								                v_filterPop = JSON.parse($("#filterPop").val());
								                var v_filters = [];
								                $.each(v_filterPop ,function(field, data){
								                    var obj = {
								                        field : field ,
								                        // value: [].concat(data)
								                        value: data , 
								                        isArray : _.isArray(data)
								                    };
								                    v_filters.push( obj );
								                });
								                $("#searchJson").val(JSON.stringify({fields: v_filters}));                          
								            }            
								        }

				}
			},
			{
				"fileType": "jsp",
				"fileName": "main",
				"sources": [
					"<!DOCTYPE html>",
					"<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>",
					"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
					"<html lang=\"en\">",
					"  <head>",
					"    <!-- Required meta tags -->",
					"    <meta charset=\"utf-8\">",
					"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">",
					"",
					"",
					"    <!-- Twitter -->",
					"    <meta name=\"twitter:site\" content=\"@themepixels\">",
					"    <meta name=\"twitter:creator\" content=\"@themepixels\">",
					"    <meta name=\"twitter:card\" content=\"summary_large_image\">",
					"    <meta name=\"twitter:title\" content=\"Bracket\">",
					"    <meta name=\"twitter:description\" content=\"Premium Quality and Responsive UI for Dashboard.\">",
					"    <meta name=\"twitter:image\" content=\"http://themepixels.me/bracket/img/bracket-social.png\">",
					"",
					"    <!-- Facebook -->",
					"    <meta property=\"og:url\" content=\"http://themepixels.me/bracket\">",
					"    <meta property=\"og:title\" content=\"Bracket\">",
					"    <meta property=\"og:description\" content=\"Premium Quality and Responsive UI for Dashboard.\">",
					"",
					"    <meta property=\"og:image\" content=\"http://themepixels.me/bracket/img/bracket-social.png\">",
					"    <meta property=\"og:image:secure_url\" content=\"http://themepixels.me/bracket/img/bracket-social.png\">",
					"    <meta property=\"og:image:type\" content=\"image/png\">",
					"    <meta property=\"og:image:width\" content=\"1200\">",
					"    <meta property=\"og:image:height\" content=\"600\">",
					"",
					"    <!-- Meta -->",
					"    <meta name=\"description\" content=\"Premium Quality and Responsive UI for Dashboard.\">",
					"    <meta name=\"author\" content=\"ThemePixels\">",
					"",
					"    <title>Bracket Responsive Bootstrap 4 Admin Template</title>",
					"",
					"    <!-- vendor css -->",
					"    <link href=\"./templates/bracket/lib/font-awesome/css/font-awesome.css\" rel=\"stylesheet\">",
					"    <link href=\"./templates/bracket/lib/Ionicons/css/ionicons.css\" rel=\"stylesheet\">",
					"    <link href=\"./templates/bracket/lib/perfect-scrollbar/css/perfect-scrollbar.css\" rel=\"stylesheet\">",
					"    <link href=\"./templates/bracket/lib/jquery-switchbutton/jquery.switchButton.css\" rel=\"stylesheet\">",
					"    <link href=\"./templates/bracket/lib/rickshaw/rickshaw.min.css\" rel=\"stylesheet\">",
					"",
					"    <!-- Bracket CSS -->",
					"    <link rel=\"stylesheet\" href=\"./templates/bracket/css/bracket.css\">",
					"  </head>",
					"",
					"  <body>",
					"",
					"    <!--  START: LEFT PANEL -->",
					"    <div class=\"br-logo\"><a href=\"\"><span>[</span>bracket<span>]</span></a></div>",
					"    <div class=\"br-sideleft overflow-y-auto\">",
					"      <label class=\"sidebar-label pd-x-15 mg-t-20\">Navigation</label>",
					"      <div class=\"br-sideleft-menu\">",
					"        ",
					"        ",
					"        ",
					"        <a href=\"#\" class=\"br-menu-link\">",
					"          <div class=\"br-menu-item\">",
					"            <i class=\"menu-item-icon ion-ios-book-outline tx-24\"></i>",
					"            <span class=\"menu-item-label\">Menu</span>",
					"            <i class=\"menu-item-arrow fa fa-angle-down\"></i>",
					"          </div><!-- menu-item -->",
					"        </a><!-- br-menu-link -->",
					"        <ul class=\"br-menu-sub nav flex-column\">",
					"                                <li class=\"nav-item\"><a href=\"javascript:;\" onclick=\"fn_makeInstance('schema/testEntity.2020.05.18.21.52.59/cmmCd');\" class=\"nav-link\">cmmCd</a></li>",
					"                      <li class=\"nav-item\"><a href=\"javascript:;\" onclick=\"fn_makeInstance('schema/testEntity.2020.05.18.21.52.59/cmmUse');\" class=\"nav-link\">cmmUse</a></li>",
					"                      <li class=\"nav-item\"><a href=\"javascript:;\" onclick=\"fn_makeInstance('schema/testEntity.2020.05.18.21.52.59/tabCols');\" class=\"nav-link\">tabCols</a></li>",
					"                    ",
					"        </ul>",
					"      </div><!-- br-sideleft-menu -->",
					"",
					"      <br>",
					"    </div><!-- br-sideleft -->",
					"    <!--  END: LEFT PANEL  -->",
					"",
					"    <!--  START: HEAD PANEL  -->",
					"    <div class=\"br-header\">",
					"      <div class=\"br-header-left\">",
					"        <div class=\"navicon-left hidden-md-down\"><a id=\"btnLeftMenu\" href=\"\"><i class=\"icon ion-navicon-round\"></i></a></div>",
					"        <div class=\"navicon-left hidden-lg-up\"><a id=\"btnLeftMenuMobile\" href=\"\"><i class=\"icon ion-navicon-round\"></i></a></div>",
					"        <div class=\"input-group hidden-xs-down wd-170 transition\">",
					"          <input id=\"searchbox\" type=\"text\" class=\"form-control\" placeholder=\"Search\">",
					"          <span class=\"input-group-btn\">",
					"            <button class=\"btn btn-secondary\" type=\"button\"><i class=\"fa fa-search\"></i></button>",
					"          </span>",
					"        </div><!-- input-group -->",
					"      </div><!-- br-header-left -->",
					"    </div><!-- br-header --> ",
					"    <!--  END: HEAD PANEL  -->",
					"",
					"    <!--  START: RIGHT PANEL  -->",
					"    <div class=\"br-sideright\">",
					"      <ul class=\"nav nav-tabs sidebar-tabs\" role=\"tablist\">",
					"        <li class=\"nav-item\">",
					"          <a class=\"nav-link active\" data-toggle=\"tab\" role=\"tab\" href=\"#contacts\"><i class=\"icon ion-ios-contact-outline tx-24\"></i></a>",
					"        </li>",
					"        <li class=\"nav-item\">",
					"          <a class=\"nav-link\" data-toggle=\"tab\" role=\"tab\" href=\"#attachments\"><i class=\"icon ion-ios-folder-outline tx-22\"></i></a>",
					"        </li>",
					"        <li class=\"nav-item\">",
					"          <a class=\"nav-link\" data-toggle=\"tab\" role=\"tab\" href=\"#calendar\"><i class=\"icon ion-ios-calendar-outline tx-24\"></i></a>",
					"        </li>",
					"        <li class=\"nav-item\">",
					"          <a class=\"nav-link\" data-toggle=\"tab\" role=\"tab\" href=\"#settings\"><i class=\"icon ion-ios-gear-outline tx-24\"></i></a>",
					"        </li>",
					"      </ul><!-- sidebar-tabs -->",
					"",
					"      <!-- Tab panes -->",
					"      <div class=\"tab-content\">",
					"        <div class=\"tab-pane pos-absolute a-0 mg-t-60 overflow-y-auto active\" id=\"contacts\" role=\"tabpanel\">",
					"          <label class=\"sidebar-label pd-x-25 mg-t-25\">Online Contacts</label>",
					"          <div class=\"contact-list pd-x-10\">",
					"            <a href=\"\" class=\"contact-list-link new\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img2.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-success\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Marilyn Tarter</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Clemson, CA</span>",
					"                </div>",
					"                <span class=\"tx-info tx-12\"><span class=\"square-8 bg-info rounded-circle\"></span> 1 new</span>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img3.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-success\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0 \">Belinda Connor</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Fort Kent, ME</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link new\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img4.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-success\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Britanny Cevallos</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Shiboygan Falls, WI</span>",
					"                </div>",
					"                <span class=\"tx-info tx-12\"><span class=\"square-8 bg-info rounded-circle\"></span> 3 new</span>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link new\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img5.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-success\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Brandon Lawrence</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Snohomish, WA</span>",
					"                </div>",
					"                <span class=\"tx-info tx-12\"><span class=\"square-8 bg-info rounded-circle\"></span> 1 new</span>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img6.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-success\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Andrew Wiggins</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Springfield, MA</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img7.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-success\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Theodore Gristen</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Nashville, TN</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img8.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-success\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Deborah Miner</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">North Shore, CA</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"          </div><!-- contact-list -->",
					"",
					"",
					"          <label class=\"sidebar-label pd-x-25 mg-t-25\">Offline Contacts</label>",
					"          <div class=\"contact-list pd-x-10\">",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img2.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-gray-500\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Marilyn Tarter</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Clemson, CA</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img3.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-gray-500\"></div>",
					"                </div>",
					"                <div class=\"mg-l-10\">",
					"                  <p class=\"mg-b-0\">Belinda Connor</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Fort Kent, ME</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img4.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-gray-500\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Britanny Cevallos</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Shiboygan Falls, WI</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img5.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-gray-500\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Brandon Lawrence</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Snohomish, WA</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img6.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-gray-500\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Andrew Wiggins</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Springfield, MA</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img7.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-gray-500\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Theodore Gristen</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">Nashville, TN</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"            <a href=\"\" class=\"contact-list-link\">",
					"              <div class=\"d-flex\">",
					"                <div class=\"pos-relative\">",
					"                  <img src=\"templates/bracket/img/img8.jpg\" class=\"wd-40 rounded-circle\" alt=\"\">",
					"                  <div class=\"contact-status-indicator bg-gray-500\"></div>",
					"                </div>",
					"                <div class=\"contact-person\">",
					"                  <p class=\"mg-b-0\">Deborah Miner</p>",
					"                  <span class=\"tx-12 op-5 d-inline-block\">North Shore, CA</span>",
					"                </div>",
					"              </div><!-- d-flex -->",
					"            </a><!-- contact-list-link -->",
					"          </div><!-- contact-list -->",
					"",
					"        </div><!-- #contacts -->",
					"",
					"",
					"        <div class=\"tab-pane pos-absolute a-0 mg-t-60 overflow-y-auto\" id=\"attachments\" role=\"tabpanel\">",
					"          <label class=\"sidebar-label pd-x-25 mg-t-25\">Recent Attachments</label>",
					"          <div class=\"media-file-list\">",
					"            <div class=\"media\">",
					"              <div class=\"pd-10 bg-primary wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-image-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">IMG_43445</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">JPG Image</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">1.2mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"            <div class=\"media mg-t-20\">",
					"              <div class=\"pd-10 bg-purple wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-video-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">VID_6543</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">MP4 Video</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">24.8mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"            <div class=\"media mg-t-20\">",
					"              <div class=\"pd-10 bg-success wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-word-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">Tax_Form</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">Word Document</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">5.5mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"            <div class=\"media mg-t-20\">",
					"              <div class=\"pd-10 bg-warning wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-pdf-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">Getting_Started</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">PDF Document</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">12.7mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"            <div class=\"media mg-t-20\">",
					"              <div class=\"pd-10 bg-warning wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-pdf-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">Introduction</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">PDF Document</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">7.7mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"            <div class=\"media mg-t-20\">",
					"              <div class=\"pd-10 bg-primary wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-image-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">IMG_43420</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">JPG Image</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">2.2mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"            <div class=\"media mg-t-20\">",
					"              <div class=\"pd-10 bg-primary wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-image-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">IMG_43447</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">JPG Image</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">3.2mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"            <div class=\"media mg-t-20\">",
					"              <div class=\"pd-10 bg-purple wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-video-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">VID_6545</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">AVI Video</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">14.8mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"            <div class=\"media mg-t-20\">",
					"              <div class=\"pd-10 bg-success wd-50 ht-60 tx-center d-flex align-items-center justify-content-center\">",
					"                <i class=\"fa fa-file-word-o tx-28 tx-white\"></i>",
					"              </div>",
					"              <div class=\"media-body\">",
					"                <p class=\"mg-b-0 tx-13\">Secret_Document</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">Word Document</p>",
					"                <p class=\"mg-b-0 tx-12 op-5\">4.5mb</p>",
					"              </div><!-- media-body -->",
					"              <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"            </div><!-- media -->",
					"          </div><!-- media-list -->",
					"        </div><!-- #history -->",
					"        <div class=\"tab-pane pos-absolute a-0 mg-t-60 overflow-y-auto\" id=\"calendar\" role=\"tabpanel\">",
					"          <label class=\"sidebar-label pd-x-25 mg-t-25\">Time &amp; Date</label>",
					"          <div class=\"pd-x-25\">",
					"            <h2 id=\"brTime\" class=\"tx-white tx-lato mg-b-5\"></h2>",
					"            <h6 id=\"brDate\" class=\"tx-white tx-light op-3\"></h6>",
					"          </div>",
					"",
					"          <label class=\"sidebar-label pd-x-25 mg-t-25\">Events Calendar</label>",
					"          <div class=\"datepicker sidebar-datepicker\"></div>",
					"",
					"",
					"          <label class=\"sidebar-label pd-x-25 mg-t-25\">Event Today</label>",
					"          <div class=\"pd-x-25\">",
					"            <div class=\"list-group sidebar-event-list mg-b-20\">",
					"              <div class=\"list-group-item\">",
					"                <div>",
					"                  <h6 class=\"tx-white tx-13 mg-b-5 tx-normal\">Roven's 32th Birthday</h6>",
					"                  <p class=\"mg-b-0 tx-white tx-12 op-2\">2:30PM</p>",
					"                </div>",
					"                <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"              </div><!-- list-group-item -->",
					"              <div class=\"list-group-item\">",
					"                <div>",
					"                  <h6 class=\"tx-white tx-13 mg-b-5 tx-normal\">Regular Workout Schedule</h6>",
					"                  <p class=\"mg-b-0 tx-white tx-12 op-2\">7:30PM</p>",
					"                </div>",
					"                <a href=\"\" class=\"more\"><i class=\"icon ion-android-more-vertical tx-18\"></i></a>",
					"              </div><!-- list-group-item -->",
					"            </div><!-- list-group -->",
					"",
					"            <a href=\"\" class=\"btn btn-block btn-outline-secondary tx-uppercase tx-11 tx-spacing-2\">+ Add Event</a>",
					"            <br>",
					"          </div>",
					"",
					"        </div>",
					"        <div class=\"tab-pane pos-absolute a-0 mg-t-60 overflow-y-auto\" id=\"settings\" role=\"tabpanel\">",
					"          <label class=\"sidebar-label pd-x-25 mg-t-25\">Quick Settings</label>",
					"",
					"          <div class=\"pd-y-20 pd-x-25 tx-white\">",
					"            <h6 class=\"tx-13 tx-normal\">Sound Notification</h6>",
					"            <p class=\"op-5 tx-13\">Play an alert sound everytime there is a new notification.</p>",
					"            <div class=\"pos-relative\">",
					"              <input type=\"checkbox\" name=\"checkbox\" class=\"switch-button\" checked>",
					"            </div>",
					"          </div>",
					"",
					"          <div class=\"pd-y-20 pd-x-25 tx-white\">",
					"            <h6 class=\"tx-13 tx-normal\">2 Steps Verification</h6>",
					"            <p class=\"op-5 tx-13\">Sign in using a two step verification by sending a verification code to your phone.</p>",
					"            <div class=\"pos-relative\">",
					"              <input type=\"checkbox\" name=\"checkbox2\" class=\"switch-button\">",
					"            </div>",
					"          </div>",
					"",
					"          <div class=\"pd-y-20 pd-x-25 tx-white\">",
					"            <h6 class=\"tx-13 tx-normal\">Location Services</h6>",
					"            <p class=\"op-5 tx-13\">Allowing us to access your location</p>",
					"            <div class=\"pos-relative\">",
					"              <input type=\"checkbox\" name=\"checkbox3\" class=\"switch-button\">",
					"            </div>",
					"          </div>",
					"",
					"          <div class=\"pd-y-20 pd-x-25 tx-white\">",
					"            <h6 class=\"tx-13 tx-normal\">Newsletter Subscription</h6>",
					"            <p class=\"op-5 tx-13\">Enables you to send us news and updates send straight to your email.</p>",
					"            <div class=\"pos-relative\">",
					"              <input type=\"checkbox\" name=\"checkbox4\" class=\"switch-button\" checked>",
					"            </div>",
					"          </div>",
					"",
					"          <div class=\"pd-y-20 pd-x-25 tx-white\">",
					"            <h6 class=\"tx-13 tx-normal\">Your email</h6>",
					"            <div class=\"pos-relative\">",
					"              <input type=\"email\" name=\"email\" class=\"form-control form-control-inverse transition pd-y-10\" value=\"janedoe@domain.com\">",
					"            </div>",
					"          </div>",
					"",
					"          <div class=\"pd-y-20 pd-x-25\">",
					"            <h6 class=\"tx-13 tx-normal tx-white mg-b-20\">More Settings</h6>",
					"            <a href=\"\" class=\"btn btn-block btn-outline-secondary tx-uppercase tx-11 tx-spacing-2\">Account Settings</a>",
					"            <a href=\"\" class=\"btn btn-block btn-outline-secondary tx-uppercase tx-11 tx-spacing-2\">Privacy Settings</a>",
					"          </div>",
					"",
					"        </div>",
					"      </div><!-- tab-content -->",
					"    </div><!-- br-sideright -->",
					"    <!--  END: RIGHT PANEL  --->",
					"",
					"    <!--  START: MAIN PANEL  -->",
					"    <div class=\"br-mainpanel\">",
					"",
					"      <div id=\"pagebody\" class=\"br-pagebody mg-t-5 pd-x-30\">",
					"        ",
					"      </div><!-- br-pagebody -->",
					"    </div><!-- br-mainpanel -->",
					"    <!--  END: MAIN PANEL  -->",
					"",
					"    <script src=\"./templates/bracket/lib/jquery/jquery.js\"></script>",
					"    <script src=\"./templates/bracket/lib/popper.js/popper.js\"></script>",
					"    <script src=\"./templates/bracket/lib/bootstrap/bootstrap.js\"></script>",
					"    <script src=\"./templates/bracket/lib/perfect-scrollbar/js/perfect-scrollbar.jquery.js\"></script>",
					"    <script src=\"./templates/bracket/lib/moment/moment.js\"></script>",
					"    <script src=\"./templates/bracket/lib/jquery-ui/jquery-ui.js\"></script>",
					"    <script src=\"./templates/bracket/lib/jquery-switchbutton/jquery.switchButton.js\"></script>",
					"    <script src=\"./templates/bracket/lib/peity/jquery.peity.js\"></script>",
					"    <script src=\"./templates/bracket/lib/jquery.sparkline.bower/jquery.sparkline.min.js\"></script>",
					"    <script src=\"./templates/bracket/lib/d3/d3.js\"></script>",
					"    <script src=\"./templates/bracket/lib/rickshaw/rickshaw.min.js\"></script>",
					"",
					"    <script src=\"./templates/bracket/js/bracket.js\"></script>",
					"    <script src=\"./templates/bracket/js/ResizeSensor.js\"></script>",
					"",
					"    <!-- react  -->",
					"    <script  src=\"./js/react-0.14.3/build/react.js\"></script>",
					"\t\t<script  src=\"./js/react-0.14.3/build/react-dom.js\"></script>",
					"\t\t<script  src=\"./js/react-0.14.3/build/react-with-addons.js\"></script>",
					"\t\t<script  src=\"./js/react-0.14.3/browser.js\" ></script>",
					"",
					"    <!-- ì¤í¤ë§ë¥¼ ë°íì¼ë¡ ìì¤ë¥¼ ìì±íê¸°  -->",
					"    <script src=\"./js/bpmn/gen/gen_instance_list.js\"></script>",
					"    <script src=\"./js/bpmn/gen/gen_instance.js\"></script>",
					"    <script src=\"./js/bpmn/gen/makeHtmlBySchema.js\"></script>",
					"    <script src=\"./js/gen/testEntityJpaFiles.2020.04.07.03.11.38.js\"></script>",
					"    <script>",
					"      $(function(){",
					"        'use strict'",
					"",
					"        // FOR DEMO ONLY",
					"        // menu collapsed by default during first page load or refresh with screen",
					"        // having a size between 992px and 1299px. This is intended on this page only",
					"        // for better viewing of widgets demo.",
					"        $(window).resize(function(){",
					"          minimizeMenu();",
					"        });",
					"",
					"        minimizeMenu();",
					"",
					"        function minimizeMenu() {",
					"          if(window.matchMedia('(min-width: 992px)').matches && window.matchMedia('(max-width: 1299px)').matches) {",
					"            // show only the icons and hide left menu label by default",
					"            $('.menu-item-label,.menu-item-arrow').addClass('op-lg-0-force d-lg-none');",
					"            $('body').addClass('collapsed-menu');",
					"            $('.show-sub + .br-menu-sub').slideUp();",
					"          } else if(window.matchMedia('(min-width: 1300px)').matches && !$('body').hasClass('collapsed-menu')) {",
					"            $('.menu-item-label,.menu-item-arrow').removeClass('op-lg-0-force d-lg-none');",
					"            $('body').removeClass('collapsed-menu');",
					"            $('.show-sub + .br-menu-sub').slideDown();",
					"          }",
					"        }",
					"",
					"        // $('.fc-datepicker').datepicker({",
					"        //   dateFormat: \"yy-mm-dd\",",
					"        //   showOtherMonths: true,",
					"        //   selectOtherMonths: true",
					"        // });",
					"",
					"      });",
					"",
					"      function fn_makeInstance(_entityId){",
					"        delete instances;",
					"        instances = new gen_instance_list($(\"#pagebody\") , testEntityJpaFiles );",
					"        instances.add_instance(_entityId);",
					"      }",
					"    </script>",
					"  </body>",
					"  <jsp:include page=\"/WEB-INF/views/include/includeReactComponent.jsp\"></jsp:include>",
					"</html>",
					"\r",
					""
				]
			}
		];