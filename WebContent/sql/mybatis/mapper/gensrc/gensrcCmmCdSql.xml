<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="">
<select id="gensrcCmmCd.gensrcCmmCd.page.list" resultType="hashmap" >

	Select 
			*		
		From 
		(
			select
				A.*
			from 
			(


	select 
		CODE_CATEGORY,CODE_ID,CODE_NM
	from GENSRC_CMM_CD a 
	where 1=1
	<if test="search_codeCategory != null and search_codeCategory !='' ">
		and code_category = #{search_codeCategory}
	</if>
	<if test="search_codeId != null and search_codeId !='' ">
		and code_id = #{search_codeId}
	</if>
	<if test="search_codeNm != null and search_codeNm !='' ">
		and code_nm = #{search_codeNm}
	</if>

		<choose>
   			<when test="searchJson != null and searchJson != '' and searchJson.fields != null and searchJson.fields.size() > 0  ">   				
   				<foreach collection="searchJson.fields" item="field" index="index"  open=" and " separator=" and " close="">
	                <choose>
	                	<when test="field.isArray == true ">
		                	${field.field} in 
			                <foreach collection="field.value" item="item" index="index"  open="(" separator=" , " close=")">
			                	#{item}
			                </foreach>
			        	</when>
			        	<otherwise>
			        		${field.field} = #{field.value}
			        	</otherwise>
	                </choose>
	                
	            </foreach>
   			</when>
   			<otherwise></otherwise>
   		</choose>
		<choose><when test="sidx != null and sidx != '' "> order by ${sidx} <if test="sord != null and sord != '' "> ${sord} </if> </when><otherwise>order by 1,2</otherwise></choose>


	) A where 1=1 
			<choose>
				<when test="filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )">
					and (
					<if test="filters.rules.size() > 0" >
			       		<foreach collection="filters.rules" item="item" index="index"  open="(" separator="" close=")">
			           		<if test="index > 0 "> ${filters.groupOp} </if>
							<choose>
								<when test="item.data.equalsIgnoreCase('isnull')"> is null</when>
				    			<when test="item.op =='eq' ">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>
				           		<when test="item.op =='ne' ">${item.field} <![CDATA[ != ]]> #{item.data}</when>
				           		<when test="item.op =='lt' ">${item.field} <![CDATA[ < ]]> #{item.data}</when>
				           		<when test="item.op =='le' ">${item.field} <![CDATA[ <= ]]> #{item.data}</when>
				           		<when test="item.op =='gt' ">${item.field} <![CDATA[ > ]]> #{item.data}</when>
				           		<when test="item.op =='ge' ">${item.field} <![CDATA[ >= ]]> #{item.data}</when>
				           		<when test="item.op =='bw' ">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>
				           		<when test="item.op =='bn' "> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>
				           		<when test="item.op =='in' "></when>
				           		<when test="item.op =='ni' "></when>
				           		<when test="item.op =='ew' "> REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>
				           		<when test="item.op =='en' "> NOT REGEXP_LIKE(${item.field}, #{item.data}|| '$','i')</when>
				           		<when test="item.op =='cn' ">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>
				           		<when test="item.op =='nc' ">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>
				           		</choose>
			       		</foreach>	
			       	</if>	
			       	<if test="filters.groups != null and filters.groups.size() > 0">
		       			<foreach collection="filters.groups" item="group" index="group_index"  open=""  close="">
			       			<if test="group.rules.size() > 0">
			       			${filters.groupOp}
				           	<foreach collection="group.rules" item="rule" index="rule_index"  open="("   separator="" close=")">
					        	<if test="rule_index > 0 "> ${group.groupOp} </if>
	           		 			<choose>
									<when test="rule.data.equalsIgnoreCase('isnull')"> is null</when>	
					           		<when test="rule.op =='eq' ">REGEXP_LIKE(${rule.field}, '^' || #{rule.data}|| '$','i')</when>
					           		<when test="rule.op =='ne' ">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>
					           		<when test="rule.op =='lt' ">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>
					           		<when test="rule.op =='le' ">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>
					           		<when test="rule.op =='gt' ">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>
					           		<when test="rule.op =='ge' ">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>
					           		<when test="rule.op =='bw' ">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>
					           		<when test="rule.op =='bn' "> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>
					           		<when test="rule.op =='in' "></when>
					           		<when test="rule.op =='ni' "></when>
					           		<when test="rule.op =='ew' "> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>
					           		<when test="rule.op =='en' "> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>
					           		<when test="rule.op =='cn' ">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>
					           		<when test="rule.op =='nc' ">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>
					           		</choose> 
					       	</foreach>
					       	</if>
				       	</foreach>
		       		</if> 
		       		 )
		   		</when>
	   		</choose>
		) A
		LIMIT #{int_limit} OFFSET #{int_offset}
		

</select>
<select id="gensrcCmmCd.gensrcCmmCd.page.total" resultType="hashmap" >

	select 
		ceil(count(*)/ #{rows} ) as total,
		#{page} as page ,
		count(*) records 
	from 
	(
		select a.* from (


	select 
		CODE_CATEGORY,CODE_ID,CODE_NM
	from GENSRC_CMM_CD a 
	where 1=1
	<if test="search_codeCategory != null and search_codeCategory !='' ">
		and code_category = #{search_codeCategory}
	</if>
	<if test="search_codeId != null and search_codeId !='' ">
		and code_id = #{search_codeId}
	</if>
	<if test="search_codeNm != null and search_codeNm !='' ">
		and code_nm = #{search_codeNm}
	</if>

		<choose>
   			<when test="searchJson != null and searchJson != '' and searchJson.fields != null and searchJson.fields.size() > 0  ">   				
   				<foreach collection="searchJson.fields" item="field" index="index"  open=" and " separator=" and " close="">
	                <choose>
	                	<when test="field.isArray == true ">
		                	${field.field} in 
			                <foreach collection="field.value" item="item" index="index"  open="(" separator=" , " close=")">
			                	#{item}
			                </foreach>
			        	</when>
			        	<otherwise>
			        		${field.field} = #{field.value}
			        	</otherwise>
	                </choose>
	                
	            </foreach>
   			</when>
   			<otherwise></otherwise>
   		</choose>
		<choose><when test="sidx != null and sidx != '' "> order by ${sidx} <if test="sord != null and sord != '' "> ${sord} </if> </when><otherwise>order by 1,2</otherwise></choose>


	) a
	where 1=1 			
	<choose>
		<when test="filters != null and filters != '' and (filters.rules.size() > 0  or (filters.groups != null and filters.groups.size() > 0) )">
			and (
			<if test="filters.rules.size() > 0" >
				<foreach collection="filters.rules" item="item" index="index"  open="(" separator="" close=")">
					<if test="index > 0 "> ${filters.groupOp} </if>
					<choose>
				    <when test="item.op =='eq' ">REGEXP_LIKE(${item.field}, '^' || #{item.data} || '$','i')</when>
				           		<when test="item.op =='ne' ">${item.field} <![CDATA[ != ]]> #{item.data}</when>
				           		<when test="item.op =='lt' ">${item.field} <![CDATA[ < ]]> #{item.data}</when>
				           		<when test="item.op =='le' ">${item.field} <![CDATA[ <= ]]> #{item.data}</when>
				           		<when test="item.op =='gt' ">${item.field} <![CDATA[ > ]]> #{item.data}</when>
				           		<when test="item.op =='ge' ">${item.field} <![CDATA[ >= ]]> #{item.data}</when>
				           		<when test="item.op =='bw' ">REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>
				           		<when test="item.op =='bn' "> NOT REGEXP_LIKE(${item.field}, '^' || #{item.data},'i')</when>
				           		<when test="item.op =='in' "></when>
				           		<when test="item.op =='ni' "></when>
				           		<when test="item.op =='ew' "> REGEXP_LIKE(${item.field}, #{item.data} || '$','i')</when>
				           		<when test="item.op =='en' "> NOT REGEXP_LIKE(${item.field}, #{item.data} || '$','i')</when>
				           		<when test="item.op =='cn' ">REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>
				           		<when test="item.op =='cn' ">NOT REGEXP_LIKE(${item.field}, REGEXP_REPLACE(#{item.data},' ','|'),'i')</when>
				           		</choose>
				</foreach>	
			</if>	
			<if test="filters.groups != null and filters.groups.size() > 0">
				<foreach collection="filters.groups" item="group" index="group_index"  open=""  close="">
					<if test="group.rules.size() > 0">
					${filters.groupOp}
					<foreach collection="group.rules" item="rule" index="rule_index"  open="("   separator="" close=")">
						<if test="rule_index > 0 "> ${group.groupOp} </if>
						<choose>
					           		<when test="rule.op =='eq' ">REGEXP_LIKE(${rule.field}, '^' || #{rule.data} || '$','i')</when>
					           		<when test="rule.op =='ne' ">${rule.field} <![CDATA[ != ]]> #{rule.data}</when>
					           		<when test="rule.op =='lt' ">${rule.field} <![CDATA[ < ]]> #{rule.data}</when>
					           		<when test="rule.op =='le' ">${rule.field} <![CDATA[ <= ]]> #{rule.data}</when>
					           		<when test="rule.op =='gt' ">${rule.field} <![CDATA[ > ]]> #{rule.data}</when>
					           		<when test="rule.op =='ge' ">${rule.field} <![CDATA[ >= ]]> #{rule.data}</when>
					           		<when test="rule.op =='bw' ">REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>
					           		<when test="rule.op =='bn' "> NOT REGEXP_LIKE(${rule.field}, '^' || #{rule.data},'i')</when>
					           		<when test="rule.op =='in' "></when>
					           		<when test="rule.op =='ni' "></when>
					           		<when test="rule.op =='ew' "> REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>
					           		<when test="rule.op =='en' "> NOT REGEXP_LIKE(${rule.field}, #{rule.data} || '$','i')</when>
					           		<when test="rule.op =='cn' ">REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>
					           		<when test="rule.op =='cn' ">NOT REGEXP_LIKE(${rule.field}, REGEXP_REPLACE(#{rule.data},' ','|'),'i')</when>
					           		</choose>           		 
					</foreach>
					</if>
				</foreach>
			</if> 
				)
		</when>
	</choose>
	) a

</select>
<select id="gensrcCmmCd.gensrcCmmCd.one" resultType="hashmap" >
	select 
		CODE_CATEGORY,CODE_ID,CODE_NM
	from GENSRC_CMM_CD a 
	where 1=1
	<if test="search_codeCategory != null and search_codeCategory !='' ">
		and code_category = #{search_codeCategory}
	</if>
	<if test="search_codeId != null and search_codeId !='' ">
		and code_id = #{search_codeId}
	</if>
	<if test="search_codeNm != null and search_codeNm !='' ">
		and code_nm = #{search_codeNm}
	</if>

		<choose>
   			<when test="searchJson != null and searchJson != '' and searchJson.fields != null and searchJson.fields.size() > 0  ">   				
   				<foreach collection="searchJson.fields" item="field" index="index"  open=" and " separator=" and " close="">
	                <choose>
	                	<when test="field.isArray == true ">
		                	${field.field} in 
			                <foreach collection="field.value" item="item" index="index"  open="(" separator=" , " close=")">
			                	#{item}
			                </foreach>
			        	</when>
			        	<otherwise>
			        		${field.field} = #{field.value}
			        	</otherwise>
	                </choose>
	                
	            </foreach>
   			</when>
   			<otherwise></otherwise>
   		</choose>
		<choose><when test="sidx != null and sidx != '' "> order by ${sidx} <if test="sord != null and sord != '' "> ${sord} </if> </when><otherwise>order by 1,2</otherwise></choose>

</select>
<update id="gensrcCmmCd.gensrcCmmCd.insert" parameterType="hashmap" >
		insert into GENSRC_CMM_CD(
			code_category,code_id,code_nm
			,INS_DT
		)
		values (
			#{CODE_CATEGORY}
			,
			#{CODE_ID}
			,
			#{CODE_NM}
			,now()
		);
</update>
<update id="gensrcCmmCd.gensrcCmmCd.edit" parameterType="hashmap" >
	update GENSRC_CMM_CD set
		MOD_Dt = now(),  
			 ${fieldName} = #{fieldValue}
		where 1=1
		<choose>
			<when test="searchJson != null and searchJson != '' and searchJson.origindatas.size() > 0 " >
				<foreach collection="searchJson.origindatas" item="item" index="index"  >
				 and ${item.field} = #{item.value}
				</foreach>
			</when>
			<otherwise>
			and 1=2
			</otherwise>
		</choose>
		;
</update>
<update id="gensrcCmmCd.gensrcCmmCd.delete" parameterType="hashmap" >
			delete from GENSRC_CMM_CD
			where 1=1
			and code_category = #{detail.CODE_CATEGORY}
			and code_id = #{detail.CODE_ID}
			;
</update>
<select id="gensrcCmmCd.dictionary.gensrcCmmCd" resultType="hashmap" >
	select  
	b.TABLE_NAME
	, b.COLUMN_NAME
	, a.CODE_CATEGORY
	, a.CODE_ID
	, a.CODE_NM
	from GENSRC_CMM_CD a
	left outer join  GENSRC_CMM_USE b
	 on a.CODE_CATEGORY = b.CODE_CATEGORY
	where b.TABLE_NAME is not null
	order by 1,2,3,4
</select>
</mapper>